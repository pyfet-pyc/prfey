
# file test/103582.pyc
# --- This code section failed: ---

 L.   4         0  LOAD_STR                 'Tokenization help for Python programs.\n\ngenerate_tokens(readline) is a generator that breaks a stream of\ntext into Python tokens.  It accepts a readline-like method which is called\nrepeatedly to get the next line of input (or "" for EOF).  It generates\n5-tuples with these members:\n\n    the token type (see token.py)\n    the token (a string)\n    the starting (row, column) indices of the token (a 2-tuple of ints)\n    the ending (row, column) indices of the token (a 2-tuple of ints)\n    the original line (string)\n\nIt is designed to match the working of the Python tokenizer exactly, except\nthat it produces COMMENT tokens for comments and gives type OP for all\noperators\n\nOlder entry points\n    tokenize_loop(readline, tokeneater)\n    tokenize(readline, tokeneater=printtoken)\nare the same, except instead of generating tokens, tokeneater is a callback\nfunction to which the 5 fields described above are passed as 5 arguments,\neach time a new token is found.'
                2  STORE_NAME               __doc__

 L.  28         4  LOAD_STR                 'Ka-Ping Yee <ping@lfw.org>'
                6  STORE_NAME               __author__

 L.  30         8  LOAD_STR                 'GvR, ESR, Tim Peters, Thomas Wouters, Fred Drake, Skip Montanaro'

 L.  29        10  STORE_NAME               __credits__

 L.  32        12  LOAD_CONST               0
               14  LOAD_CONST               None
               16  IMPORT_NAME              string
               18  STORE_NAME               string
               20  LOAD_CONST               0
               22  LOAD_CONST               None
               24  IMPORT_NAME              re
               26  STORE_NAME               re

 L.  33        28  LOAD_CONST               0
               30  LOAD_CONST               ('BOM_UTF8', 'lookup')
               32  IMPORT_NAME              codecs
               34  IMPORT_FROM              BOM_UTF8
               36  STORE_NAME               BOM_UTF8
               38  IMPORT_FROM              lookup
               40  STORE_NAME               lookup
               42  POP_TOP          

 L.  34        44  LOAD_CONST               0
               46  LOAD_CONST               ('*',)
               48  IMPORT_NAME_ATTR         lib2to3.pgen2.token
               50  IMPORT_STAR      

 L.  36        52  LOAD_CONST               1
               54  LOAD_CONST               ('token',)
               56  IMPORT_NAME              
               58  IMPORT_FROM              token
               60  STORE_NAME               token
               62  POP_TOP          

 L.  37        64  LOAD_LISTCOMP            '<code_object <listcomp>>'
               66  LOAD_STR                 '<listcomp>'
               68  MAKE_FUNCTION_0          'Neither defaults, keyword-only args, annotations, nor closures'
               70  LOAD_NAME                dir
               72  LOAD_NAME                token
               74  CALL_FUNCTION_1       1  ''
               76  GET_ITER         
               78  CALL_FUNCTION_1       1  ''
               80  BUILD_LIST_0          0 
               82  LOAD_CONST               ('tokenize', 'generate_tokens', 'untokenize')
               84  CALL_FINALLY         87  'to 87'
               86  BINARY_ADD       
               88  STORE_NAME               __all__

 L.  39        90  DELETE_NAME              token

 L.  41        92  SETUP_FINALLY       102  'to 102'

 L.  42        94  LOAD_NAME                bytes
               96  POP_TOP          
               98  POP_BLOCK        
              100  JUMP_FORWARD        124  'to 124'
            102_0  COME_FROM_FINALLY    92  '92'

 L.  43       102  DUP_TOP          
              104  LOAD_NAME                NameError
              106  <121>               122  ''
              108  POP_TOP          
              110  POP_TOP          
              112  POP_TOP          

 L.  46       114  LOAD_NAME                str
              116  STORE_NAME               bytes
              118  POP_EXCEPT       
              120  JUMP_FORWARD        124  'to 124'
              122  <48>             
            124_0  COME_FROM           120  '120'
            124_1  COME_FROM           100  '100'

 L.  48       124  LOAD_CODE                <code_object group>
              126  LOAD_STR                 'group'
              128  MAKE_FUNCTION_0          'Neither defaults, keyword-only args, annotations, nor closures'
              130  STORE_NAME               group

 L.  49       132  LOAD_CODE                <code_object any>
              134  LOAD_STR                 'any'
              136  MAKE_FUNCTION_0          'Neither defaults, keyword-only args, annotations, nor closures'
              138  STORE_NAME               any

 L.  50       140  LOAD_CODE                <code_object maybe>
              142  LOAD_STR                 'maybe'
              144  MAKE_FUNCTION_0          'Neither defaults, keyword-only args, annotations, nor closures'
              146  STORE_NAME               maybe

 L.  51       148  LOAD_CODE                <code_object _combinations>
              150  LOAD_STR                 '_combinations'
              152  MAKE_FUNCTION_0          'Neither defaults, keyword-only args, annotations, nor closures'
              154  STORE_NAME               _combinations

 L.  56       156  LOAD_STR                 '[ \\f\\t]*'
              158  STORE_NAME               Whitespace

 L.  57       160  LOAD_STR                 '#[^\\r\\n]*'
              162  STORE_NAME               Comment

 L.  58       164  LOAD_NAME                Whitespace
              166  LOAD_NAME                any
              168  LOAD_STR                 '\\\\\\r?\\n'
              170  LOAD_NAME                Whitespace
              172  BINARY_ADD       
              174  CALL_FUNCTION_1       1  ''
              176  BINARY_ADD       
              178  LOAD_NAME                maybe
              180  LOAD_NAME                Comment
              182  CALL_FUNCTION_1       1  ''
              184  BINARY_ADD       
              186  STORE_NAME               Ignore

 L.  59       188  LOAD_STR                 '\\w+'
              190  STORE_NAME               Name

 L.  61       192  LOAD_STR                 '0[bB]_?[01]+(?:_[01]+)*'
              194  STORE_NAME               Binnumber

 L.  62       196  LOAD_STR                 '0[xX]_?[\\da-fA-F]+(?:_[\\da-fA-F]+)*[lL]?'
              198  STORE_NAME               Hexnumber

 L.  63       200  LOAD_STR                 '0[oO]?_?[0-7]+(?:_[0-7]+)*[lL]?'
              202  STORE_NAME               Octnumber

 L.  64       204  LOAD_NAME                group
              206  LOAD_STR                 '[1-9]\\d*(?:_\\d+)*[lL]?'
              208  LOAD_STR                 '0[lL]?'
              210  CALL_FUNCTION_2       2  ''
              212  STORE_NAME               Decnumber

 L.  65       214  LOAD_NAME                group
              216  LOAD_NAME                Binnumber
              218  LOAD_NAME                Hexnumber
              220  LOAD_NAME                Octnumber
              222  LOAD_NAME                Decnumber
              224  CALL_FUNCTION_4       4  ''
              226  STORE_NAME               Intnumber

 L.  66       228  LOAD_STR                 '[eE][-+]?\\d+(?:_\\d+)*'
              230  STORE_NAME               Exponent

 L.  67       232  LOAD_NAME                group
              234  LOAD_STR                 '\\d+(?:_\\d+)*\\.(?:\\d+(?:_\\d+)*)?'
              236  LOAD_STR                 '\\.\\d+(?:_\\d+)*'
              238  CALL_FUNCTION_2       2  ''
              240  LOAD_NAME                maybe
              242  LOAD_NAME                Exponent
              244  CALL_FUNCTION_1       1  ''
              246  BINARY_ADD       
              248  STORE_NAME               Pointfloat

 L.  68       250  LOAD_STR                 '\\d+(?:_\\d+)*'
              252  LOAD_NAME                Exponent
              254  BINARY_ADD       
              256  STORE_NAME               Expfloat

 L.  69       258  LOAD_NAME                group
              260  LOAD_NAME                Pointfloat
              262  LOAD_NAME                Expfloat
              264  CALL_FUNCTION_2       2  ''
              266  STORE_NAME               Floatnumber

 L.  70       268  LOAD_NAME                group
              270  LOAD_STR                 '\\d+(?:_\\d+)*[jJ]'
              272  LOAD_NAME                Floatnumber
              274  LOAD_STR                 '[jJ]'
              276  BINARY_ADD       
              278  CALL_FUNCTION_2       2  ''
              280  STORE_NAME               Imagnumber

 L.  71       282  LOAD_NAME                group
              284  LOAD_NAME                Imagnumber
              286  LOAD_NAME                Floatnumber
              288  LOAD_NAME                Intnumber
              290  CALL_FUNCTION_3       3  ''
              292  STORE_NAME               Number

 L.  74       294  LOAD_STR                 "[^'\\\\]*(?:\\\\.[^'\\\\]*)*'"
              296  STORE_NAME               Single

 L.  76       298  LOAD_STR                 '[^"\\\\]*(?:\\\\.[^"\\\\]*)*"'
              300  STORE_NAME               Double

 L.  78       302  LOAD_STR                 "[^'\\\\]*(?:(?:\\\\.|'(?!''))[^'\\\\]*)*'''"
              304  STORE_NAME               Single3

 L.  80       306  LOAD_STR                 '[^"\\\\]*(?:(?:\\\\.|"(?!""))[^"\\\\]*)*"""'
              308  STORE_NAME               Double3

 L.  81       310  LOAD_STR                 '(?:[uUrRbBfF]|[rR][fFbB]|[fFbBuU][rR])?'
              312  STORE_NAME               _litprefix

 L.  82       314  LOAD_NAME                group
              316  LOAD_NAME                _litprefix
              318  LOAD_STR                 "'''"
              320  BINARY_ADD       
              322  LOAD_NAME                _litprefix
              324  LOAD_STR                 '"""'
              326  BINARY_ADD       
              328  CALL_FUNCTION_2       2  ''
              330  STORE_NAME               Triple

 L.  84       332  LOAD_NAME                group
              334  LOAD_NAME                _litprefix
              336  LOAD_STR                 "'[^\\n'\\\\]*(?:\\\\.[^\\n'\\\\]*)*'"
              338  BINARY_ADD       

 L.  85       340  LOAD_NAME                _litprefix
              342  LOAD_STR                 '"[^\\n"\\\\]*(?:\\\\.[^\\n"\\\\]*)*"'
              344  BINARY_ADD       

 L.  84       346  CALL_FUNCTION_2       2  ''
              348  STORE_NAME               String

 L.  90       350  LOAD_NAME                group
              352  LOAD_STR                 '\\*\\*=?'
              354  LOAD_STR                 '>>=?'
              356  LOAD_STR                 '<<=?'
              358  LOAD_STR                 '<>'
              360  LOAD_STR                 '!='

 L.  91       362  LOAD_STR                 '//=?'
              364  LOAD_STR                 '->'

 L.  92       366  LOAD_STR                 '[+\\-*/%&@|^=<>]=?'

 L.  93       368  LOAD_STR                 '~'

 L.  90       370  CALL_FUNCTION_9       9  ''
              372  STORE_NAME               Operator

 L.  95       374  LOAD_STR                 '[][(){}]'
              376  STORE_NAME               Bracket

 L.  96       378  LOAD_NAME                group
              380  LOAD_STR                 '\\r?\\n'
              382  LOAD_STR                 ':='
              384  LOAD_STR                 '[:;.,`@]'
              386  CALL_FUNCTION_3       3  ''
              388  STORE_NAME               Special

 L.  97       390  LOAD_NAME                group
              392  LOAD_NAME                Operator
              394  LOAD_NAME                Bracket
              396  LOAD_NAME                Special
              398  CALL_FUNCTION_3       3  ''
              400  STORE_NAME               Funny

 L.  99       402  LOAD_NAME                group
              404  LOAD_NAME                Number
              406  LOAD_NAME                Funny
              408  LOAD_NAME                String
              410  LOAD_NAME                Name
              412  CALL_FUNCTION_4       4  ''
              414  STORE_NAME               PlainToken

 L. 100       416  LOAD_NAME                Ignore
              418  LOAD_NAME                PlainToken
              420  BINARY_ADD       
              422  STORE_NAME               Token

 L. 103       424  LOAD_NAME                group
              426  LOAD_NAME                _litprefix
              428  LOAD_STR                 "'[^\\n'\\\\]*(?:\\\\.[^\\n'\\\\]*)*"
              430  BINARY_ADD       

 L. 104       432  LOAD_NAME                group
              434  LOAD_STR                 "'"
              436  LOAD_STR                 '\\\\\\r?\\n'
              438  CALL_FUNCTION_2       2  ''

 L. 103       440  BINARY_ADD       

 L. 105       442  LOAD_NAME                _litprefix
              444  LOAD_STR                 '"[^\\n"\\\\]*(?:\\\\.[^\\n"\\\\]*)*'
              446  BINARY_ADD       

 L. 106       448  LOAD_NAME                group
              450  LOAD_STR                 '"'
              452  LOAD_STR                 '\\\\\\r?\\n'
              454  CALL_FUNCTION_2       2  ''

 L. 105       456  BINARY_ADD       

 L. 103       458  CALL_FUNCTION_2       2  ''
              460  STORE_NAME               ContStr

 L. 107       462  LOAD_NAME                group
              464  LOAD_STR                 '\\\\\\r?\\n'
              466  LOAD_NAME                Comment
              468  LOAD_NAME                Triple
              470  CALL_FUNCTION_3       3  ''
              472  STORE_NAME               PseudoExtras

 L. 108       474  LOAD_NAME                Whitespace
              476  LOAD_NAME                group
              478  LOAD_NAME                PseudoExtras
              480  LOAD_NAME                Number
              482  LOAD_NAME                Funny
              484  LOAD_NAME                ContStr
              486  LOAD_NAME                Name
              488  CALL_FUNCTION_5       5  ''
              490  BINARY_ADD       
              492  STORE_NAME               PseudoToken

 L. 110       494  LOAD_NAME                map

 L. 111       496  LOAD_NAME                re
              498  LOAD_ATTR                compile
              500  LOAD_NAME                Token
              502  LOAD_NAME                PseudoToken
              504  LOAD_NAME                Single3
              506  LOAD_NAME                Double3
              508  BUILD_TUPLE_4         4 

 L. 110       510  CALL_FUNCTION_2       2  ''
              512  UNPACK_SEQUENCE_4     4 
              514  STORE_NAME               tokenprog
              516  STORE_NAME               pseudoprog
              518  STORE_NAME               single3prog
              520  STORE_NAME               double3prog

 L. 114       522  LOAD_NAME                _combinations
              524  LOAD_STR                 'r'
              526  LOAD_STR                 'R'
              528  LOAD_STR                 'f'
              530  LOAD_STR                 'F'
              532  CALL_FUNCTION_4       4  ''

 L. 115       534  LOAD_NAME                _combinations
              536  LOAD_STR                 'r'
              538  LOAD_STR                 'R'
              540  LOAD_STR                 'b'
              542  LOAD_STR                 'B'
              544  CALL_FUNCTION_4       4  ''

 L. 114       546  BINARY_OR        

 L. 116       548  BUILD_SET_0           0 
              550  LOAD_CONST               frozenset({'Ur', 'U', 'uR', 'UR', 'ur', 'u'})
              552  POP_FINALLY           1  ''

 L. 114       554  BINARY_OR        

 L. 113       556  STORE_NAME               _strprefixes

 L. 119       558  LOAD_NAME                re
              560  LOAD_METHOD              compile
              562  LOAD_NAME                Single
              564  CALL_METHOD_1         1  ''
              566  LOAD_NAME                re
              568  LOAD_METHOD              compile
              570  LOAD_NAME                Double
              572  CALL_METHOD_1         1  ''

 L. 120       574  LOAD_NAME                single3prog
              576  LOAD_NAME                double3prog

 L. 119       578  LOAD_CONST               ("'", '"', "'''", '"""')
              580  BUILD_CONST_KEY_MAP_4     4 

 L. 121       582  LOAD_DICTCOMP            '<code_object <dictcomp>>'
              584  LOAD_STR                 '<dictcomp>'
              586  MAKE_FUNCTION_0          'Neither defaults, keyword-only args, annotations, nor closures'
              588  LOAD_NAME                _strprefixes
              590  GET_ITER         
              592  CALL_FUNCTION_1       1  ''

 L. 119       594  <165>                 1  ''

 L. 122       596  LOAD_DICTCOMP            '<code_object <dictcomp>>'
              598  LOAD_STR                 '<dictcomp>'
              600  MAKE_FUNCTION_0          'Neither defaults, keyword-only args, annotations, nor closures'
              602  LOAD_NAME                _strprefixes
              604  GET_ITER         
              606  CALL_FUNCTION_1       1  ''

 L. 119       608  <165>                 1  ''

 L. 123       610  LOAD_DICTCOMP            '<code_object <dictcomp>>'
              612  LOAD_STR                 '<dictcomp>'
              614  MAKE_FUNCTION_0          'Neither defaults, keyword-only args, annotations, nor closures'
              616  LOAD_NAME                _strprefixes
              618  GET_ITER         
              620  CALL_FUNCTION_1       1  ''

 L. 119       622  <165>                 1  ''
              624  STORE_NAME               endprogs

 L. 126       626  LOAD_STR                 "'''"
              628  LOAD_STR                 '"""'
              630  BUILD_SET_2           2 

 L. 127       632  LOAD_SETCOMP             '<code_object <setcomp>>'
              634  LOAD_STR                 '<setcomp>'
              636  MAKE_FUNCTION_0          'Neither defaults, keyword-only args, annotations, nor closures'
              638  LOAD_NAME                _strprefixes
              640  GET_ITER         
              642  CALL_FUNCTION_1       1  ''

 L. 126       644  BINARY_OR        

 L. 128       646  LOAD_SETCOMP             '<code_object <setcomp>>'
              648  LOAD_STR                 '<setcomp>'
              650  MAKE_FUNCTION_0          'Neither defaults, keyword-only args, annotations, nor closures'
              652  LOAD_NAME                _strprefixes
              654  GET_ITER         
              656  CALL_FUNCTION_1       1  ''

 L. 126       658  BINARY_OR        

 L. 125       660  STORE_NAME               triple_quoted

 L. 131       662  LOAD_STR                 "'"
              664  LOAD_STR                 '"'
              666  BUILD_SET_2           2 

 L. 132       668  LOAD_SETCOMP             '<code_object <setcomp>>'
              670  LOAD_STR                 '<setcomp>'
              672  MAKE_FUNCTION_0          'Neither defaults, keyword-only args, annotations, nor closures'
              674  LOAD_NAME                _strprefixes
              676  GET_ITER         
              678  CALL_FUNCTION_1       1  ''

 L. 131       680  BINARY_OR        

 L. 133       682  LOAD_SETCOMP             '<code_object <setcomp>>'
              684  LOAD_STR                 '<setcomp>'
              686  MAKE_FUNCTION_0          'Neither defaults, keyword-only args, annotations, nor closures'
              688  LOAD_NAME                _strprefixes
              690  GET_ITER         
              692  CALL_FUNCTION_1       1  ''

 L. 131       694  BINARY_OR        

 L. 130       696  STORE_NAME               single_quoted

 L. 136       698  LOAD_CONST               8
              700  STORE_NAME               tabsize

 L. 138       702  LOAD_BUILD_CLASS 
              704  LOAD_CODE                <code_object TokenError>
              706  LOAD_STR                 'TokenError'
              708  MAKE_FUNCTION_0          'Neither defaults, keyword-only args, annotations, nor closures'
              710  LOAD_STR                 'TokenError'
              712  LOAD_NAME                Exception
              714  CALL_FUNCTION_3       3  ''
              716  STORE_NAME               TokenError

 L. 140       718  LOAD_BUILD_CLASS 
              720  LOAD_CODE                <code_object StopTokenizing>
              722  LOAD_STR                 'StopTokenizing'
              724  MAKE_FUNCTION_0          'Neither defaults, keyword-only args, annotations, nor closures'
              726  LOAD_STR                 'StopTokenizing'
              728  LOAD_NAME                Exception
              730  CALL_FUNCTION_3       3  ''
              732  STORE_NAME               StopTokenizing

 L. 142       734  LOAD_CODE                <code_object printtoken>
              736  LOAD_STR                 'printtoken'
              738  MAKE_FUNCTION_0          'Neither defaults, keyword-only args, annotations, nor closures'
              740  STORE_NAME               printtoken

 L. 148       742  LOAD_NAME                printtoken
              744  BUILD_TUPLE_1         1 
              746  LOAD_CODE                <code_object tokenize>
              748  LOAD_STR                 'tokenize'
              750  MAKE_FUNCTION_1          'default'
              752  STORE_NAME               tokenize

 L. 167       754  LOAD_CODE                <code_object tokenize_loop>
              756  LOAD_STR                 'tokenize_loop'
              758  MAKE_FUNCTION_0          'Neither defaults, keyword-only args, annotations, nor closures'
              760  STORE_NAME               tokenize_loop

 L. 171       762  LOAD_BUILD_CLASS 
              764  LOAD_CODE                <code_object Untokenizer>
              766  LOAD_STR                 'Untokenizer'
              768  MAKE_FUNCTION_0          'Neither defaults, keyword-only args, annotations, nor closures'
              770  LOAD_STR                 'Untokenizer'
              772  CALL_FUNCTION_2       2  ''
              774  STORE_NAME               Untokenizer

 L. 227       776  LOAD_NAME                re
              778  LOAD_METHOD              compile
              780  LOAD_STR                 '^[ \\t\\f]*#.*?coding[:=][ \\t]*([-\\w.]+)'
              782  LOAD_NAME                re
              784  LOAD_ATTR                ASCII
              786  CALL_METHOD_2         2  ''
              788  STORE_NAME               cookie_re

 L. 228       790  LOAD_NAME                re
              792  LOAD_METHOD              compile
              794  LOAD_CONST               b'^[ \\t\\f]*(?:[#\\r\\n]|$)'
              796  LOAD_NAME                re
              798  LOAD_ATTR                ASCII
              800  CALL_METHOD_2         2  ''
              802  STORE_NAME               blank_re

 L. 230       804  LOAD_CODE                <code_object _get_normal_name>
              806  LOAD_STR                 '_get_normal_name'
              808  MAKE_FUNCTION_0          'Neither defaults, keyword-only args, annotations, nor closures'
              810  STORE_NAME               _get_normal_name

 L. 241       812  LOAD_CODE                <code_object detect_encoding>
              814  LOAD_STR                 'detect_encoding'
              816  MAKE_FUNCTION_0          'Neither defaults, keyword-only args, annotations, nor closures'
              818  STORE_NAME               detect_encoding

 L. 314       820  LOAD_CODE                <code_object untokenize>
              822  LOAD_STR                 'untokenize'
              824  MAKE_FUNCTION_0          'Neither defaults, keyword-only args, annotations, nor closures'
              826  STORE_NAME               untokenize

 L. 335       828  LOAD_CODE                <code_object generate_tokens>
              830  LOAD_STR                 'generate_tokens'
              832  MAKE_FUNCTION_0          'Neither defaults, keyword-only args, annotations, nor closures'
              834  STORE_NAME               generate_tokens

 L. 560       836  LOAD_NAME                __name__
              838  LOAD_STR                 '__main__'
              840  COMPARE_OP               ==
          842_844  POP_JUMP_IF_FALSE   904  'to 904'

 L. 561       846  LOAD_CONST               0
              848  LOAD_CONST               None
              850  IMPORT_NAME              sys
              852  STORE_NAME               sys

 L. 562       854  LOAD_NAME                len
              856  LOAD_NAME                sys
              858  LOAD_ATTR                argv
              860  CALL_FUNCTION_1       1  ''
              862  LOAD_CONST               1
              864  COMPARE_OP               >
          866_868  POP_JUMP_IF_FALSE   892  'to 892'
              870  LOAD_NAME                tokenize
              872  LOAD_NAME                open
              874  LOAD_NAME                sys
              876  LOAD_ATTR                argv
              878  LOAD_CONST               1
              880  BINARY_SUBSCR    
              882  CALL_FUNCTION_1       1  ''
              884  LOAD_ATTR                readline
              886  CALL_FUNCTION_1       1  ''
              888  POP_TOP          
              890  JUMP_FORWARD        904  'to 904'
            892_0  COME_FROM           866  '866'

 L. 563       892  LOAD_NAME                tokenize
              894  LOAD_NAME                sys
              896  LOAD_ATTR                stdin
              898  LOAD_ATTR                readline
              900  CALL_FUNCTION_1       1  ''
              902  POP_TOP          
            904_0  COME_FROM           890  '890'
            904_1  COME_FROM           842  '842'

Parse error at or near `CALL_FINALLY' instruction at offset 84

Instruction context:
   
 L.  37        64  LOAD_LISTCOMP            '<code_object <listcomp>>'
                  66  LOAD_STR                 '<listcomp>'
                  68  MAKE_FUNCTION_0          'Neither defaults, keyword-only args, annotations, nor closures'
                  70  LOAD_NAME                dir
                  72  LOAD_NAME                token
                  74  CALL_FUNCTION_1       1  ''
                  76  GET_ITER         
                  78  CALL_FUNCTION_1       1  ''
                  80  BUILD_LIST_0          0 
                  82  LOAD_CONST               ('tokenize', 'generate_tokens', 'untokenize')
->                84  CALL_FINALLY         87  'to 87'
                  86  BINARY_ADD       
                  88  STORE_NAME               __all__

test/103582.pyc -- 
# decompile failed
