# uncompyle6 version 3.7.4
# Python bytecode 3.8 (3413)
# Decompiled from: Python 3.6.15 (default, Sep 28 2021, 20:18:52) 
# [GCC 10.2.1 20210110]
# Embedded file name: numpy\f2py\rules.py
"""

Rules for building C/API module with f2py2e.

Here is a skeleton of a new wrapper function (13Dec2001):

wrapper_function(args)
  declarations
  get_python_arguments, say, `a' and `b'

  get_a_from_python
  if (successful) {

    get_b_from_python
    if (successful) {

      callfortran
      if (successful) {

        put_a_to_python
        if (successful) {

          put_b_to_python
          if (successful) {

            buildvalue = ...

          }

        }

      }

    }
    cleanup_b

  }
  cleanup_a

  return buildvalue

Copyright 1999,2000 Pearu Peterson all rights reserved,
Pearu Peterson <pearu@ioc.ee>
Permission to use, modify, and distribute this software is given under the
terms of the NumPy License.

NO WARRANTY IS EXPRESSED OR IMPLIED.  USE AT YOUR OWN RISK.
$Date: 2005/08/30 08:58:42 $
Pearu Peterson

"""
__version__ = '$Revision: 1.129 $'[10:-1]
from . import __version__
f2py_version = __version__.version
import os, time, copy
from .auxfuncs import applyrules, debugcapi, dictappend, errmess, gentitle, getargs2, hascallstatement, hasexternals, hasinitvalue, hasnote, hasresultnote, isarray, isarrayofstrings, iscomplex, iscomplexarray, iscomplexfunction, iscomplexfunction_warn, isdummyroutine, isexternal, isfunction, isfunction_wrap, isint1array, isintent_aux, isintent_c, isintent_callback, isintent_copy, isintent_hide, isintent_inout, isintent_nothide, isintent_out, isintent_overwrite, islogical, islong_complex, islong_double, islong_doublefunction, islong_long, islong_longfunction, ismoduleroutine, isoptional, isrequired, isscalar, issigned_long_longarray, isstring, isstringarray, isstringfunction, issubroutine, issubroutine_wrap, isthreadsafe, isunsigned, isunsigned_char, isunsigned_chararray, isunsigned_long_long, isunsigned_long_longarray, isunsigned_short, isunsigned_shortarray, l_and, l_not, l_or, outmess, replace, stripcomma
from . import capi_maps
from . import cfuncs
from . import common_rules
from . import use_rules
from . import f90mod_rules
from . import func2subr
options = {}
sepdict = {}
for k in ('decl', 'frompyobj', 'cleanupfrompyobj', 'topyarr', 'method', 'pyobjfrom',
          'closepyobjfrom', 'freemem', 'userincludes', 'includes0', 'includes', 'typedefs',
          'typedefs_generated', 'cppmacros', 'cfuncs', 'callbacks', 'latexdoc', 'restdoc',
          'routine_defs', 'externroutines', 'initf2pywraphooks', 'commonhooks', 'initcommonhooks',
          'f90modhooks', 'initf90modhooks'):
    sepdict[k] = '\n'
else:
    generationtime = int(os.environ.get('SOURCE_DATE_EPOCH', time.time()))
    module_rules = {'modulebody':'/* File: #modulename#module.c\n * This file is auto-generated with f2py (version:#f2py_version#).\n * f2py is a Fortran to Python Interface Generator (FPIG), Second Edition,\n * written by Pearu Peterson <pearu@cens.ioc.ee>.\n * Generation date: ' + time.asctime(time.gmtime(generationtime)) + '\n * Do not edit this file directly unless you know what you are doing!!!\n */\n\n#ifdef __cplusplus\nextern "C" {\n#endif\n\n' + gentitle('See f2py2e/cfuncs.py: includes') + '\n#includes#\n#includes0#\n\n' + gentitle("See f2py2e/rules.py: mod_rules['modulebody']") + '\nstatic PyObject *#modulename#_error;\nstatic PyObject *#modulename#_module;\n\n' + gentitle('See f2py2e/cfuncs.py: typedefs') + '\n#typedefs#\n\n' + gentitle('See f2py2e/cfuncs.py: typedefs_generated') + '\n#typedefs_generated#\n\n' + gentitle('See f2py2e/cfuncs.py: cppmacros') + '\n#cppmacros#\n\n' + gentitle('See f2py2e/cfuncs.py: cfuncs') + '\n#cfuncs#\n\n' + gentitle('See f2py2e/cfuncs.py: userincludes') + '\n#userincludes#\n\n' + gentitle('See f2py2e/capi_rules.py: usercode') + '\n#usercode#\n\n/* See f2py2e/rules.py */\n#externroutines#\n\n' + gentitle('See f2py2e/capi_rules.py: usercode1') + '\n#usercode1#\n\n' + gentitle('See f2py2e/cb_rules.py: buildcallback') + '\n#callbacks#\n\n' + gentitle('See f2py2e/rules.py: buildapi') + '\n#body#\n\n' + gentitle('See f2py2e/f90mod_rules.py: buildhooks') + '\n#f90modhooks#\n\n' + gentitle("See f2py2e/rules.py: module_rules['modulebody']") + '\n\n' + gentitle('See f2py2e/common_rules.py: buildhooks') + '\n#commonhooks#\n\n' + gentitle('See f2py2e/rules.py') + '\n\nstatic FortranDataDef f2py_routine_defs[] = {\n#routine_defs#\n\t{NULL}\n};\n\nstatic PyMethodDef f2py_module_methods[] = {\n#pymethoddef#\n\t{NULL,NULL}\n};\n\nstatic struct PyModuleDef moduledef = {\n\tPyModuleDef_HEAD_INIT,\n\t"#modulename#",\n\tNULL,\n\t-1,\n\tf2py_module_methods,\n\tNULL,\n\tNULL,\n\tNULL,\n\tNULL\n};\n\nPyMODINIT_FUNC PyInit_#modulename#(void) {\n\tint i;\n\tPyObject *m,*d, *s, *tmp;\n\tm = #modulename#_module = PyModule_Create(&moduledef);\n\tPy_SET_TYPE(&PyFortran_Type, &PyType_Type);\n\timport_array();\n\tif (PyErr_Occurred())\n\t\t{PyErr_SetString(PyExc_ImportError, "can\'t initialize module #modulename# (failed to import numpy)"); return m;}\n\td = PyModule_GetDict(m);\n\ts = PyString_FromString("$R' + 'evision: $");\n\tPyDict_SetItemString(d, "__version__", s);\n\tPy_DECREF(s);\n\ts = PyUnicode_FromString(\n\t\t"This module \'#modulename#\' is auto-generated with f2py (version:#f2py_version#).\\nFunctions:\\n"\n#docs#".");\n\tPyDict_SetItemString(d, "__doc__", s);\n\tPy_DECREF(s);\n\t#modulename#_error = PyErr_NewException ("#modulename#.error", NULL, NULL);\n\t/*\n\t * Store the error object inside the dict, so that it could get deallocated.\n\t * (in practice, this is a module, so it likely will not and cannot.)\n\t */\n\tPyDict_SetItemString(d, "_#modulename#_error", #modulename#_error);\n\tPy_DECREF(#modulename#_error);\n\tfor(i=0;f2py_routine_defs[i].name!=NULL;i++) {\n\t\ttmp = PyFortranObject_NewAsAttr(&f2py_routine_defs[i]);\n\t\tPyDict_SetItemString(d, f2py_routine_defs[i].name, tmp);\n\t\tPy_DECREF(tmp);\n\t}\n#initf2pywraphooks#\n#initf90modhooks#\n#initcommonhooks#\n#interface_usercode#\n\n#ifdef F2PY_REPORT_ATEXIT\n\tif (! PyErr_Occurred())\n\t\ton_exit(f2py_report_on_exit,(void*)"#modulename#");\n#endif\n\treturn m;\n}\n#ifdef __cplusplus\n}\n#endif\n', 
     'separatorsfor':{'latexdoc':'\n\n', 
      'restdoc':'\n\n'}, 
     'latexdoc':[
      '\\section{Module \\texttt{#texmodulename#}}\n',
      '#modnote#\n',
      '#latexdoc#'], 
     'restdoc':[
      'Module #modulename#\n================================================================================',
      '\n#restdoc#']}
    defmod_rules = [
     {'body':'/*eof body*/', 
      'method':'/*eof method*/', 
      'externroutines':'/*eof externroutines*/', 
      'routine_defs':'/*eof routine_defs*/', 
      'initf90modhooks':'/*eof initf90modhooks*/', 
      'initf2pywraphooks':'/*eof initf2pywraphooks*/', 
      'initcommonhooks':'/*eof initcommonhooks*/', 
      'latexdoc':'', 
      'restdoc':'', 
      'modnote':{hasnote: '#note#', l_not(hasnote): ''}}]
    routine_rules = {'separatorsfor':sepdict, 
     'body':'\n#begintitle#\nstatic char doc_#apiname#[] = "\\\n#docreturn##name#(#docsignatureshort#)\\n\\nWrapper for ``#name#``.\\\n\\n#docstrsigns#";\n/* #declfortranroutine# */\nstatic PyObject *#apiname#(const PyObject *capi_self,\n                           PyObject *capi_args,\n                           PyObject *capi_keywds,\n                           #functype# (*f2py_func)(#callprotoargument#)) {\n\tPyObject * volatile capi_buildvalue = NULL;\n\tvolatile int f2py_success = 1;\n#decl#\n\tstatic char *capi_kwlist[] = {#kwlist##kwlistopt##kwlistxa#NULL};\n#usercode#\n#routdebugenter#\n#ifdef F2PY_REPORT_ATEXIT\nf2py_start_clock();\n#endif\n\tif (!PyArg_ParseTupleAndKeywords(capi_args,capi_keywds,\\\n\t\t"#argformat#|#keyformat##xaformat#:#pyname#",\\\n\t\tcapi_kwlist#args_capi##keys_capi##keys_xa#))\n\t\treturn NULL;\n#frompyobj#\n/*end of frompyobj*/\n#ifdef F2PY_REPORT_ATEXIT\nf2py_start_call_clock();\n#endif\n#callfortranroutine#\nif (PyErr_Occurred())\n  f2py_success = 0;\n#ifdef F2PY_REPORT_ATEXIT\nf2py_stop_call_clock();\n#endif\n/*end of callfortranroutine*/\n\t\tif (f2py_success) {\n#pyobjfrom#\n/*end of pyobjfrom*/\n\t\tCFUNCSMESS("Building return value.\\n");\n\t\tcapi_buildvalue = Py_BuildValue("#returnformat#"#return#);\n/*closepyobjfrom*/\n#closepyobjfrom#\n\t\t} /*if (f2py_success) after callfortranroutine*/\n/*cleanupfrompyobj*/\n#cleanupfrompyobj#\n\tif (capi_buildvalue == NULL) {\n#routdebugfailure#\n\t} else {\n#routdebugleave#\n\t}\n\tCFUNCSMESS("Freeing memory.\\n");\n#freemem#\n#ifdef F2PY_REPORT_ATEXIT\nf2py_stop_clock();\n#endif\n\treturn capi_buildvalue;\n}\n#endtitle#\n', 
     'routine_defs':'#routine_def#', 
     'initf2pywraphooks':'#initf2pywraphook#', 
     'externroutines':'#declfortranroutine#', 
     'doc':'#docreturn##name#(#docsignature#)', 
     'docshort':'#docreturn##name#(#docsignatureshort#)', 
     'docs':'"\t#docreturn##name#(#docsignature#)\\n"\n', 
     'need':[
      'arrayobject.h', 'CFUNCSMESS', 'MINMAX'], 
     'cppmacros':{debugcapi: '#define DEBUGCFUNCS'}, 
     'latexdoc':[
      '\\subsection{Wrapper function \\texttt{#texname#}}\n',
      '\n\\noindent{{}\\verb@#docreturn##name#@{}}\\texttt{(#latexdocsignatureshort#)}\n#routnote#\n\n#latexdocstrsigns#\n'], 
     'restdoc':[
      'Wrapped function ``#name#``\n--------------------------------------------------------------------------------']}
    rout_rules = [
     {'separatorsfor':{'callfortranroutine':'\n', 
       'routdebugenter':'\n',  'decl':'\n',  'routdebugleave':'\n', 
       'routdebugfailure':'\n',  'setjmpbuf':' || ', 
       'docstrreq':'\n', 
       'docstropt':'\n',  'docstrout':'\n',  'docstrcbs':'\n', 
       'docstrsigns':'\\n"\n"',  'latexdocstrsigns':'\n', 
       'latexdocstrreq':'\n', 
       'latexdocstropt':'\n',  'latexdocstrout':'\n', 
       'latexdocstrcbs':'\n'}, 
      'kwlist':'', 
      'kwlistopt':'',  'callfortran':'',  'callfortranappend':'',  'docsign':'', 
      'docsignopt':'',  'decl':'/*decl*/',  'freemem':'/*freemem*/', 
      'docsignshort':'', 
      'docsignoptshort':'',  'docstrsigns':'', 
      'latexdocstrsigns':'',  'docstrreq':'\\nParameters\\n----------', 
      'docstropt':'\\nOther Parameters\\n----------------', 
      'docstrout':'\\nReturns\\n-------', 
      'docstrcbs':'\\nNotes\\n-----\\nCall-back functions::\\n', 
      'latexdocstrreq':'\\noindent Required arguments:', 
      'latexdocstropt':'\\noindent Optional arguments:', 
      'latexdocstrout':'\\noindent Return objects:', 
      'latexdocstrcbs':'\\noindent Call-back functions:', 
      'args_capi':'', 
      'keys_capi':'',  'functype':'',  'frompyobj':'/*frompyobj*/', 
      'cleanupfrompyobj':[
       '/*end of cleanupfrompyobj*/'], 
      'pyobjfrom':'/*pyobjfrom*/', 
      'closepyobjfrom':[
       '/*end of closepyobjfrom*/'], 
      'topyarr':'/*topyarr*/', 
      'routdebugleave':'/*routdebugleave*/',  'routdebugenter':'/*routdebugenter*/', 
      'routdebugfailure':'/*routdebugfailure*/', 
      'callfortranroutine':'/*callfortranroutine*/', 
      'argformat':'', 
      'keyformat':'',  'need_cfuncs':'',  'docreturn':'', 
      'return':'',  'returnformat':'',  'rformat':'',  'kwlistxa':'', 
      'keys_xa':'',  'xaformat':'',  'docsignxa':'',  'docsignxashort':'',  'initf2pywraphook':'', 
      'routnote':{hasnote: '--- #note#', l_not(hasnote): ''}},
     {'apiname':'f2py_rout_#modulename#_#name#', 
      'pyname':'#modulename#.#name#', 
      'decl':'', 
      '_check':l_not(ismoduleroutine)},
     {'apiname':'f2py_rout_#modulename#_#f90modulename#_#name#', 
      'pyname':'#modulename#.#f90modulename#.#name#', 
      'decl':'', 
      '_check':ismoduleroutine},
     {'functype':'void', 
      'declfortranroutine':{l_and(l_not(l_or(ismoduleroutine, isintent_c)), l_not(isdummyroutine)): 'extern void #F_FUNC#(#fortranname#,#FORTRANNAME#)(#callprotoargument#);', 
       l_and(l_not(ismoduleroutine), isintent_c, l_not(isdummyroutine)): 'extern void #fortranname#(#callprotoargument#);', 
       ismoduleroutine: '', 
       isdummyroutine: ''}, 
      'routine_def':{l_not(l_or(ismoduleroutine, isintent_c, isdummyroutine)): '\t{"#name#",-1,{{-1}},0,(char *)#F_FUNC#(#fortranname#,#FORTRANNAME#),(f2py_init_func)#apiname#,doc_#apiname#},', 
       l_and(l_not(ismoduleroutine), isintent_c, l_not(isdummyroutine)): '\t{"#name#",-1,{{-1}},0,(char *)#fortranname#,(f2py_init_func)#apiname#,doc_#apiname#},', 
       l_and(l_not(ismoduleroutine), isdummyroutine): '\t{"#name#",-1,{{-1}},0,NULL,(f2py_init_func)#apiname#,doc_#apiname#},'}, 
      'need':{l_and(l_not(l_or(ismoduleroutine, isintent_c)), l_not(isdummyroutine)): 'F_FUNC'}, 
      'callfortranroutine':[
       {debugcapi: [
                    '\tfprintf(stderr,"debug-capi:Fortran subroutine `#fortranname#(#callfortran#)\'\\n");']},
       {hasexternals: '\t\tif (#setjmpbuf#) {\n\t\t\tf2py_success = 0;\n\t\t} else {'},
       {isthreadsafe: '\t\t\tPy_BEGIN_ALLOW_THREADS'},
       {hascallstatement: '\t\t\t\t#callstatement#;\n\t\t\t\t/*(*f2py_func)(#callfortran#);*/'},
       {l_not(l_or(hascallstatement, isdummyroutine)): '\t\t\t\t(*f2py_func)(#callfortran#);'},
       {isthreadsafe: '\t\t\tPy_END_ALLOW_THREADS'},
       {hasexternals: '\t\t}'}], 
      '_check':l_and(issubroutine, l_not(issubroutine_wrap))},
     {'functype':'void', 
      'declfortranroutine':{l_not(l_or(ismoduleroutine, isdummyroutine)): 'extern void #F_WRAPPEDFUNC#(#name_lower#,#NAME#)(#callprotoargument#);', 
       isdummyroutine: ''}, 
      'routine_def':{l_not(l_or(ismoduleroutine, isdummyroutine)): '\t{"#name#",-1,{{-1}},0,(char *)#F_WRAPPEDFUNC#(#name_lower#,#NAME#),(f2py_init_func)#apiname#,doc_#apiname#},', 
       isdummyroutine: '\t{"#name#",-1,{{-1}},0,NULL,(f2py_init_func)#apiname#,doc_#apiname#},'}, 
      'initf2pywraphook':{l_not(l_or(ismoduleroutine, isdummyroutine)): '\n    {\n      extern #ctype# #F_FUNC#(#name_lower#,#NAME#)(void);\n      PyObject* o = PyDict_GetItemString(d,"#name#");\n      tmp = F2PyCapsule_FromVoidPtr((void*)#F_FUNC#(#name_lower#,#NAME#),NULL);\n      PyObject_SetAttrString(o,"_cpointer", tmp);\n      Py_DECREF(tmp);\n      s = PyUnicode_FromString("#name#");\n      PyObject_SetAttrString(o,"__name__", s);\n      Py_DECREF(s);\n    }\n    '}, 
      'need':{l_not(l_or(ismoduleroutine, isdummyroutine)): ['F_WRAPPEDFUNC', 'F_FUNC']}, 
      'callfortranroutine':[
       {debugcapi: [
                    '\tfprintf(stderr,"debug-capi:Fortran subroutine `f2pywrap#name_lower#(#callfortran#)\'\\n");']},
       {hasexternals: '\tif (#setjmpbuf#) {\n\t\tf2py_success = 0;\n\t} else {'},
       {isthreadsafe: '\tPy_BEGIN_ALLOW_THREADS'},
       {l_not(l_or(hascallstatement, isdummyroutine)): '\t(*f2py_func)(#callfortran#);'},
       {hascallstatement: '\t#callstatement#;\n\t/*(*f2py_func)(#callfortran#);*/'},
       {isthreadsafe: '\tPy_END_ALLOW_THREADS'},
       {hasexternals: '\t}'}], 
      '_check':isfunction_wrap},
     {'functype':'void', 
      'declfortranroutine':{l_not(l_or(ismoduleroutine, isdummyroutine)): 'extern void #F_WRAPPEDFUNC#(#name_lower#,#NAME#)(#callprotoargument#);', 
       isdummyroutine: ''}, 
      'routine_def':{l_not(l_or(ismoduleroutine, isdummyroutine)): '\t{"#name#",-1,{{-1}},0,(char *)#F_WRAPPEDFUNC#(#name_lower#,#NAME#),(f2py_init_func)#apiname#,doc_#apiname#},', 
       isdummyroutine: '\t{"#name#",-1,{{-1}},0,NULL,(f2py_init_func)#apiname#,doc_#apiname#},'}, 
      'initf2pywraphook':{l_not(l_or(ismoduleroutine, isdummyroutine)): '\n    {\n      extern void #F_FUNC#(#name_lower#,#NAME#)(void);\n      PyObject* o = PyDict_GetItemString(d,"#name#");\n      tmp = F2PyCapsule_FromVoidPtr((void*)#F_FUNC#(#name_lower#,#NAME#),NULL);\n      PyObject_SetAttrString(o,"_cpointer", tmp);\n      Py_DECREF(tmp);\n      s = PyUnicode_FromString("#name#");\n      PyObject_SetAttrString(o,"__name__", s);\n      Py_DECREF(s);\n    }\n    '}, 
      'need':{l_not(l_or(ismoduleroutine, isdummyroutine)): ['F_WRAPPEDFUNC', 'F_FUNC']}, 
      'callfortranroutine':[
       {debugcapi: [
                    '\tfprintf(stderr,"debug-capi:Fortran subroutine `f2pywrap#name_lower#(#callfortran#)\'\\n");']},
       {hasexternals: '\tif (#setjmpbuf#) {\n\t\tf2py_success = 0;\n\t} else {'},
       {isthreadsafe: '\tPy_BEGIN_ALLOW_THREADS'},
       {l_not(l_or(hascallstatement, isdummyroutine)): '\t(*f2py_func)(#callfortran#);'},
       {hascallstatement: '\t#callstatement#;\n\t/*(*f2py_func)(#callfortran#);*/'},
       {isthreadsafe: '\tPy_END_ALLOW_THREADS'},
       {hasexternals: '\t}'}], 
      '_check':issubroutine_wrap},
     {'functype':'#ctype#', 
      'docreturn':{l_not(isintent_hide): '#rname#,'}, 
      'docstrout':'#pydocsignout#', 
      'latexdocstrout':[
       '\\item[]{{}\\verb@#pydocsignout#@{}}',
       {hasresultnote: '--- #resultnote#'}], 
      'callfortranroutine':[
       {l_and(debugcapi, isstringfunction): '#ifdef USESCOMPAQFORTRAN\n\tfprintf(stderr,"debug-capi:Fortran function #ctype# #fortranname#(#callcompaqfortran#)\\n");\n#else\n\tfprintf(stderr,"debug-capi:Fortran function #ctype# #fortranname#(#callfortran#)\\n");\n#endif\n'},
       {l_and(debugcapi, l_not(isstringfunction)): '\tfprintf(stderr,"debug-capi:Fortran function #ctype# #fortranname#(#callfortran#)\\n");\n'}], 
      '_check':l_and(isfunction, l_not(isfunction_wrap))},
     {'declfortranroutine':{l_and(l_not(l_or(ismoduleroutine, isintent_c)), l_not(isdummyroutine)): 'extern #ctype# #F_FUNC#(#fortranname#,#FORTRANNAME#)(#callprotoargument#);', 
       l_and(l_not(ismoduleroutine), isintent_c, l_not(isdummyroutine)): 'extern #ctype# #fortranname#(#callprotoargument#);', 
       isdummyroutine: ''}, 
      'routine_def':{l_and(l_not(l_or(ismoduleroutine, isintent_c)), l_not(isdummyroutine)): '\t{"#name#",-1,{{-1}},0,(char *)#F_FUNC#(#fortranname#,#FORTRANNAME#),(f2py_init_func)#apiname#,doc_#apiname#},', 
       l_and(l_not(ismoduleroutine), isintent_c, l_not(isdummyroutine)): '\t{"#name#",-1,{{-1}},0,(char *)#fortranname#,(f2py_init_func)#apiname#,doc_#apiname#},', 
       isdummyroutine: '\t{"#name#",-1,{{-1}},0,NULL,(f2py_init_func)#apiname#,doc_#apiname#},'}, 
      'decl':[
       {iscomplexfunction_warn: '\t#ctype# #name#_return_value={0,0};', 
        l_not(iscomplexfunction): '\t#ctype# #name#_return_value=0;'},
       {iscomplexfunction: '\tPyObject *#name#_return_value_capi = Py_None;'}], 
      'callfortranroutine':[
       {hasexternals: '\tif (#setjmpbuf#) {\n\t\tf2py_success = 0;\n\t} else {'},
       {isthreadsafe: '\tPy_BEGIN_ALLOW_THREADS'},
       {hascallstatement: '\t#callstatement#;\n/*\t#name#_return_value = (*f2py_func)(#callfortran#);*/\n'},
       {l_not(l_or(hascallstatement, isdummyroutine)): '\t#name#_return_value = (*f2py_func)(#callfortran#);'},
       {isthreadsafe: '\tPy_END_ALLOW_THREADS'},
       {hasexternals: '\t}'},
       {l_and(debugcapi, iscomplexfunction): '\tfprintf(stderr,"#routdebugshowvalue#\\n",#name#_return_value.r,#name#_return_value.i);'},
       {l_and(debugcapi, l_not(iscomplexfunction)): '\tfprintf(stderr,"#routdebugshowvalue#\\n",#name#_return_value);'}], 
      'pyobjfrom':{iscomplexfunction: '\t#name#_return_value_capi = pyobj_from_#ctype#1(#name#_return_value);'}, 
      'need':[
       {l_not(isdummyroutine): 'F_FUNC'},
       {iscomplexfunction: 'pyobj_from_#ctype#1'},
       {islong_longfunction: 'long_long'},
       {islong_doublefunction: 'long_double'}], 
      'returnformat':{l_not(isintent_hide): '#rformat#'}, 
      'return':{iscomplexfunction: ',#name#_return_value_capi', 
       l_not(l_or(iscomplexfunction, isintent_hide)): ',#name#_return_value'}, 
      '_check':l_and(isfunction, l_not(isstringfunction), l_not(isfunction_wrap))},
     {'declfortranroutine':'extern void #F_FUNC#(#fortranname#,#FORTRANNAME#)(#callprotoargument#);', 
      'routine_def':{l_not(l_or(ismoduleroutine, isintent_c)): '\t{"#name#",-1,{{-1}},0,(char *)#F_FUNC#(#fortranname#,#FORTRANNAME#),(f2py_init_func)#apiname#,doc_#apiname#},', 
       
       l_and(l_not(ismoduleroutine), isintent_c): '\t{"#name#",-1,{{-1}},0,(char *)#fortranname#,(f2py_init_func)#apiname#,doc_#apiname#},'}, 
      'decl':[
       '\t#ctype# #name#_return_value = NULL;',
       '\tint #name#_return_value_len = 0;'], 
      'callfortran':'#name#_return_value,#name#_return_value_len,', 
      'callfortranroutine':[
       '\t#name#_return_value_len = #rlength#;',
       '\tif ((#name#_return_value = (string)malloc(sizeof(char)*(#name#_return_value_len+1))) == NULL) {',
       '\t\tPyErr_SetString(PyExc_MemoryError, "out of memory");',
       '\t\tf2py_success = 0;',
       '\t} else {',
       "\t\t(#name#_return_value)[#name#_return_value_len] = '\\0';",
       '\t}',
       '\tif (f2py_success) {',
       {hasexternals: '\t\tif (#setjmpbuf#) {\n\t\t\tf2py_success = 0;\n\t\t} else {'},
       {isthreadsafe: '\t\tPy_BEGIN_ALLOW_THREADS'},
       '#ifdef USESCOMPAQFORTRAN\n\t\t(*f2py_func)(#callcompaqfortran#);\n#else\n\t\t(*f2py_func)(#callfortran#);\n#endif\n',
       {isthreadsafe: '\t\tPy_END_ALLOW_THREADS'},
       {hasexternals: '\t\t}'},
       {debugcapi: '\t\tfprintf(stderr,"#routdebugshowvalue#\\n",#name#_return_value_len,#name#_return_value);'},
       '\t} /* if (f2py_success) after (string)malloc */'], 
      'returnformat':'#rformat#', 
      'return':',#name#_return_value', 
      'freemem':'\tSTRINGFREE(#name#_return_value);', 
      'need':[
       'F_FUNC', '#ctype#', 'STRINGFREE'], 
      '_check':l_and(isstringfunction, l_not(isfunction_wrap))},
     {'routdebugenter':'\tfprintf(stderr,"debug-capi:Python C/API function #modulename#.#name#(#docsignature#)\\n");', 
      'routdebugleave':'\tfprintf(stderr,"debug-capi:Python C/API function #modulename#.#name#: successful.\\n");', 
      'routdebugfailure':'\tfprintf(stderr,"debug-capi:Python C/API function #modulename#.#name#: failure.\\n");', 
      '_check':debugcapi}]
    typedef_need_dict = {islong_long: 'long_long', 
     islong_double: 'long_double', 
     islong_complex: 'complex_long_double', 
     isunsigned_char: 'unsigned_char', 
     isunsigned_short: 'unsigned_short', 
     isunsigned: 'unsigned', 
     isunsigned_long_long: 'unsigned_long_long', 
     isunsigned_chararray: 'unsigned_char', 
     isunsigned_shortarray: 'unsigned_short', 
     isunsigned_long_longarray: 'unsigned_long_long', 
     issigned_long_longarray: 'long_long'}
    aux_rules = [
     {'separatorsfor': sepdict},
     {'frompyobj':[
       '\t/* Processing auxiliary variable #varname# */',
       {debugcapi: '\tfprintf(stderr,"#vardebuginfo#\\n");'}], 
      'cleanupfrompyobj':'\t/* End of cleaning variable #varname# */', 
      'need':typedef_need_dict},
     {'decl':'\t#ctype# #varname# = 0;', 
      'need':{hasinitvalue: 'math.h'}, 
      'frompyobj':{hasinitvalue: '\t#varname# = #init#;'}, 
      '_check':l_and(isscalar, l_not(iscomplex))},
     {'return':',#varname#', 
      'docstrout':'#pydocsignout#', 
      'docreturn':'#outvarname#,', 
      'returnformat':'#varrformat#', 
      '_check':l_and(isscalar, l_not(iscomplex), isintent_out)},
     {'decl':'\t#ctype# #varname#;', 
      'frompyobj':{hasinitvalue: '\t#varname#.r = #init.r#, #varname#.i = #init.i#;'}, 
      '_check':iscomplex},
     {'decl':[
       '\t#ctype# #varname# = NULL;',
       '\tint slen(#varname#);'], 
      'need':[
       'len..'], 
      '_check':isstring},
     {'decl':[
       '\t#ctype# *#varname# = NULL;',
       '\tnpy_intp #varname#_Dims[#rank#] = {#rank*[-1]#};',
       '\tconst int #varname#_Rank = #rank#;'], 
      'need':[
       'len..', {hasinitvalue: 'forcomb'}, {hasinitvalue: 'CFUNCSMESS'}], 
      '_check':isarray},
     {'_check': l_and(isarray, l_not(iscomplexarray))},
     {'_check': l_and(isarray, l_not(iscomplexarray), isintent_nothide)},
     {'need':'#ctype#', 
      '_check':isint1array, 
      '_depend':''},
     {'need':'#ctype#', 
      '_check':isunsigned_chararray, 
      '_depend':''},
     {'need':'#ctype#', 
      '_check':isunsigned_shortarray, 
      '_depend':''},
     {'need':'#ctype#', 
      '_check':isunsigned_long_longarray, 
      '_depend':''},
     {'need':'#ctype#', 
      '_check':iscomplexarray, 
      '_depend':''},
     {'callfortranappend':{isarrayofstrings: 'flen(#varname#),'}, 
      'need':'string', 
      '_check':isstringarray}]
    arg_rules = [
     {'separatorsfor': sepdict},
     {'frompyobj':[
       '\t/* Processing variable #varname# */',
       {debugcapi: '\tfprintf(stderr,"#vardebuginfo#\\n");'}], 
      'cleanupfrompyobj':'\t/* End of cleaning variable #varname# */', 
      '_depend':'', 
      'need':typedef_need_dict},
     {'docstropt':{l_and(isoptional, isintent_nothide): '#pydocsign#'}, 
      'docstrreq':{l_and(isrequired, isintent_nothide): '#pydocsign#'}, 
      'docstrout':{isintent_out: '#pydocsignout#'}, 
      'latexdocstropt':{l_and(isoptional, isintent_nothide): ['\\item[]{{}\\verb@#pydocsign#@{}}',
                                             {hasnote: '--- #note#'}]}, 
      'latexdocstrreq':{l_and(isrequired, isintent_nothide): ['\\item[]{{}\\verb@#pydocsign#@{}}',
                                             {hasnote: '--- #note#'}]}, 
      'latexdocstrout':{isintent_out: ['\\item[]{{}\\verb@#pydocsignout#@{}}',
                      {l_and(hasnote, isintent_hide): '--- #note#', 
                       l_and(hasnote, isintent_nothide): '--- See above.'}]}, 
      'depend':''},
     {'kwlist':'"#varname#",', 
      'docsign':'#varname#,', 
      '_check':l_and(isintent_nothide, l_not(isoptional))},
     {'kwlistopt':'"#varname#",', 
      'docsignopt':'#varname#=#showinit#,', 
      'docsignoptshort':'#varname#,', 
      '_check':l_and(isintent_nothide, isoptional)},
     {'docreturn':'#outvarname#,', 
      'returnformat':'#varrformat#', 
      '_check':isintent_out},
     {'docsignxa':{isintent_nothide: '#varname#_extra_args=(),'}, 
      'docsignxashort':{isintent_nothide: '#varname#_extra_args,'}, 
      'docstropt':{isintent_nothide: '#varname#_extra_args : input tuple, optional\\n    Default: ()'}, 
      'docstrcbs':'#cbdocstr#', 
      'latexdocstrcbs':'\\item[] #cblatexdocstr#', 
      'latexdocstropt':{isintent_nothide: '\\item[]{{}\\verb@#varname#_extra_args := () input tuple@{}} --- Extra arguments for call-back function {{}\\verb@#varname#@{}}.'}, 
      'decl':[
       '\tPyObject *#varname#_capi = Py_None;',
       '\tPyTupleObject *#varname#_xa_capi = NULL;',
       '\tPyTupleObject *#varname#_args_capi = NULL;',
       '\tint #varname#_nofargs_capi = 0;',
       {l_not(isintent_callback): '\t#cbname#_typedef #varname#_cptr;'}], 
      'kwlistxa':{isintent_nothide: '"#varname#_extra_args",'}, 
      'argformat':{isrequired: 'O'}, 
      'keyformat':{isoptional: 'O'}, 
      'xaformat':{isintent_nothide: 'O!'}, 
      'args_capi':{isrequired: ',&#varname#_capi'}, 
      'keys_capi':{isoptional: ',&#varname#_capi'}, 
      'keys_xa':',&PyTuple_Type,&#varname#_xa_capi', 
      'setjmpbuf':'(setjmp(#cbname#_jmpbuf))', 
      'callfortran':{l_not(isintent_callback): '#varname#_cptr,'}, 
      'need':[
       '#cbname#', 'setjmp.h'], 
      '_check':isexternal},
     {'frompyobj':[
       {l_not(isintent_callback): 'if(F2PyCapsule_Check(#varname#_capi)) {\n  #varname#_cptr = F2PyCapsule_AsVoidPtr(#varname#_capi);\n} else {\n  #varname#_cptr = #cbname#;\n}\n'},
       {isintent_callback: 'if (#varname#_capi==Py_None) {\n  #varname#_capi = PyObject_GetAttrString(#modulename#_module,"#varname#");\n  if (#varname#_capi) {\n    if (#varname#_xa_capi==NULL) {\n      if (PyObject_HasAttrString(#modulename#_module,"#varname#_extra_args")) {\n        PyObject* capi_tmp = PyObject_GetAttrString(#modulename#_module,"#varname#_extra_args");\n        if (capi_tmp) {\n          #varname#_xa_capi = (PyTupleObject *)PySequence_Tuple(capi_tmp);\n          Py_DECREF(capi_tmp);\n        }\n        else {\n          #varname#_xa_capi = (PyTupleObject *)Py_BuildValue("()");\n        }\n        if (#varname#_xa_capi==NULL) {\n          PyErr_SetString(#modulename#_error,"Failed to convert #modulename#.#varname#_extra_args to tuple.\\n");\n          return NULL;\n        }\n      }\n    }\n  }\n  if (#varname#_capi==NULL) {\n    PyErr_SetString(#modulename#_error,"Callback #varname# not defined (as an argument or module #modulename# attribute).\\n");\n    return NULL;\n  }\n}\n'},
       '\t#varname#_nofargs_capi = #cbname#_nofargs;\n\tif (create_cb_arglist(#varname#_capi,#varname#_xa_capi,#maxnofargs#,#nofoptargs#,&#cbname#_nofargs,&#varname#_args_capi,"failed in processing argument list for call-back #varname#.")) {\n\t\tjmp_buf #varname#_jmpbuf;',
       {debugcapi: ['\t\tfprintf(stderr,"debug-capi:Assuming %d arguments; at most #maxnofargs#(-#nofoptargs#) is expected.\\n",#cbname#_nofargs);\n\t\tCFUNCSMESSPY("for #varname#=",#cbname#_capi);',
                    {l_not(isintent_callback): '\t\tfprintf(stderr,"#vardebugshowvalue# (call-back in C).\\n",#cbname#);'}]},
       '\t\tCFUNCSMESS("Saving jmpbuf for `#varname#`.\\n");\n\t\tSWAP(#varname#_capi,#cbname#_capi,PyObject);\n\t\tSWAP(#varname#_args_capi,#cbname#_args_capi,PyTupleObject);\n\t\tmemcpy(&#varname#_jmpbuf,&#cbname#_jmpbuf,sizeof(jmp_buf));'], 
      'cleanupfrompyobj':'\t\tCFUNCSMESS("Restoring jmpbuf for `#varname#`.\\n");\n\t\t#cbname#_capi = #varname#_capi;\n\t\tPy_DECREF(#cbname#_args_capi);\n\t\t#cbname#_args_capi = #varname#_args_capi;\n\t\t#cbname#_nofargs = #varname#_nofargs_capi;\n\t\tmemcpy(&#cbname#_jmpbuf,&#varname#_jmpbuf,sizeof(jmp_buf));\n\t}', 
      'need':[
       'SWAP', 'create_cb_arglist'], 
      '_check':isexternal, 
      '_depend':''},
     {'decl':'\t#ctype# #varname# = 0;', 
      'pyobjfrom':{debugcapi: '\tfprintf(stderr,"#vardebugshowvalue#\\n",#varname#);'}, 
      'callfortran':{isintent_c: '#varname#,', l_not(isintent_c): '&#varname#,'}, 
      'return':{isintent_out: ',#varname#'}, 
      '_check':l_and(isscalar, l_not(iscomplex))},
     {'need':{hasinitvalue: 'math.h'}, 
      '_check':l_and(isscalar, l_not(iscomplex))},
     {'decl':'\tPyObject *#varname#_capi = Py_None;', 
      'argformat':{isrequired: 'O'}, 
      'keyformat':{isoptional: 'O'}, 
      'args_capi':{isrequired: ',&#varname#_capi'}, 
      'keys_capi':{isoptional: ',&#varname#_capi'}, 
      'pyobjfrom':{isintent_inout: '\tf2py_success = try_pyarr_from_#ctype#(#varname#_capi,&#varname#);\n\tif (f2py_success) {'}, 
      'closepyobjfrom':{isintent_inout: '\t} /*if (f2py_success) of #varname# pyobjfrom*/'}, 
      'need':{isintent_inout: 'try_pyarr_from_#ctype#'}, 
      '_check':l_and(isscalar, l_not(iscomplex), isintent_nothide)},
     {'frompyobj':[
       {hasinitvalue: '\tif (#varname#_capi == Py_None) #varname# = #init#; else', 
        '_depend': ''},
       {l_and(isoptional, l_not(hasinitvalue)): '\tif (#varname#_capi != Py_None)', 
        '_depend': ''},
       {l_not(islogical): '\t\tf2py_success = #ctype#_from_pyobj(&#varname#,#varname#_capi,"#pyname#() #nth# (#varname#) can\'t be converted to #ctype#");\n\tif (f2py_success) {'},
       {islogical: '\t\t#varname# = (#ctype#)PyObject_IsTrue(#varname#_capi);\n\t\tf2py_success = 1;\n\tif (f2py_success) {'}], 
      'cleanupfrompyobj':'\t} /*if (f2py_success) of #varname#*/', 
      'need':{l_not(islogical): '#ctype#_from_pyobj'}, 
      '_check':l_and(isscalar, l_not(iscomplex), isintent_nothide), 
      '_depend':''},
     {'frompyobj':{hasinitvalue: '\t#varname# = #init#;'}, 
      'need':typedef_need_dict, 
      '_check':l_and(isscalar, l_not(iscomplex), isintent_hide), 
      '_depend':''},
     {'frompyobj':{debugcapi: '\tfprintf(stderr,"#vardebugshowvalue#\\n",#varname#);'}, 
      '_check':l_and(isscalar, l_not(iscomplex)), 
      '_depend':''},
     {'decl':'\t#ctype# #varname#;', 
      'callfortran':{isintent_c: '#varname#,', l_not(isintent_c): '&#varname#,'}, 
      'pyobjfrom':{debugcapi: '\tfprintf(stderr,"#vardebugshowvalue#\\n",#varname#.r,#varname#.i);'}, 
      'return':{isintent_out: ',#varname#_capi'}, 
      '_check':iscomplex},
     {'decl':'\tPyObject *#varname#_capi = Py_None;', 
      'argformat':{isrequired: 'O'}, 
      'keyformat':{isoptional: 'O'}, 
      'args_capi':{isrequired: ',&#varname#_capi'}, 
      'keys_capi':{isoptional: ',&#varname#_capi'}, 
      'need':{isintent_inout: 'try_pyarr_from_#ctype#'}, 
      'pyobjfrom':{isintent_inout: '\t\tf2py_success = try_pyarr_from_#ctype#(#varname#_capi,&#varname#);\n\t\tif (f2py_success) {'}, 
      'closepyobjfrom':{isintent_inout: '\t\t} /*if (f2py_success) of #varname# pyobjfrom*/'}, 
      '_check':l_and(iscomplex, isintent_nothide)},
     {'frompyobj':[
       {hasinitvalue: '\tif (#varname#_capi==Py_None) {#varname#.r = #init.r#, #varname#.i = #init.i#;} else'},
       {l_and(isoptional, l_not(hasinitvalue)): '\tif (#varname#_capi != Py_None)'},
       '\t\tf2py_success = #ctype#_from_pyobj(&#varname#,#varname#_capi,"#pyname#() #nth# (#varname#) can\'t be converted to #ctype#");\n\tif (f2py_success) {'], 
      'cleanupfrompyobj':'\t}  /*if (f2py_success) of #varname# frompyobj*/', 
      'need':[
       '#ctype#_from_pyobj'], 
      '_check':l_and(iscomplex, isintent_nothide), 
      '_depend':''},
     {'decl':{isintent_out: '\tPyObject *#varname#_capi = Py_None;'}, 
      '_check':l_and(iscomplex, isintent_hide)},
     {'frompyobj':{hasinitvalue: '\t#varname#.r = #init.r#, #varname#.i = #init.i#;'}, 
      '_check':l_and(iscomplex, isintent_hide), 
      '_depend':''},
     {'pyobjfrom':{isintent_out: '\t#varname#_capi = pyobj_from_#ctype#1(#varname#);'}, 
      'need':[
       'pyobj_from_#ctype#1'], 
      '_check':iscomplex},
     {'frompyobj':{debugcapi: '\tfprintf(stderr,"#vardebugshowvalue#\\n",#varname#.r,#varname#.i);'}, 
      '_check':iscomplex, 
      '_depend':''},
     {'decl':[
       '\t#ctype# #varname# = NULL;',
       '\tint slen(#varname#);',
       '\tPyObject *#varname#_capi = Py_None;'], 
      'callfortran':'#varname#,', 
      'callfortranappend':'slen(#varname#),', 
      'pyobjfrom':{debugcapi: '\tfprintf(stderr,"#vardebugshowvalue#\\n",slen(#varname#),#varname#);'}, 
      'return':{isintent_out: ',#varname#'}, 
      'need':[
       'len..'], 
      '_check':isstring},
     {'frompyobj':'\tslen(#varname#) = #length#;\n\tf2py_success = #ctype#_from_pyobj(&#varname#,&slen(#varname#),#init#,#varname#_capi,"#ctype#_from_pyobj failed in converting #nth# `#varname#\' of #pyname# to C #ctype#");\n\tif (f2py_success) {', 
      'cleanupfrompyobj':'\t\tSTRINGFREE(#varname#);\n\t}  /*if (f2py_success) of #varname#*/', 
      'need':[
       '#ctype#_from_pyobj', 'len..', 'STRINGFREE'], 
      '_check':isstring, 
      '_depend':''},
     {'argformat':{isrequired: 'O'}, 
      'keyformat':{isoptional: 'O'}, 
      'args_capi':{isrequired: ',&#varname#_capi'}, 
      'keys_capi':{isoptional: ',&#varname#_capi'}, 
      'pyobjfrom':{isintent_inout: '\tf2py_success = try_pyarr_from_#ctype#(#varname#_capi,#varname#);\n\tif (f2py_success) {'}, 
      'closepyobjfrom':{isintent_inout: '\t} /*if (f2py_success) of #varname# pyobjfrom*/'}, 
      'need':{isintent_inout: 'try_pyarr_from_#ctype#'}, 
      '_check':l_and(isstring, isintent_nothide)},
     {'_check': l_and(isstring, isintent_hide)},
     {'frompyobj':{debugcapi: '\tfprintf(stderr,"#vardebugshowvalue#\\n",slen(#varname#),#varname#);'}, 
      '_check':isstring, 
      '_depend':''},
     {'decl':[
       '\t#ctype# *#varname# = NULL;',
       '\tnpy_intp #varname#_Dims[#rank#] = {#rank*[-1]#};',
       '\tconst int #varname#_Rank = #rank#;',
       '\tPyArrayObject *capi_#varname#_tmp = NULL;',
       '\tint capi_#varname#_intent = 0;'], 
      'callfortran':'#varname#,', 
      'return':{isintent_out: ',capi_#varname#_tmp'}, 
      'need':'len..', 
      '_check':isarray},
     {'decl':'\tint capi_overwrite_#varname# = 1;', 
      'kwlistxa':'"overwrite_#varname#",', 
      'xaformat':'i', 
      'keys_xa':',&capi_overwrite_#varname#', 
      'docsignxa':'overwrite_#varname#=1,', 
      'docsignxashort':'overwrite_#varname#,', 
      'docstropt':'overwrite_#varname# : input int, optional\\n    Default: 1', 
      '_check':l_and(isarray, isintent_overwrite)},
     {'frompyobj':'\tcapi_#varname#_intent |= (capi_overwrite_#varname#?0:F2PY_INTENT_COPY);', 
      '_check':l_and(isarray, isintent_overwrite), 
      '_depend':''},
     {'decl':'\tint capi_overwrite_#varname# = 0;', 
      'kwlistxa':'"overwrite_#varname#",', 
      'xaformat':'i', 
      'keys_xa':',&capi_overwrite_#varname#', 
      'docsignxa':'overwrite_#varname#=0,', 
      'docsignxashort':'overwrite_#varname#,', 
      'docstropt':'overwrite_#varname# : input int, optional\\n    Default: 0', 
      '_check':l_and(isarray, isintent_copy)},
     {'frompyobj':'\tcapi_#varname#_intent |= (capi_overwrite_#varname#?0:F2PY_INTENT_COPY);', 
      '_check':l_and(isarray, isintent_copy), 
      '_depend':''},
     {'need':[
       {hasinitvalue: 'forcomb'}, {hasinitvalue: 'CFUNCSMESS'}], 
      '_check':isarray, 
      '_depend':''},
     {'decl':'\tPyObject *#varname#_capi = Py_None;', 
      'argformat':{isrequired: 'O'}, 
      'keyformat':{isoptional: 'O'}, 
      'args_capi':{isrequired: ',&#varname#_capi'}, 
      'keys_capi':{isoptional: ',&#varname#_capi'}, 
      '_check':l_and(isarray, isintent_nothide)},
     {'frompyobj':[
       '\t#setdims#;',
       '\tcapi_#varname#_intent |= #intent#;',
       {isintent_hide: '\tcapi_#varname#_tmp = array_from_pyobj(#atype#,#varname#_Dims,#varname#_Rank,capi_#varname#_intent,Py_None);'},
       {isintent_nothide: '\tcapi_#varname#_tmp = array_from_pyobj(#atype#,#varname#_Dims,#varname#_Rank,capi_#varname#_intent,#varname#_capi);'},
       '\tif (capi_#varname#_tmp == NULL) {\n\t\tPyObject *exc, *val, *tb;\n\t\tPyErr_Fetch(&exc, &val, &tb);\n\t\tPyErr_SetString(exc ? exc : #modulename#_error,"failed in converting #nth# `#varname#\' of #pyname# to C/Fortran array" );\n\t\tnpy_PyErr_ChainExceptionsCause(exc, val, tb);\n\t} else {\n\t\t#varname# = (#ctype# *)(PyArray_DATA(capi_#varname#_tmp));\n',
       {hasinitvalue: [
                       {isintent_nothide: '\tif (#varname#_capi == Py_None) {'},
                       {isintent_hide: '\t{'},
                       {iscomplexarray: '\t\t#ctype# capi_c;'},
                       '\t\tint *_i,capi_i=0;\n\t\tCFUNCSMESS("#name#: Initializing #varname#=#init#\\n");\n\t\tif (initforcomb(PyArray_DIMS(capi_#varname#_tmp),PyArray_NDIM(capi_#varname#_tmp),1)) {\n\t\t\twhile ((_i = nextforcomb()))\n\t\t\t\t#varname#[capi_i++] = #init#; /* fortran way */\n\t\t} else {\n\t\t\tPyObject *exc, *val, *tb;\n\t\t\tPyErr_Fetch(&exc, &val, &tb);\n\t\t\tPyErr_SetString(exc ? exc : #modulename#_error,"Initialization of #nth# #varname# failed (initforcomb).");\n\t\t\tnpy_PyErr_ChainExceptionsCause(exc, val, tb);\n\t\t\tf2py_success = 0;\n\t\t}\n\t}\n\tif (f2py_success) {']}], 
      'cleanupfrompyobj':[
       '\t}  /*if (capi_#varname#_tmp == NULL) ... else of #varname#*/',
       {l_not(l_or(isintent_out, isintent_hide)): '\tif((PyObject *)capi_#varname#_tmp!=#varname#_capi) {\n\t\tPy_XDECREF(capi_#varname#_tmp); }'},
       {l_and(isintent_hide, l_not(isintent_out)): '\t\tPy_XDECREF(capi_#varname#_tmp);'},
       {hasinitvalue: '\t}  /*if (f2py_success) of #varname# init*/'}], 
      '_check':isarray, 
      '_depend':''},
     {'_check': l_and(isarray, l_not(iscomplexarray))},
     {'_check': l_and(isarray, l_not(iscomplexarray), isintent_nothide)},
     {'need':'#ctype#', 
      '_check':isint1array, 
      '_depend':''},
     {'need':'#ctype#', 
      '_check':isunsigned_chararray, 
      '_depend':''},
     {'need':'#ctype#', 
      '_check':isunsigned_shortarray, 
      '_depend':''},
     {'need':'#ctype#', 
      '_check':isunsigned_long_longarray, 
      '_depend':''},
     {'need':'#ctype#', 
      '_check':iscomplexarray, 
      '_depend':''},
     {'callfortranappend':{isarrayofstrings: 'flen(#varname#),'}, 
      'need':'string', 
      '_check':isstringarray}]
    check_rules = [
     {'frompyobj':{debugcapi: '\tfprintf(stderr,"debug-capi:Checking `#check#\'\\n");'}, 
      'need':'len..'},
     {'frompyobj':'\tCHECKSCALAR(#check#,"#check#","#nth# #varname#","#varshowvalue#",#varname#) {', 
      'cleanupfrompyobj':'\t} /*CHECKSCALAR(#check#)*/', 
      'need':'CHECKSCALAR', 
      '_check':l_and(isscalar, l_not(iscomplex)), 
      '_break':''},
     {'frompyobj':'\tCHECKSTRING(#check#,"#check#","#nth# #varname#","#varshowvalue#",#varname#) {', 
      'cleanupfrompyobj':'\t} /*CHECKSTRING(#check#)*/', 
      'need':'CHECKSTRING', 
      '_check':isstring, 
      '_break':''},
     {'need':'CHECKARRAY', 
      'frompyobj':'\tCHECKARRAY(#check#,"#check#","#nth# #varname#") {', 
      'cleanupfrompyobj':'\t} /*CHECKARRAY(#check#)*/', 
      '_check':isarray, 
      '_break':''},
     {'need':'CHECKGENERIC', 
      'frompyobj':'\tCHECKGENERIC(#check#,"#check#","#nth# #varname#") {', 
      'cleanupfrompyobj':'\t} /*CHECKGENERIC(#check#)*/'}]

    def buildmodule--- This code section failed: ---

 L.1160         0  LOAD_GLOBAL              outmess
                2  LOAD_STR                 '\tBuilding module "%s"...\n'
                4  LOAD_FAST                'm'
                6  LOAD_STR                 'name'
                8  BINARY_SUBSCR    
               10  BINARY_MODULO    
               12  CALL_FUNCTION_1       1  ''
               14  POP_TOP          

 L.1161        16  BUILD_MAP_0           0 
               18  STORE_FAST               'ret'

 L.1162        20  LOAD_GLOBAL              defmod_rules
               22  LOAD_CONST               None
               24  LOAD_CONST               None
               26  BUILD_SLICE_2         2 
               28  BINARY_SUBSCR    
               30  STORE_FAST               'mod_rules'

 L.1163        32  LOAD_GLOBAL              capi_maps
               34  LOAD_METHOD              modsign2map
               36  LOAD_FAST                'm'
               38  CALL_METHOD_1         1  ''
               40  STORE_FAST               'vrd'

 L.1164        42  LOAD_GLOBAL              dictappend
               44  LOAD_STR                 'f2py_version'
               46  LOAD_GLOBAL              f2py_version
               48  BUILD_MAP_1           1 
               50  LOAD_FAST                'vrd'
               52  CALL_FUNCTION_2       2  ''
               54  STORE_FAST               'rd'

 L.1165        56  BUILD_LIST_0          0 
               58  STORE_FAST               'funcwrappers'

 L.1166        60  BUILD_LIST_0          0 
               62  STORE_FAST               'funcwrappers2'

 L.1167        64  LOAD_FAST                'm'
               66  LOAD_STR                 'interfaced'
               68  BINARY_SUBSCR    
               70  GET_ITER         
               72  FOR_ITER            328  'to 328'
               74  STORE_FAST               'n'

 L.1168        76  LOAD_CONST               None
               78  STORE_FAST               'nb'

 L.1169        80  LOAD_FAST                'm'
               82  LOAD_STR                 'body'
               84  BINARY_SUBSCR    
               86  GET_ITER         
               88  FOR_ITER            150  'to 150'
               90  STORE_FAST               'bi'

 L.1170        92  LOAD_FAST                'bi'
               94  LOAD_STR                 'block'
               96  BINARY_SUBSCR    
               98  LOAD_STR                 'interface'
              100  COMPARE_OP               ==
              102  POP_JUMP_IF_TRUE    114  'to 114'

 L.1171       104  LOAD_GLOBAL              errmess
              106  LOAD_STR                 'buildmodule: Expected interface block. Skipping.\n'
              108  CALL_FUNCTION_1       1  ''
              110  POP_TOP          

 L.1172       112  JUMP_BACK            88  'to 88'
            114_0  COME_FROM           102  '102'

 L.1173       114  LOAD_FAST                'bi'
              116  LOAD_STR                 'body'
              118  BINARY_SUBSCR    
              120  GET_ITER         
            122_0  COME_FROM           136  '136'
              122  FOR_ITER            148  'to 148'
              124  STORE_FAST               'b'

 L.1174       126  LOAD_FAST                'b'
              128  LOAD_STR                 'name'
              130  BINARY_SUBSCR    
              132  LOAD_FAST                'n'
              134  COMPARE_OP               ==
              136  POP_JUMP_IF_FALSE   122  'to 122'

 L.1175       138  LOAD_FAST                'b'
              140  STORE_FAST               'nb'

 L.1176       142  POP_TOP          
              144  CONTINUE             88  'to 88'
              146  JUMP_BACK           122  'to 122'
              148  JUMP_BACK            88  'to 88'

 L.1178       150  LOAD_FAST                'nb'
              152  POP_JUMP_IF_TRUE    168  'to 168'

 L.1179       154  LOAD_GLOBAL              errmess

 L.1180       156  LOAD_STR                 'buildmodule: Could not found the body of interfaced routine "%s". Skipping.\n'
              158  LOAD_FAST                'n'
              160  BINARY_MODULO    

 L.1179       162  CALL_FUNCTION_1       1  ''
              164  POP_TOP          

 L.1181       166  JUMP_BACK            72  'to 72'
            168_0  COME_FROM           152  '152'

 L.1182       168  LOAD_FAST                'nb'
              170  BUILD_LIST_1          1 
              172  STORE_FAST               'nb_list'

 L.1183       174  LOAD_STR                 'entry'
              176  LOAD_FAST                'nb'
              178  COMPARE_OP               in
              180  POP_JUMP_IF_FALSE   246  'to 246'

 L.1184       182  LOAD_FAST                'nb'
              184  LOAD_STR                 'entry'
              186  BINARY_SUBSCR    
              188  LOAD_METHOD              items
              190  CALL_METHOD_0         0  ''
              192  GET_ITER         
              194  FOR_ITER            246  'to 246'
              196  UNPACK_SEQUENCE_2     2 
              198  STORE_FAST               'k'
              200  STORE_FAST               'a'

 L.1185       202  LOAD_GLOBAL              copy
              204  LOAD_METHOD              deepcopy
              206  LOAD_FAST                'nb'
              208  CALL_METHOD_1         1  ''
              210  STORE_FAST               'nb1'

 L.1186       212  LOAD_FAST                'nb1'
              214  LOAD_STR                 'entry'
              216  DELETE_SUBSCR    

 L.1187       218  LOAD_FAST                'k'
              220  LOAD_FAST                'nb1'
              222  LOAD_STR                 'name'
              224  STORE_SUBSCR     

 L.1188       226  LOAD_FAST                'a'
              228  LOAD_FAST                'nb1'
              230  LOAD_STR                 'args'
              232  STORE_SUBSCR     

 L.1189       234  LOAD_FAST                'nb_list'
              236  LOAD_METHOD              append
              238  LOAD_FAST                'nb1'
              240  CALL_METHOD_1         1  ''
              242  POP_TOP          
              244  JUMP_BACK           194  'to 194'
            246_0  COME_FROM           180  '180'

 L.1190       246  LOAD_FAST                'nb_list'
              248  GET_ITER         
              250  FOR_ITER            326  'to 326'
              252  STORE_FAST               'nb'

 L.1191       254  LOAD_GLOBAL              buildapi
              256  LOAD_FAST                'nb'
              258  CALL_FUNCTION_1       1  ''
              260  UNPACK_SEQUENCE_2     2 
              262  STORE_FAST               'api'
              264  STORE_FAST               'wrap'

 L.1192       266  LOAD_FAST                'wrap'
          268_270  POP_JUMP_IF_FALSE   304  'to 304'

 L.1193       272  LOAD_GLOBAL              ismoduleroutine
              274  LOAD_FAST                'nb'
              276  CALL_FUNCTION_1       1  ''
          278_280  POP_JUMP_IF_FALSE   294  'to 294'

 L.1194       282  LOAD_FAST                'funcwrappers2'
              284  LOAD_METHOD              append
              286  LOAD_FAST                'wrap'
              288  CALL_METHOD_1         1  ''
              290  POP_TOP          
              292  JUMP_FORWARD        304  'to 304'
            294_0  COME_FROM           278  '278'

 L.1196       294  LOAD_FAST                'funcwrappers'
              296  LOAD_METHOD              append
              298  LOAD_FAST                'wrap'
              300  CALL_METHOD_1         1  ''
              302  POP_TOP          
            304_0  COME_FROM           292  '292'
            304_1  COME_FROM           268  '268'

 L.1197       304  LOAD_GLOBAL              applyrules
              306  LOAD_FAST                'api'
              308  LOAD_FAST                'vrd'
              310  CALL_FUNCTION_2       2  ''
              312  STORE_FAST               'ar'

 L.1198       314  LOAD_GLOBAL              dictappend
              316  LOAD_FAST                'rd'
              318  LOAD_FAST                'ar'
              320  CALL_FUNCTION_2       2  ''
              322  STORE_FAST               'rd'
              324  JUMP_BACK           250  'to 250'
              326  JUMP_BACK            72  'to 72'

 L.1201       328  LOAD_GLOBAL              common_rules
              330  LOAD_METHOD              buildhooks
              332  LOAD_FAST                'm'
              334  CALL_METHOD_1         1  ''
              336  UNPACK_SEQUENCE_2     2 
              338  STORE_FAST               'cr'
              340  STORE_FAST               'wrap'

 L.1202       342  LOAD_FAST                'wrap'
          344_346  POP_JUMP_IF_FALSE   358  'to 358'

 L.1203       348  LOAD_FAST                'funcwrappers'
              350  LOAD_METHOD              append
              352  LOAD_FAST                'wrap'
              354  CALL_METHOD_1         1  ''
              356  POP_TOP          
            358_0  COME_FROM           344  '344'

 L.1204       358  LOAD_GLOBAL              applyrules
              360  LOAD_FAST                'cr'
              362  LOAD_FAST                'vrd'
              364  CALL_FUNCTION_2       2  ''
              366  STORE_FAST               'ar'

 L.1205       368  LOAD_GLOBAL              dictappend
              370  LOAD_FAST                'rd'
              372  LOAD_FAST                'ar'
              374  CALL_FUNCTION_2       2  ''
              376  STORE_FAST               'rd'

 L.1208       378  LOAD_GLOBAL              f90mod_rules
              380  LOAD_METHOD              buildhooks
              382  LOAD_FAST                'm'
              384  CALL_METHOD_1         1  ''
              386  UNPACK_SEQUENCE_2     2 
              388  STORE_FAST               'mr'
              390  STORE_FAST               'wrap'

 L.1209       392  LOAD_FAST                'wrap'
          394_396  POP_JUMP_IF_FALSE   408  'to 408'

 L.1210       398  LOAD_FAST                'funcwrappers2'
              400  LOAD_METHOD              append
              402  LOAD_FAST                'wrap'
              404  CALL_METHOD_1         1  ''
              406  POP_TOP          
            408_0  COME_FROM           394  '394'

 L.1211       408  LOAD_GLOBAL              applyrules
              410  LOAD_FAST                'mr'
              412  LOAD_FAST                'vrd'
              414  CALL_FUNCTION_2       2  ''
              416  STORE_FAST               'ar'

 L.1212       418  LOAD_GLOBAL              dictappend
              420  LOAD_FAST                'rd'
              422  LOAD_FAST                'ar'
              424  CALL_FUNCTION_2       2  ''
              426  STORE_FAST               'rd'

 L.1214       428  LOAD_FAST                'um'
              430  GET_ITER         
              432  FOR_ITER            474  'to 474'
              434  STORE_FAST               'u'

 L.1215       436  LOAD_GLOBAL              use_rules
              438  LOAD_METHOD              buildusevars
              440  LOAD_FAST                'u'
              442  LOAD_FAST                'm'
              444  LOAD_STR                 'use'
              446  BINARY_SUBSCR    
              448  LOAD_FAST                'u'
              450  LOAD_STR                 'name'
              452  BINARY_SUBSCR    
              454  BINARY_SUBSCR    
              456  CALL_METHOD_2         2  ''
              458  STORE_FAST               'ar'

 L.1216       460  LOAD_GLOBAL              dictappend
              462  LOAD_FAST                'rd'
              464  LOAD_FAST                'ar'
              466  CALL_FUNCTION_2       2  ''
              468  STORE_FAST               'rd'
          470_472  JUMP_BACK           432  'to 432'

 L.1218       474  LOAD_GLOBAL              cfuncs
              476  LOAD_METHOD              get_needs
              478  CALL_METHOD_0         0  ''
              480  STORE_FAST               'needs'

 L.1219       482  BUILD_MAP_0           0 
              484  STORE_FAST               'code'

 L.1220       486  LOAD_FAST                'needs'
              488  LOAD_METHOD              keys
              490  CALL_METHOD_0         0  ''
              492  GET_ITER         
          494_496  FOR_ITER            808  'to 808'
              498  STORE_FAST               'n'

 L.1221       500  BUILD_LIST_0          0 
              502  LOAD_FAST                'code'
              504  LOAD_FAST                'n'
              506  STORE_SUBSCR     

 L.1222       508  LOAD_FAST                'needs'
              510  LOAD_FAST                'n'
              512  BINARY_SUBSCR    
              514  GET_ITER         
          516_518  FOR_ITER            804  'to 804'
              520  STORE_FAST               'k'

 L.1223       522  LOAD_STR                 ''
              524  STORE_FAST               'c'

 L.1224       526  LOAD_FAST                'k'
              528  LOAD_GLOBAL              cfuncs
              530  LOAD_ATTR                includes0
              532  COMPARE_OP               in
          534_536  POP_JUMP_IF_FALSE   550  'to 550'

 L.1225       538  LOAD_GLOBAL              cfuncs
              540  LOAD_ATTR                includes0
              542  LOAD_FAST                'k'
              544  BINARY_SUBSCR    
              546  STORE_FAST               'c'
              548  JUMP_FORWARD        786  'to 786'
            550_0  COME_FROM           534  '534'

 L.1226       550  LOAD_FAST                'k'
              552  LOAD_GLOBAL              cfuncs
              554  LOAD_ATTR                includes
              556  COMPARE_OP               in
          558_560  POP_JUMP_IF_FALSE   574  'to 574'

 L.1227       562  LOAD_GLOBAL              cfuncs
              564  LOAD_ATTR                includes
              566  LOAD_FAST                'k'
              568  BINARY_SUBSCR    
              570  STORE_FAST               'c'
              572  JUMP_FORWARD        786  'to 786'
            574_0  COME_FROM           558  '558'

 L.1228       574  LOAD_FAST                'k'
              576  LOAD_GLOBAL              cfuncs
              578  LOAD_ATTR                userincludes
              580  COMPARE_OP               in
          582_584  POP_JUMP_IF_FALSE   598  'to 598'

 L.1229       586  LOAD_GLOBAL              cfuncs
              588  LOAD_ATTR                userincludes
              590  LOAD_FAST                'k'
              592  BINARY_SUBSCR    
              594  STORE_FAST               'c'
              596  JUMP_FORWARD        786  'to 786'
            598_0  COME_FROM           582  '582'

 L.1230       598  LOAD_FAST                'k'
              600  LOAD_GLOBAL              cfuncs
              602  LOAD_ATTR                typedefs
              604  COMPARE_OP               in
          606_608  POP_JUMP_IF_FALSE   622  'to 622'

 L.1231       610  LOAD_GLOBAL              cfuncs
              612  LOAD_ATTR                typedefs
              614  LOAD_FAST                'k'
              616  BINARY_SUBSCR    
              618  STORE_FAST               'c'
              620  JUMP_FORWARD        786  'to 786'
            622_0  COME_FROM           606  '606'

 L.1232       622  LOAD_FAST                'k'
              624  LOAD_GLOBAL              cfuncs
              626  LOAD_ATTR                typedefs_generated
              628  COMPARE_OP               in
          630_632  POP_JUMP_IF_FALSE   646  'to 646'

 L.1233       634  LOAD_GLOBAL              cfuncs
              636  LOAD_ATTR                typedefs_generated
              638  LOAD_FAST                'k'
              640  BINARY_SUBSCR    
              642  STORE_FAST               'c'
              644  JUMP_FORWARD        786  'to 786'
            646_0  COME_FROM           630  '630'

 L.1234       646  LOAD_FAST                'k'
              648  LOAD_GLOBAL              cfuncs
              650  LOAD_ATTR                cppmacros
              652  COMPARE_OP               in
          654_656  POP_JUMP_IF_FALSE   670  'to 670'

 L.1235       658  LOAD_GLOBAL              cfuncs
              660  LOAD_ATTR                cppmacros
              662  LOAD_FAST                'k'
              664  BINARY_SUBSCR    
              666  STORE_FAST               'c'
              668  JUMP_FORWARD        786  'to 786'
            670_0  COME_FROM           654  '654'

 L.1236       670  LOAD_FAST                'k'
              672  LOAD_GLOBAL              cfuncs
              674  LOAD_ATTR                cfuncs
              676  COMPARE_OP               in
          678_680  POP_JUMP_IF_FALSE   694  'to 694'

 L.1237       682  LOAD_GLOBAL              cfuncs
              684  LOAD_ATTR                cfuncs
              686  LOAD_FAST                'k'
              688  BINARY_SUBSCR    
              690  STORE_FAST               'c'
              692  JUMP_FORWARD        786  'to 786'
            694_0  COME_FROM           678  '678'

 L.1238       694  LOAD_FAST                'k'
              696  LOAD_GLOBAL              cfuncs
              698  LOAD_ATTR                callbacks
              700  COMPARE_OP               in
          702_704  POP_JUMP_IF_FALSE   718  'to 718'

 L.1239       706  LOAD_GLOBAL              cfuncs
              708  LOAD_ATTR                callbacks
              710  LOAD_FAST                'k'
              712  BINARY_SUBSCR    
              714  STORE_FAST               'c'
              716  JUMP_FORWARD        786  'to 786'
            718_0  COME_FROM           702  '702'

 L.1240       718  LOAD_FAST                'k'
              720  LOAD_GLOBAL              cfuncs
              722  LOAD_ATTR                f90modhooks
              724  COMPARE_OP               in
          726_728  POP_JUMP_IF_FALSE   742  'to 742'

 L.1241       730  LOAD_GLOBAL              cfuncs
              732  LOAD_ATTR                f90modhooks
              734  LOAD_FAST                'k'
              736  BINARY_SUBSCR    
              738  STORE_FAST               'c'
              740  JUMP_FORWARD        786  'to 786'
            742_0  COME_FROM           726  '726'

 L.1242       742  LOAD_FAST                'k'
              744  LOAD_GLOBAL              cfuncs
              746  LOAD_ATTR                commonhooks
              748  COMPARE_OP               in
          750_752  POP_JUMP_IF_FALSE   766  'to 766'

 L.1243       754  LOAD_GLOBAL              cfuncs
              756  LOAD_ATTR                commonhooks
              758  LOAD_FAST                'k'
              760  BINARY_SUBSCR    
              762  STORE_FAST               'c'
              764  JUMP_FORWARD        786  'to 786'
            766_0  COME_FROM           750  '750'

 L.1245       766  LOAD_GLOBAL              errmess
              768  LOAD_STR                 'buildmodule: unknown need %s.\n'
              770  LOAD_GLOBAL              repr
              772  LOAD_FAST                'k'
              774  CALL_FUNCTION_1       1  ''
              776  BINARY_MODULO    
              778  CALL_FUNCTION_1       1  ''
              780  POP_TOP          

 L.1246   782_784  JUMP_BACK           516  'to 516'
            786_0  COME_FROM           764  '764'
            786_1  COME_FROM           740  '740'
            786_2  COME_FROM           716  '716'
            786_3  COME_FROM           692  '692'
            786_4  COME_FROM           668  '668'
            786_5  COME_FROM           644  '644'
            786_6  COME_FROM           620  '620'
            786_7  COME_FROM           596  '596'
            786_8  COME_FROM           572  '572'
            786_9  COME_FROM           548  '548'

 L.1247       786  LOAD_FAST                'code'
              788  LOAD_FAST                'n'
              790  BINARY_SUBSCR    
              792  LOAD_METHOD              append
              794  LOAD_FAST                'c'
              796  CALL_METHOD_1         1  ''
              798  POP_TOP          
          800_802  JUMP_BACK           516  'to 516'
          804_806  JUMP_BACK           494  'to 494'

 L.1248       808  LOAD_FAST                'mod_rules'
              810  LOAD_METHOD              append
              812  LOAD_FAST                'code'
              814  CALL_METHOD_1         1  ''
              816  POP_TOP          

 L.1249       818  LOAD_FAST                'mod_rules'
              820  GET_ITER         
            822_0  COME_FROM           856  '856'
              822  FOR_ITER            886  'to 886'
              824  STORE_FAST               'r'

 L.1250       826  LOAD_STR                 '_check'
              828  LOAD_FAST                'r'
              830  COMPARE_OP               in
          832_834  POP_JUMP_IF_FALSE   850  'to 850'
              836  LOAD_FAST                'r'
              838  LOAD_STR                 '_check'
              840  BINARY_SUBSCR    
              842  LOAD_FAST                'm'
              844  CALL_FUNCTION_1       1  ''
          846_848  POP_JUMP_IF_TRUE    860  'to 860'
            850_0  COME_FROM           832  '832'
              850  LOAD_STR                 '_check'
              852  LOAD_FAST                'r'
              854  COMPARE_OP               not-in
          856_858  POP_JUMP_IF_FALSE   822  'to 822'
            860_0  COME_FROM           846  '846'

 L.1251       860  LOAD_GLOBAL              applyrules
              862  LOAD_FAST                'r'
              864  LOAD_FAST                'vrd'
              866  LOAD_FAST                'm'
              868  CALL_FUNCTION_3       3  ''
              870  STORE_FAST               'ar'

 L.1252       872  LOAD_GLOBAL              dictappend
              874  LOAD_FAST                'rd'
              876  LOAD_FAST                'ar'
              878  CALL_FUNCTION_2       2  ''
              880  STORE_FAST               'rd'
          882_884  JUMP_BACK           822  'to 822'

 L.1253       886  LOAD_GLOBAL              applyrules
              888  LOAD_GLOBAL              module_rules
              890  LOAD_FAST                'rd'
              892  CALL_FUNCTION_2       2  ''
              894  STORE_FAST               'ar'

 L.1255       896  LOAD_GLOBAL              os
              898  LOAD_ATTR                path
              900  LOAD_METHOD              join
              902  LOAD_GLOBAL              options
              904  LOAD_STR                 'buildpath'
              906  BINARY_SUBSCR    
              908  LOAD_FAST                'vrd'
              910  LOAD_STR                 'coutput'
              912  BINARY_SUBSCR    
              914  CALL_METHOD_2         2  ''
              916  STORE_FAST               'fn'

 L.1256       918  LOAD_FAST                'fn'
              920  LOAD_FAST                'ret'
              922  LOAD_STR                 'csrc'
              924  STORE_SUBSCR     

 L.1257       926  LOAD_GLOBAL              open
              928  LOAD_FAST                'fn'
              930  LOAD_STR                 'w'
              932  CALL_FUNCTION_2       2  ''
              934  SETUP_WITH          964  'to 964'
              936  STORE_FAST               'f'

 L.1258       938  LOAD_FAST                'f'
              940  LOAD_METHOD              write
              942  LOAD_FAST                'ar'
              944  LOAD_STR                 'modulebody'
              946  BINARY_SUBSCR    
              948  LOAD_METHOD              replace
              950  LOAD_STR                 '\t'
              952  LOAD_STR                 '  '
              954  CALL_METHOD_2         2  ''
              956  CALL_METHOD_1         1  ''
              958  POP_TOP          
              960  POP_BLOCK        
              962  BEGIN_FINALLY    
            964_0  COME_FROM_WITH      934  '934'
              964  WITH_CLEANUP_START
              966  WITH_CLEANUP_FINISH
              968  END_FINALLY      

 L.1259       970  LOAD_GLOBAL              outmess
              972  LOAD_STR                 '\tWrote C/API module "%s" to file "%s"\n'
              974  LOAD_FAST                'm'
              976  LOAD_STR                 'name'
              978  BINARY_SUBSCR    
              980  LOAD_FAST                'fn'
              982  BUILD_TUPLE_2         2 
              984  BINARY_MODULO    
              986  CALL_FUNCTION_1       1  ''
              988  POP_TOP          

 L.1261       990  LOAD_GLOBAL              options
              992  LOAD_STR                 'dorestdoc'
              994  BINARY_SUBSCR    
          996_998  POP_JUMP_IF_FALSE  1102  'to 1102'

 L.1262      1000  LOAD_GLOBAL              os
             1002  LOAD_ATTR                path
             1004  LOAD_METHOD              join

 L.1263      1006  LOAD_GLOBAL              options
             1008  LOAD_STR                 'buildpath'
             1010  BINARY_SUBSCR    

 L.1263      1012  LOAD_FAST                'vrd'
             1014  LOAD_STR                 'modulename'
             1016  BINARY_SUBSCR    
             1018  LOAD_STR                 'module.rest'
             1020  BINARY_ADD       

 L.1262      1022  CALL_METHOD_2         2  ''
             1024  STORE_FAST               'fn'

 L.1264      1026  LOAD_GLOBAL              open
             1028  LOAD_FAST                'fn'
             1030  LOAD_STR                 'w'
             1032  CALL_FUNCTION_2       2  ''
             1034  SETUP_WITH         1072  'to 1072'
             1036  STORE_FAST               'f'

 L.1265      1038  LOAD_FAST                'f'
             1040  LOAD_METHOD              write
             1042  LOAD_STR                 '.. -*- rest -*-\n'
             1044  CALL_METHOD_1         1  ''
             1046  POP_TOP          

 L.1266      1048  LOAD_FAST                'f'
             1050  LOAD_METHOD              write
             1052  LOAD_STR                 '\n'
             1054  LOAD_METHOD              join
             1056  LOAD_FAST                'ar'
             1058  LOAD_STR                 'restdoc'
             1060  BINARY_SUBSCR    
             1062  CALL_METHOD_1         1  ''
             1064  CALL_METHOD_1         1  ''
             1066  POP_TOP          
             1068  POP_BLOCK        
             1070  BEGIN_FINALLY    
           1072_0  COME_FROM_WITH     1034  '1034'
             1072  WITH_CLEANUP_START
             1074  WITH_CLEANUP_FINISH
             1076  END_FINALLY      

 L.1267      1078  LOAD_GLOBAL              outmess
             1080  LOAD_STR                 '\tReST Documentation is saved to file "%s/%smodule.rest"\n'

 L.1268      1082  LOAD_GLOBAL              options
             1084  LOAD_STR                 'buildpath'
             1086  BINARY_SUBSCR    
             1088  LOAD_FAST                'vrd'
             1090  LOAD_STR                 'modulename'
             1092  BINARY_SUBSCR    
             1094  BUILD_TUPLE_2         2 

 L.1267      1096  BINARY_MODULO    
             1098  CALL_FUNCTION_1       1  ''
             1100  POP_TOP          
           1102_0  COME_FROM           996  '996'

 L.1269      1102  LOAD_GLOBAL              options
             1104  LOAD_STR                 'dolatexdoc'
             1106  BINARY_SUBSCR    
         1108_1110  POP_JUMP_IF_FALSE  1266  'to 1266'

 L.1270      1112  LOAD_GLOBAL              os
             1114  LOAD_ATTR                path
             1116  LOAD_METHOD              join

 L.1271      1118  LOAD_GLOBAL              options
             1120  LOAD_STR                 'buildpath'
             1122  BINARY_SUBSCR    

 L.1271      1124  LOAD_FAST                'vrd'
             1126  LOAD_STR                 'modulename'
             1128  BINARY_SUBSCR    
             1130  LOAD_STR                 'module.tex'
             1132  BINARY_ADD       

 L.1270      1134  CALL_METHOD_2         2  ''
             1136  STORE_FAST               'fn'

 L.1272      1138  LOAD_FAST                'fn'
             1140  LOAD_FAST                'ret'
             1142  LOAD_STR                 'ltx'
             1144  STORE_SUBSCR     

 L.1273      1146  LOAD_GLOBAL              open
             1148  LOAD_FAST                'fn'
             1150  LOAD_STR                 'w'
             1152  CALL_FUNCTION_2       2  ''
             1154  SETUP_WITH         1236  'to 1236'
             1156  STORE_FAST               'f'

 L.1274      1158  LOAD_FAST                'f'
             1160  LOAD_METHOD              write

 L.1275      1162  LOAD_STR                 '%% This file is auto-generated with f2py (version:%s)\n'
             1164  LOAD_GLOBAL              f2py_version
             1166  BINARY_MODULO    

 L.1274      1168  CALL_METHOD_1         1  ''
             1170  POP_TOP          

 L.1276      1172  LOAD_STR                 'shortlatex'
             1174  LOAD_GLOBAL              options
             1176  COMPARE_OP               not-in
         1178_1180  POP_JUMP_IF_FALSE  1212  'to 1212'

 L.1277      1182  LOAD_FAST                'f'
             1184  LOAD_METHOD              write

 L.1278      1186  LOAD_STR                 '\\documentclass{article}\n\\usepackage{a4wide}\n\\begin{document}\n\\tableofcontents\n\n'

 L.1277      1188  CALL_METHOD_1         1  ''
             1190  POP_TOP          

 L.1279      1192  LOAD_FAST                'f'
             1194  LOAD_METHOD              write
             1196  LOAD_STR                 '\n'
             1198  LOAD_METHOD              join
             1200  LOAD_FAST                'ar'
             1202  LOAD_STR                 'latexdoc'
             1204  BINARY_SUBSCR    
             1206  CALL_METHOD_1         1  ''
             1208  CALL_METHOD_1         1  ''
             1210  POP_TOP          
           1212_0  COME_FROM          1178  '1178'

 L.1280      1212  LOAD_STR                 'shortlatex'
             1214  LOAD_GLOBAL              options
             1216  COMPARE_OP               not-in
         1218_1220  POP_JUMP_IF_FALSE  1232  'to 1232'

 L.1281      1222  LOAD_FAST                'f'
             1224  LOAD_METHOD              write
             1226  LOAD_STR                 '\\end{document}'
             1228  CALL_METHOD_1         1  ''
             1230  POP_TOP          
           1232_0  COME_FROM          1218  '1218'
             1232  POP_BLOCK        
             1234  BEGIN_FINALLY    
           1236_0  COME_FROM_WITH     1154  '1154'
             1236  WITH_CLEANUP_START
             1238  WITH_CLEANUP_FINISH
             1240  END_FINALLY      

 L.1282      1242  LOAD_GLOBAL              outmess
             1244  LOAD_STR                 '\tDocumentation is saved to file "%s/%smodule.tex"\n'

 L.1283      1246  LOAD_GLOBAL              options
             1248  LOAD_STR                 'buildpath'
             1250  BINARY_SUBSCR    
             1252  LOAD_FAST                'vrd'
             1254  LOAD_STR                 'modulename'
             1256  BINARY_SUBSCR    
             1258  BUILD_TUPLE_2         2 

 L.1282      1260  BINARY_MODULO    
             1262  CALL_FUNCTION_1       1  ''
             1264  POP_TOP          
           1266_0  COME_FROM          1108  '1108'

 L.1284      1266  LOAD_FAST                'funcwrappers'
         1268_1270  POP_JUMP_IF_FALSE  1532  'to 1532'

 L.1285      1272  LOAD_GLOBAL              os
             1274  LOAD_ATTR                path
             1276  LOAD_METHOD              join
             1278  LOAD_GLOBAL              options
             1280  LOAD_STR                 'buildpath'
             1282  BINARY_SUBSCR    
             1284  LOAD_FAST                'vrd'
             1286  LOAD_STR                 'f2py_wrapper_output'
             1288  BINARY_SUBSCR    
             1290  CALL_METHOD_2         2  ''
             1292  STORE_FAST               'wn'

 L.1286      1294  LOAD_FAST                'wn'
             1296  LOAD_FAST                'ret'
             1298  LOAD_STR                 'fsrc'
             1300  STORE_SUBSCR     

 L.1287      1302  LOAD_GLOBAL              open
             1304  LOAD_FAST                'wn'
             1306  LOAD_STR                 'w'
             1308  CALL_FUNCTION_2       2  ''
             1310  SETUP_WITH         1514  'to 1514'
             1312  STORE_FAST               'f'

 L.1288      1314  LOAD_FAST                'f'
             1316  LOAD_METHOD              write
             1318  LOAD_STR                 'C     -*- fortran -*-\n'
             1320  CALL_METHOD_1         1  ''
             1322  POP_TOP          

 L.1289      1324  LOAD_FAST                'f'
             1326  LOAD_METHOD              write

 L.1290      1328  LOAD_STR                 'C     This file is autogenerated with f2py (version:%s)\n'
             1330  LOAD_GLOBAL              f2py_version
             1332  BINARY_MODULO    

 L.1289      1334  CALL_METHOD_1         1  ''
             1336  POP_TOP          

 L.1291      1338  LOAD_FAST                'f'
             1340  LOAD_METHOD              write

 L.1292      1342  LOAD_STR                 'C     It contains Fortran 77 wrappers to fortran functions.\n'

 L.1291      1344  CALL_METHOD_1         1  ''
             1346  POP_TOP          

 L.1293      1348  BUILD_LIST_0          0 
             1350  STORE_FAST               'lines'

 L.1294      1352  LOAD_STR                 '\n\n'
             1354  LOAD_METHOD              join
             1356  LOAD_FAST                'funcwrappers'
             1358  CALL_METHOD_1         1  ''
             1360  LOAD_STR                 '\n'
             1362  BINARY_ADD       
             1364  LOAD_METHOD              split
             1366  LOAD_STR                 '\n'
             1368  CALL_METHOD_1         1  ''
             1370  GET_ITER         
             1372  FOR_ITER           1482  'to 1482'
             1374  STORE_FAST               'l'

 L.1295      1376  LOAD_FAST                'l'
         1378_1380  POP_JUMP_IF_FALSE  1464  'to 1464'
             1382  LOAD_FAST                'l'
             1384  LOAD_CONST               0
             1386  BINARY_SUBSCR    
             1388  LOAD_STR                 ' '
             1390  COMPARE_OP               ==
         1392_1394  POP_JUMP_IF_FALSE  1464  'to 1464'

 L.1296      1396  LOAD_GLOBAL              len
             1398  LOAD_FAST                'l'
             1400  CALL_FUNCTION_1       1  ''
             1402  LOAD_CONST               66
             1404  COMPARE_OP               >=
         1406_1408  POP_JUMP_IF_FALSE  1448  'to 1448'

 L.1297      1410  LOAD_FAST                'lines'
             1412  LOAD_METHOD              append
             1414  LOAD_FAST                'l'
             1416  LOAD_CONST               None
             1418  LOAD_CONST               66
             1420  BUILD_SLICE_2         2 
             1422  BINARY_SUBSCR    
             1424  LOAD_STR                 '\n     &'
             1426  BINARY_ADD       
             1428  CALL_METHOD_1         1  ''
             1430  POP_TOP          

 L.1298      1432  LOAD_FAST                'l'
             1434  LOAD_CONST               66
             1436  LOAD_CONST               None
             1438  BUILD_SLICE_2         2 
             1440  BINARY_SUBSCR    
             1442  STORE_FAST               'l'
         1444_1446  JUMP_BACK          1396  'to 1396'
           1448_0  COME_FROM          1406  '1406'

 L.1299      1448  LOAD_FAST                'lines'
             1450  LOAD_METHOD              append
             1452  LOAD_FAST                'l'
             1454  LOAD_STR                 '\n'
             1456  BINARY_ADD       
             1458  CALL_METHOD_1         1  ''
             1460  POP_TOP          
             1462  JUMP_BACK          1372  'to 1372'
           1464_0  COME_FROM          1392  '1392'
           1464_1  COME_FROM          1378  '1378'

 L.1301      1464  LOAD_FAST                'lines'
             1466  LOAD_METHOD              append
             1468  LOAD_FAST                'l'
             1470  LOAD_STR                 '\n'
             1472  BINARY_ADD       
             1474  CALL_METHOD_1         1  ''
             1476  POP_TOP          
         1478_1480  JUMP_BACK          1372  'to 1372'

 L.1302      1482  LOAD_STR                 ''
             1484  LOAD_METHOD              join
             1486  LOAD_FAST                'lines'
             1488  CALL_METHOD_1         1  ''
             1490  LOAD_METHOD              replace
             1492  LOAD_STR                 '\n     &\n'
             1494  LOAD_STR                 '\n'
             1496  CALL_METHOD_2         2  ''
             1498  STORE_FAST               'lines'

 L.1303      1500  LOAD_FAST                'f'
             1502  LOAD_METHOD              write
             1504  LOAD_FAST                'lines'
             1506  CALL_METHOD_1         1  ''
             1508  POP_TOP          
             1510  POP_BLOCK        
             1512  BEGIN_FINALLY    
           1514_0  COME_FROM_WITH     1310  '1310'
             1514  WITH_CLEANUP_START
             1516  WITH_CLEANUP_FINISH
             1518  END_FINALLY      

 L.1304      1520  LOAD_GLOBAL              outmess
             1522  LOAD_STR                 '\tFortran 77 wrappers are saved to "%s"\n'
             1524  LOAD_FAST                'wn'
             1526  BINARY_MODULO    
             1528  CALL_FUNCTION_1       1  ''
             1530  POP_TOP          
           1532_0  COME_FROM          1268  '1268'

 L.1305      1532  LOAD_FAST                'funcwrappers2'
         1534_1536  POP_JUMP_IF_FALSE  1844  'to 1844'

 L.1306      1538  LOAD_GLOBAL              os
             1540  LOAD_ATTR                path
             1542  LOAD_METHOD              join

 L.1307      1544  LOAD_GLOBAL              options
             1546  LOAD_STR                 'buildpath'
             1548  BINARY_SUBSCR    

 L.1307      1550  LOAD_STR                 '%s-f2pywrappers2.f90'
             1552  LOAD_FAST                'vrd'
             1554  LOAD_STR                 'modulename'
             1556  BINARY_SUBSCR    
             1558  BINARY_MODULO    

 L.1306      1560  CALL_METHOD_2         2  ''
             1562  STORE_FAST               'wn'

 L.1308      1564  LOAD_FAST                'wn'
             1566  LOAD_FAST                'ret'
             1568  LOAD_STR                 'fsrc'
             1570  STORE_SUBSCR     

 L.1309      1572  LOAD_GLOBAL              open
             1574  LOAD_FAST                'wn'
             1576  LOAD_STR                 'w'
             1578  CALL_FUNCTION_2       2  ''
             1580  SETUP_WITH         1826  'to 1826'
             1582  STORE_FAST               'f'

 L.1310      1584  LOAD_FAST                'f'
             1586  LOAD_METHOD              write
             1588  LOAD_STR                 '!     -*- f90 -*-\n'
             1590  CALL_METHOD_1         1  ''
             1592  POP_TOP          

 L.1311      1594  LOAD_FAST                'f'
             1596  LOAD_METHOD              write

 L.1312      1598  LOAD_STR                 '!     This file is autogenerated with f2py (version:%s)\n'
             1600  LOAD_GLOBAL              f2py_version
             1602  BINARY_MODULO    

 L.1311      1604  CALL_METHOD_1         1  ''
             1606  POP_TOP          

 L.1313      1608  LOAD_FAST                'f'
             1610  LOAD_METHOD              write

 L.1314      1612  LOAD_STR                 '!     It contains Fortran 90 wrappers to fortran functions.\n'

 L.1313      1614  CALL_METHOD_1         1  ''
             1616  POP_TOP          

 L.1315      1618  BUILD_LIST_0          0 
             1620  STORE_FAST               'lines'

 L.1316      1622  LOAD_STR                 '\n\n'
             1624  LOAD_METHOD              join
             1626  LOAD_FAST                'funcwrappers2'
             1628  CALL_METHOD_1         1  ''
             1630  LOAD_STR                 '\n'
             1632  BINARY_ADD       
             1634  LOAD_METHOD              split
             1636  LOAD_STR                 '\n'
             1638  CALL_METHOD_1         1  ''
             1640  GET_ITER         
             1642  FOR_ITER           1794  'to 1794'
             1644  STORE_FAST               'l'

 L.1317      1646  LOAD_GLOBAL              len
             1648  LOAD_FAST                'l'
             1650  CALL_FUNCTION_1       1  ''
             1652  LOAD_CONST               72
             1654  COMPARE_OP               >
         1656_1658  POP_JUMP_IF_FALSE  1776  'to 1776'
             1660  LOAD_FAST                'l'
             1662  LOAD_CONST               0
             1664  BINARY_SUBSCR    
             1666  LOAD_STR                 ' '
             1668  COMPARE_OP               ==
         1670_1672  POP_JUMP_IF_FALSE  1776  'to 1776'

 L.1318      1674  LOAD_FAST                'lines'
             1676  LOAD_METHOD              append
             1678  LOAD_FAST                'l'
             1680  LOAD_CONST               None
             1682  LOAD_CONST               72
             1684  BUILD_SLICE_2         2 
             1686  BINARY_SUBSCR    
             1688  LOAD_STR                 '&\n     &'
             1690  BINARY_ADD       
             1692  CALL_METHOD_1         1  ''
             1694  POP_TOP          

 L.1319      1696  LOAD_FAST                'l'
             1698  LOAD_CONST               72
             1700  LOAD_CONST               None
             1702  BUILD_SLICE_2         2 
             1704  BINARY_SUBSCR    
             1706  STORE_FAST               'l'

 L.1320      1708  LOAD_GLOBAL              len
             1710  LOAD_FAST                'l'
             1712  CALL_FUNCTION_1       1  ''
             1714  LOAD_CONST               66
             1716  COMPARE_OP               >
         1718_1720  POP_JUMP_IF_FALSE  1760  'to 1760'

 L.1321      1722  LOAD_FAST                'lines'
             1724  LOAD_METHOD              append
             1726  LOAD_FAST                'l'
             1728  LOAD_CONST               None
             1730  LOAD_CONST               66
             1732  BUILD_SLICE_2         2 
             1734  BINARY_SUBSCR    
             1736  LOAD_STR                 '&\n     &'
             1738  BINARY_ADD       
             1740  CALL_METHOD_1         1  ''
             1742  POP_TOP          

 L.1322      1744  LOAD_FAST                'l'
             1746  LOAD_CONST               66
             1748  LOAD_CONST               None
             1750  BUILD_SLICE_2         2 
             1752  BINARY_SUBSCR    
             1754  STORE_FAST               'l'
         1756_1758  JUMP_BACK          1708  'to 1708'
           1760_0  COME_FROM          1718  '1718'

 L.1323      1760  LOAD_FAST                'lines'
             1762  LOAD_METHOD              append
             1764  LOAD_FAST                'l'
             1766  LOAD_STR                 '\n'
             1768  BINARY_ADD       
             1770  CALL_METHOD_1         1  ''
             1772  POP_TOP          
             1774  JUMP_BACK          1642  'to 1642'
           1776_0  COME_FROM          1670  '1670'
           1776_1  COME_FROM          1656  '1656'

 L.1325      1776  LOAD_FAST                'lines'
             1778  LOAD_METHOD              append
             1780  LOAD_FAST                'l'
             1782  LOAD_STR                 '\n'
             1784  BINARY_ADD       
             1786  CALL_METHOD_1         1  ''
             1788  POP_TOP          
         1790_1792  JUMP_BACK          1642  'to 1642'

 L.1326      1794  LOAD_STR                 ''
             1796  LOAD_METHOD              join
             1798  LOAD_FAST                'lines'
             1800  CALL_METHOD_1         1  ''
             1802  LOAD_METHOD              replace
             1804  LOAD_STR                 '\n     &\n'
             1806  LOAD_STR                 '\n'
             1808  CALL_METHOD_2         2  ''
             1810  STORE_FAST               'lines'

 L.1327      1812  LOAD_FAST                'f'
             1814  LOAD_METHOD              write
             1816  LOAD_FAST                'lines'
             1818  CALL_METHOD_1         1  ''
             1820  POP_TOP          
             1822  POP_BLOCK        
             1824  BEGIN_FINALLY    
           1826_0  COME_FROM_WITH     1580  '1580'
             1826  WITH_CLEANUP_START
             1828  WITH_CLEANUP_FINISH
             1830  END_FINALLY      

 L.1328      1832  LOAD_GLOBAL              outmess
             1834  LOAD_STR                 '\tFortran 90 wrappers are saved to "%s"\n'
             1836  LOAD_FAST                'wn'
             1838  BINARY_MODULO    
             1840  CALL_FUNCTION_1       1  ''
             1842  POP_TOP          
           1844_0  COME_FROM          1534  '1534'

 L.1329      1844  LOAD_FAST                'ret'
             1846  RETURN_VALUE     
               -1  RETURN_LAST      

Parse error at or near `CONTINUE' instruction at offset 144


    stnd = {1:'st', 
     2:'nd',  3:'rd',  4:'th',  5:'th',  6:'th', 
     7:'th',  8:'th',  9:'th',  0:'th'}

    def buildapi(rout):
        rout, wrap = func2subr.assubr(rout)
        args, depargs = getargs2(rout)
        capi_maps.depargs = depargs
        var = rout['vars']
        if ismoduleroutine(rout):
            outmess('\t\t\tConstructing wrapper function "%s.%s"...\n' % (
             rout['modulename'], rout['name']))
        else:
            outmess('\t\tConstructing wrapper function "%s"...\n' % rout['name'])
        vrd = capi_maps.routsign2map(rout)
        rd = dictappend({}, vrd)
        for r in rout_rules:
            if '_check' in r:
                if r['_check'](rout) or '_check' not in r:
                    ar = applyrules(r, vrd, rout)
                    rd = dictappend(rd, ar)
            nth, nthk = (0, 0)
            savevrd = {}

        for a in args:
            vrd = capi_maps.sign2map(a, var[a])
            if isintent_aux(var[a]):
                _rules = aux_rules
            else:
                _rules = arg_rules
                if not isintent_hide(var[a]):
                    if not isoptional(var[a]):
                        nth = nth + 1
                        vrd['nth'] = repr(nth) + stnd[(nth % 10)] + ' argument'
                    else:
                        nthk = nthk + 1
                        vrd['nth'] = repr(nthk) + stnd[(nthk % 10)] + ' keyword'
                else:
                    vrd['nth'] = 'hidden'
            savevrd[a] = vrd

        for r in _rules:
            if '_depend' in r:
                pass
            else:
                if '_check' in r and r['_check'](var[a]) or '_check' not in r:
                    pass
                ar = applyrules(r, vrd, var[a])
                rd = dictappend(rd, ar)
                if '_break' in r:
                    continue
        else:
            for a in depargs:
                if isintent_aux(var[a]):
                    _rules = aux_rules
                else:
                    _rules = arg_rules
                vrd = savevrd[a]
                for r in _rules:
                    if '_depend' not in r:
                        pass
                    else:
                        if not ('_check' in r and r['_check'](var[a])):
                            if '_check' not in r:
                                ar = applyrules(r, vrd, var[a])
                                rd = dictappend(rd, ar)
                                if '_break' in r:
                                    break
                            if 'check' in var[a]:
                                for c in var[a]['check']:
                                    vrd['check'] = c
                                    ar = applyrules(check_rules, vrd, var[a])
                                    rd = dictappend(rd, ar)
                                else:
                                    if isinstance(rd['cleanupfrompyobj'], list):
                                        rd['cleanupfrompyobj'].reverse()
                                    else:
                                        if isinstance(rd['closepyobjfrom'], list):
                                            rd['closepyobjfrom'].reverse()
                                        else:
                                            rd['docsignature'] = stripcomma(replace('#docsign##docsignopt##docsignxa#', {'docsign':rd['docsign'], 
                                             'docsignopt':rd['docsignopt'], 
                                             'docsignxa':rd['docsignxa']}))
                                            optargs = stripcomma(replace('#docsignopt##docsignxa#', {'docsignxa':rd['docsignxashort'], 
                                             'docsignopt':rd['docsignoptshort']}))
                                            if optargs == '':
                                                rd['docsignatureshort'] = stripcomma(replace('#docsign#', {'docsign': rd['docsign']}))
                                            else:
                                                rd['docsignatureshort'] = replace('#docsign#[#docsignopt#]', {'docsign':rd['docsign'], 
                                                 'docsignopt':optargs})
                                        rd['latexdocsignatureshort'] = rd['docsignatureshort'].replace('_', '\\_')
                                        rd['latexdocsignatureshort'] = rd['latexdocsignatureshort'].replace(',', ', ')
                                        cfs = stripcomma(replace('#callfortran##callfortranappend#', {'callfortran':rd['callfortran'], 
                                         'callfortranappend':rd['callfortranappend']}))
                                        if len(rd['callfortranappend']) > 1:
                                            rd['callcompaqfortran'] = stripcomma(replace('#callfortran# 0,#callfortranappend#', {'callfortran':rd['callfortran'], 
                                             'callfortranappend':rd['callfortranappend']}))
                                        else:
                                            rd['callcompaqfortran'] = cfs
                                    rd['callfortran'] = cfs

                                if isinstance(rd['docreturn'], list):
                                    rd['docreturn'] = stripcomma(replace('#docreturn#', {'docreturn': rd['docreturn']})) + ' = '
                        rd['docstrsigns'] = []
                        rd['latexdocstrsigns'] = []
                        for k in ('docstrreq', 'docstropt', 'docstrout', 'docstrcbs'):
                            if k in rd:
                                if isinstance(rd[k], list):
                                    rd['docstrsigns'] = rd['docstrsigns'] + rd[k]
                            else:
                                k = 'latex' + k
                                if k in rd:
                                    if isinstance(rd[k], list):
                                        rd['latexdocstrsigns'] = rd['latexdocstrsigns'] + rd[k][0:1] + [
                                         '\\begin{description}'] + rd[k][1:] + [
                                         '\\end{description}']
                                    ar = applyrules(routine_rules, rd)
                                    if ismoduleroutine(rout):
                                        outmess('\t\t\t  %s\n' % ar['docshort'])
                                outmess('\t\t  %s\n' % ar['docshort'])
                            return (
                             ar, wrap)