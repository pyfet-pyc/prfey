# uncompyle6 version 3.7.4
# Python bytecode 3.8 (3413)
# Decompiled from: Python 3.6.15 (default, Sep 28 2021, 20:18:52) 
# [GCC 10.2.1 20210110]
# Embedded file name: site-packages\numpy\f2py\rules.py
"""

Rules for building C/API module with f2py2e.

Here is a skeleton of a new wrapper function (13Dec2001):

wrapper_function(args)
  declarations
  get_python_arguments, say, `a' and `b'

  get_a_from_python
  if (successful) {

    get_b_from_python
    if (successful) {

      callfortran
      if (successful) {

        put_a_to_python
        if (successful) {

          put_b_to_python
          if (successful) {

            buildvalue = ...

          }

        }

      }

    }
    cleanup_b

  }
  cleanup_a

  return buildvalue

Copyright 1999,2000 Pearu Peterson all rights reserved,
Pearu Peterson <pearu@ioc.ee>
Permission to use, modify, and distribute this software is given under the
terms of the NumPy License.

NO WARRANTY IS EXPRESSED OR IMPLIED.  USE AT YOUR OWN RISK.
$Date: 2005/08/30 08:58:42 $
Pearu Peterson

"""
import os, time, copy
from . import __version__
f2py_version = __version__.version
numpy_version = __version__.version
from .auxfuncs import applyrules, debugcapi, dictappend, errmess, gentitle, getargs2, hascallstatement, hasexternals, hasinitvalue, hasnote, hasresultnote, isarray, isarrayofstrings, iscomplex, iscomplexarray, iscomplexfunction, iscomplexfunction_warn, isdummyroutine, isexternal, isfunction, isfunction_wrap, isint1array, isintent_aux, isintent_c, isintent_callback, isintent_copy, isintent_hide, isintent_inout, isintent_nothide, isintent_out, isintent_overwrite, islogical, islong_complex, islong_double, islong_doublefunction, islong_long, islong_longfunction, ismoduleroutine, isoptional, isrequired, isscalar, issigned_long_longarray, isstring, isstringarray, isstringfunction, issubroutine, issubroutine_wrap, isthreadsafe, isunsigned, isunsigned_char, isunsigned_chararray, isunsigned_long_long, isunsigned_long_longarray, isunsigned_short, isunsigned_shortarray, l_and, l_not, l_or, outmess, replace, stripcomma, requiresf90wrapper
from . import capi_maps
from . import cfuncs
from . import common_rules
from . import use_rules
from . import f90mod_rules
from . import func2subr
options = {}
sepdict = {}
for k in ('decl', 'frompyobj', 'cleanupfrompyobj', 'topyarr', 'method', 'pyobjfrom',
          'closepyobjfrom', 'freemem', 'userincludes', 'includes0', 'includes', 'typedefs',
          'typedefs_generated', 'cppmacros', 'cfuncs', 'callbacks', 'latexdoc', 'restdoc',
          'routine_defs', 'externroutines', 'initf2pywraphooks', 'commonhooks', 'initcommonhooks',
          'f90modhooks', 'initf90modhooks'):
    sepdict[k] = '\n'
else:
    generationtime = int(os.environ.get('SOURCE_DATE_EPOCH', time.time()))
    module_rules = {'modulebody':'/* File: #modulename#module.c\n * This file is auto-generated with f2py (version:#f2py_version#).\n * f2py is a Fortran to Python Interface Generator (FPIG), Second Edition,\n * written by Pearu Peterson <pearu@cens.ioc.ee>.\n * Generation date: ' + time.asctime(time.gmtime(generationtime)) + '\n * Do not edit this file directly unless you know what you are doing!!!\n */\n\n#ifdef __cplusplus\nextern "C" {\n#endif\n\n' + gentitle('See f2py2e/cfuncs.py: includes') + '\n#includes#\n#includes0#\n\n' + gentitle("See f2py2e/rules.py: mod_rules['modulebody']") + '\nstatic PyObject *#modulename#_error;\nstatic PyObject *#modulename#_module;\n\n' + gentitle('See f2py2e/cfuncs.py: typedefs') + '\n#typedefs#\n\n' + gentitle('See f2py2e/cfuncs.py: typedefs_generated') + '\n#typedefs_generated#\n\n' + gentitle('See f2py2e/cfuncs.py: cppmacros') + '\n#cppmacros#\n\n' + gentitle('See f2py2e/cfuncs.py: cfuncs') + '\n#cfuncs#\n\n' + gentitle('See f2py2e/cfuncs.py: userincludes') + '\n#userincludes#\n\n' + gentitle('See f2py2e/capi_rules.py: usercode') + '\n#usercode#\n\n/* See f2py2e/rules.py */\n#externroutines#\n\n' + gentitle('See f2py2e/capi_rules.py: usercode1') + '\n#usercode1#\n\n' + gentitle('See f2py2e/cb_rules.py: buildcallback') + '\n#callbacks#\n\n' + gentitle('See f2py2e/rules.py: buildapi') + '\n#body#\n\n' + gentitle('See f2py2e/f90mod_rules.py: buildhooks') + '\n#f90modhooks#\n\n' + gentitle("See f2py2e/rules.py: module_rules['modulebody']") + '\n\n' + gentitle('See f2py2e/common_rules.py: buildhooks') + '\n#commonhooks#\n\n' + gentitle('See f2py2e/rules.py') + '\n\nstatic FortranDataDef f2py_routine_defs[] = {\n#routine_defs#\n\t{NULL}\n};\n\nstatic PyMethodDef f2py_module_methods[] = {\n#pymethoddef#\n\t{NULL,NULL}\n};\n\nstatic struct PyModuleDef moduledef = {\n\tPyModuleDef_HEAD_INIT,\n\t"#modulename#",\n\tNULL,\n\t-1,\n\tf2py_module_methods,\n\tNULL,\n\tNULL,\n\tNULL,\n\tNULL\n};\n\nPyMODINIT_FUNC PyInit_#modulename#(void) {\n\tint i;\n\tPyObject *m,*d, *s, *tmp;\n\tm = #modulename#_module = PyModule_Create(&moduledef);\n\tPy_SET_TYPE(&PyFortran_Type, &PyType_Type);\n\timport_array();\n\tif (PyErr_Occurred())\n\t\t{PyErr_SetString(PyExc_ImportError, "can\'t initialize module #modulename# (failed to import numpy)"); return m;}\n\td = PyModule_GetDict(m);\n\ts = PyUnicode_FromString("#f2py_version#");\n\tPyDict_SetItemString(d, "__version__", s);\n\tPy_DECREF(s);\n\ts = PyUnicode_FromString(\n\t\t"This module \'#modulename#\' is auto-generated with f2py (version:#f2py_version#).\\nFunctions:\\n"\n#docs#".");\n\tPyDict_SetItemString(d, "__doc__", s);\n\tPy_DECREF(s);\n\ts = PyUnicode_FromString("' + numpy_version + '");\n\tPyDict_SetItemString(d, "__f2py_numpy_version__", s);\n\tPy_DECREF(s);\n\t#modulename#_error = PyErr_NewException ("#modulename#.error", NULL, NULL);\n\t/*\n\t * Store the error object inside the dict, so that it could get deallocated.\n\t * (in practice, this is a module, so it likely will not and cannot.)\n\t */\n\tPyDict_SetItemString(d, "_#modulename#_error", #modulename#_error);\n\tPy_DECREF(#modulename#_error);\n\tfor(i=0;f2py_routine_defs[i].name!=NULL;i++) {\n\t\ttmp = PyFortranObject_NewAsAttr(&f2py_routine_defs[i]);\n\t\tPyDict_SetItemString(d, f2py_routine_defs[i].name, tmp);\n\t\tPy_DECREF(tmp);\n\t}\n#initf2pywraphooks#\n#initf90modhooks#\n#initcommonhooks#\n#interface_usercode#\n\n#ifdef F2PY_REPORT_ATEXIT\n\tif (! PyErr_Occurred())\n\t\ton_exit(f2py_report_on_exit,(void*)"#modulename#");\n#endif\n\treturn m;\n}\n#ifdef __cplusplus\n}\n#endif\n', 
     'separatorsfor':{'latexdoc':'\n\n', 
      'restdoc':'\n\n'}, 
     'latexdoc':[
      '\\section{Module \\texttt{#texmodulename#}}\n',
      '#modnote#\n',
      '#latexdoc#'], 
     'restdoc':[
      'Module #modulename#\n================================================================================',
      '\n#restdoc#']}
    defmod_rules = [
     {'body':'/*eof body*/', 
      'method':'/*eof method*/', 
      'externroutines':'/*eof externroutines*/', 
      'routine_defs':'/*eof routine_defs*/', 
      'initf90modhooks':'/*eof initf90modhooks*/', 
      'initf2pywraphooks':'/*eof initf2pywraphooks*/', 
      'initcommonhooks':'/*eof initcommonhooks*/', 
      'latexdoc':'', 
      'restdoc':'', 
      'modnote':{hasnote: '#note#', l_not(hasnote): ''}}]
    routine_rules = {'separatorsfor':sepdict, 
     'body':'\n#begintitle#\nstatic char doc_#apiname#[] = "\\\n#docreturn##name#(#docsignatureshort#)\\n\\nWrapper for ``#name#``.\\\n\\n#docstrsigns#";\n/* #declfortranroutine# */\nstatic PyObject *#apiname#(const PyObject *capi_self,\n                           PyObject *capi_args,\n                           PyObject *capi_keywds,\n                           #functype# (*f2py_func)(#callprotoargument#)) {\n    PyObject * volatile capi_buildvalue = NULL;\n    volatile int f2py_success = 1;\n#decl#\n    static char *capi_kwlist[] = {#kwlist##kwlistopt##kwlistxa#NULL};\n#usercode#\n#routdebugenter#\n#ifdef F2PY_REPORT_ATEXIT\nf2py_start_clock();\n#endif\n    if (!PyArg_ParseTupleAndKeywords(capi_args,capi_keywds,\\\n        "#argformat#|#keyformat##xaformat#:#pyname#",\\\n        capi_kwlist#args_capi##keys_capi##keys_xa#))\n        return NULL;\n#frompyobj#\n/*end of frompyobj*/\n#ifdef F2PY_REPORT_ATEXIT\nf2py_start_call_clock();\n#endif\n#callfortranroutine#\nif (PyErr_Occurred())\n  f2py_success = 0;\n#ifdef F2PY_REPORT_ATEXIT\nf2py_stop_call_clock();\n#endif\n/*end of callfortranroutine*/\n        if (f2py_success) {\n#pyobjfrom#\n/*end of pyobjfrom*/\n        CFUNCSMESS("Building return value.\\n");\n        capi_buildvalue = Py_BuildValue("#returnformat#"#return#);\n/*closepyobjfrom*/\n#closepyobjfrom#\n        } /*if (f2py_success) after callfortranroutine*/\n/*cleanupfrompyobj*/\n#cleanupfrompyobj#\n    if (capi_buildvalue == NULL) {\n#routdebugfailure#\n    } else {\n#routdebugleave#\n    }\n    CFUNCSMESS("Freeing memory.\\n");\n#freemem#\n#ifdef F2PY_REPORT_ATEXIT\nf2py_stop_clock();\n#endif\n    return capi_buildvalue;\n}\n#endtitle#\n', 
     'routine_defs':'#routine_def#', 
     'initf2pywraphooks':'#initf2pywraphook#', 
     'externroutines':'#declfortranroutine#', 
     'doc':'#docreturn##name#(#docsignature#)', 
     'docshort':'#docreturn##name#(#docsignatureshort#)', 
     'docs':'"\t#docreturn##name#(#docsignature#)\\n"\n', 
     'need':[
      'arrayobject.h', 'CFUNCSMESS', 'MINMAX'], 
     'cppmacros':{debugcapi: '#define DEBUGCFUNCS'}, 
     'latexdoc':[
      '\\subsection{Wrapper function \\texttt{#texname#}}\n',
      '\n\\noindent{{}\\verb@#docreturn##name#@{}}\\texttt{(#latexdocsignatureshort#)}\n#routnote#\n\n#latexdocstrsigns#\n'], 
     'restdoc':[
      'Wrapped function ``#name#``\n--------------------------------------------------------------------------------']}
    rout_rules = [
     {'separatorsfor':{'callfortranroutine':'\n', 
       'routdebugenter':'\n',  'decl':'\n',  'routdebugleave':'\n', 
       'routdebugfailure':'\n',  'setjmpbuf':' || ', 
       'docstrreq':'\n', 
       'docstropt':'\n',  'docstrout':'\n',  'docstrcbs':'\n', 
       'docstrsigns':'\\n"\n"',  'latexdocstrsigns':'\n', 
       'latexdocstrreq':'\n', 
       'latexdocstropt':'\n',  'latexdocstrout':'\n', 
       'latexdocstrcbs':'\n'}, 
      'kwlist':'', 
      'kwlistopt':'',  'callfortran':'',  'callfortranappend':'',  'docsign':'', 
      'docsignopt':'',  'decl':'/*decl*/',  'freemem':'/*freemem*/', 
      'docsignshort':'', 
      'docsignoptshort':'',  'docstrsigns':'', 
      'latexdocstrsigns':'',  'docstrreq':'\\nParameters\\n----------', 
      'docstropt':'\\nOther Parameters\\n----------------', 
      'docstrout':'\\nReturns\\n-------', 
      'docstrcbs':'\\nNotes\\n-----\\nCall-back functions::\\n', 
      'latexdocstrreq':'\\noindent Required arguments:', 
      'latexdocstropt':'\\noindent Optional arguments:', 
      'latexdocstrout':'\\noindent Return objects:', 
      'latexdocstrcbs':'\\noindent Call-back functions:', 
      'args_capi':'', 
      'keys_capi':'',  'functype':'',  'frompyobj':'/*frompyobj*/', 
      'cleanupfrompyobj':[
       '/*end of cleanupfrompyobj*/'], 
      'pyobjfrom':'/*pyobjfrom*/', 
      'closepyobjfrom':[
       '/*end of closepyobjfrom*/'], 
      'topyarr':'/*topyarr*/', 
      'routdebugleave':'/*routdebugleave*/',  'routdebugenter':'/*routdebugenter*/', 
      'routdebugfailure':'/*routdebugfailure*/', 
      'callfortranroutine':'/*callfortranroutine*/', 
      'argformat':'', 
      'keyformat':'',  'need_cfuncs':'',  'docreturn':'', 
      'return':'',  'returnformat':'',  'rformat':'',  'kwlistxa':'', 
      'keys_xa':'',  'xaformat':'',  'docsignxa':'',  'docsignxashort':'',  'initf2pywraphook':'', 
      'routnote':{hasnote: '--- #note#', l_not(hasnote): ''}},
     {'apiname':'f2py_rout_#modulename#_#name#', 
      'pyname':'#modulename#.#name#', 
      'decl':'', 
      '_check':l_not(ismoduleroutine)},
     {'apiname':'f2py_rout_#modulename#_#f90modulename#_#name#', 
      'pyname':'#modulename#.#f90modulename#.#name#', 
      'decl':'', 
      '_check':ismoduleroutine},
     {'functype':'void', 
      'declfortranroutine':{l_and(l_not(l_or(ismoduleroutine, isintent_c)), l_not(isdummyroutine)): 'extern void #F_FUNC#(#fortranname#,#FORTRANNAME#)(#callprotoargument#);', 
       l_and(l_not(ismoduleroutine), isintent_c, l_not(isdummyroutine)): 'extern void #fortranname#(#callprotoargument#);', 
       ismoduleroutine: '', 
       isdummyroutine: ''}, 
      'routine_def':{l_not(l_or(ismoduleroutine, isintent_c, isdummyroutine)): '\t{"#name#",-1,{{-1}},0,(char *)#F_FUNC#(#fortranname#,#FORTRANNAME#),(f2py_init_func)#apiname#,doc_#apiname#},', 
       l_and(l_not(ismoduleroutine), isintent_c, l_not(isdummyroutine)): '\t{"#name#",-1,{{-1}},0,(char *)#fortranname#,(f2py_init_func)#apiname#,doc_#apiname#},', 
       l_and(l_not(ismoduleroutine), isdummyroutine): '\t{"#name#",-1,{{-1}},0,NULL,(f2py_init_func)#apiname#,doc_#apiname#},'}, 
      'need':{l_and(l_not(l_or(ismoduleroutine, isintent_c)), l_not(isdummyroutine)): 'F_FUNC'}, 
      'callfortranroutine':[
       {debugcapi: [
                    '\tfprintf(stderr,"debug-capi:Fortran subroutine `#fortranname#(#callfortran#)\'\\n");']},
       {hasexternals: '\t\tif (#setjmpbuf#) {\n\t\t\tf2py_success = 0;\n\t\t} else {'},
       {isthreadsafe: '\t\t\tPy_BEGIN_ALLOW_THREADS'},
       {hascallstatement: '\t\t\t\t#callstatement#;\n\t\t\t\t/*(*f2py_func)(#callfortran#);*/'},
       {l_not(l_or(hascallstatement, isdummyroutine)): '\t\t\t\t(*f2py_func)(#callfortran#);'},
       {isthreadsafe: '\t\t\tPy_END_ALLOW_THREADS'},
       {hasexternals: '\t\t}'}], 
      '_check':l_and(issubroutine, l_not(issubroutine_wrap))},
     {'functype':'void', 
      'declfortranroutine':{l_not(l_or(ismoduleroutine, isdummyroutine)): 'extern void #F_WRAPPEDFUNC#(#name_lower#,#NAME#)(#callprotoargument#);', 
       isdummyroutine: ''}, 
      'routine_def':{l_not(l_or(ismoduleroutine, isdummyroutine)): '\t{"#name#",-1,{{-1}},0,(char *)#F_WRAPPEDFUNC#(#name_lower#,#NAME#),(f2py_init_func)#apiname#,doc_#apiname#},', 
       isdummyroutine: '\t{"#name#",-1,{{-1}},0,NULL,(f2py_init_func)#apiname#,doc_#apiname#},'}, 
      'initf2pywraphook':{l_not(l_or(ismoduleroutine, isdummyroutine)): '\n    {\n      extern #ctype# #F_FUNC#(#name_lower#,#NAME#)(void);\n      PyObject* o = PyDict_GetItemString(d,"#name#");\n      tmp = F2PyCapsule_FromVoidPtr((void*)#F_FUNC#(#name_lower#,#NAME#),NULL);\n      PyObject_SetAttrString(o,"_cpointer", tmp);\n      Py_DECREF(tmp);\n      s = PyUnicode_FromString("#name#");\n      PyObject_SetAttrString(o,"__name__", s);\n      Py_DECREF(s);\n    }\n    '}, 
      'need':{l_not(l_or(ismoduleroutine, isdummyroutine)): ['F_WRAPPEDFUNC', 'F_FUNC']}, 
      'callfortranroutine':[
       {debugcapi: [
                    '\tfprintf(stderr,"debug-capi:Fortran subroutine `f2pywrap#name_lower#(#callfortran#)\'\\n");']},
       {hasexternals: '\tif (#setjmpbuf#) {\n\t\tf2py_success = 0;\n\t} else {'},
       {isthreadsafe: '\tPy_BEGIN_ALLOW_THREADS'},
       {l_not(l_or(hascallstatement, isdummyroutine)): '\t(*f2py_func)(#callfortran#);'},
       {hascallstatement: '\t#callstatement#;\n\t/*(*f2py_func)(#callfortran#);*/'},
       {isthreadsafe: '\tPy_END_ALLOW_THREADS'},
       {hasexternals: '\t}'}], 
      '_check':isfunction_wrap},
     {'functype':'void', 
      'declfortranroutine':{l_not(l_or(ismoduleroutine, isdummyroutine)): 'extern void #F_WRAPPEDFUNC#(#name_lower#,#NAME#)(#callprotoargument#);', 
       isdummyroutine: ''}, 
      'routine_def':{l_not(l_or(ismoduleroutine, isdummyroutine)): '\t{"#name#",-1,{{-1}},0,(char *)#F_WRAPPEDFUNC#(#name_lower#,#NAME#),(f2py_init_func)#apiname#,doc_#apiname#},', 
       isdummyroutine: '\t{"#name#",-1,{{-1}},0,NULL,(f2py_init_func)#apiname#,doc_#apiname#},'}, 
      'initf2pywraphook':{l_not(l_or(ismoduleroutine, isdummyroutine)): '\n    {\n      extern void #F_FUNC#(#name_lower#,#NAME#)(void);\n      PyObject* o = PyDict_GetItemString(d,"#name#");\n      tmp = F2PyCapsule_FromVoidPtr((void*)#F_FUNC#(#name_lower#,#NAME#),NULL);\n      PyObject_SetAttrString(o,"_cpointer", tmp);\n      Py_DECREF(tmp);\n      s = PyUnicode_FromString("#name#");\n      PyObject_SetAttrString(o,"__name__", s);\n      Py_DECREF(s);\n    }\n    '}, 
      'need':{l_not(l_or(ismoduleroutine, isdummyroutine)): ['F_WRAPPEDFUNC', 'F_FUNC']}, 
      'callfortranroutine':[
       {debugcapi: [
                    '\tfprintf(stderr,"debug-capi:Fortran subroutine `f2pywrap#name_lower#(#callfortran#)\'\\n");']},
       {hasexternals: '\tif (#setjmpbuf#) {\n\t\tf2py_success = 0;\n\t} else {'},
       {isthreadsafe: '\tPy_BEGIN_ALLOW_THREADS'},
       {l_not(l_or(hascallstatement, isdummyroutine)): '\t(*f2py_func)(#callfortran#);'},
       {hascallstatement: '\t#callstatement#;\n\t/*(*f2py_func)(#callfortran#);*/'},
       {isthreadsafe: '\tPy_END_ALLOW_THREADS'},
       {hasexternals: '\t}'}], 
      '_check':issubroutine_wrap},
     {'functype':'#ctype#', 
      'docreturn':{l_not(isintent_hide): '#rname#,'}, 
      'docstrout':'#pydocsignout#', 
      'latexdocstrout':[
       '\\item[]{{}\\verb@#pydocsignout#@{}}',
       {hasresultnote: '--- #resultnote#'}], 
      'callfortranroutine':[
       {l_and(debugcapi, isstringfunction): '#ifdef USESCOMPAQFORTRAN\n\tfprintf(stderr,"debug-capi:Fortran function #ctype# #fortranname#(#callcompaqfortran#)\\n");\n#else\n\tfprintf(stderr,"debug-capi:Fortran function #ctype# #fortranname#(#callfortran#)\\n");\n#endif\n'},
       {l_and(debugcapi, l_not(isstringfunction)): '\tfprintf(stderr,"debug-capi:Fortran function #ctype# #fortranname#(#callfortran#)\\n");\n'}], 
      '_check':l_and(isfunction, l_not(isfunction_wrap))},
     {'declfortranroutine':{l_and(l_not(l_or(ismoduleroutine, isintent_c)), l_not(isdummyroutine)): 'extern #ctype# #F_FUNC#(#fortranname#,#FORTRANNAME#)(#callprotoargument#);', 
       l_and(l_not(ismoduleroutine), isintent_c, l_not(isdummyroutine)): 'extern #ctype# #fortranname#(#callprotoargument#);', 
       isdummyroutine: ''}, 
      'routine_def':{l_and(l_not(l_or(ismoduleroutine, isintent_c)), l_not(isdummyroutine)): '\t{"#name#",-1,{{-1}},0,(char *)#F_FUNC#(#fortranname#,#FORTRANNAME#),(f2py_init_func)#apiname#,doc_#apiname#},', 
       l_and(l_not(ismoduleroutine), isintent_c, l_not(isdummyroutine)): '\t{"#name#",-1,{{-1}},0,(char *)#fortranname#,(f2py_init_func)#apiname#,doc_#apiname#},', 
       isdummyroutine: '\t{"#name#",-1,{{-1}},0,NULL,(f2py_init_func)#apiname#,doc_#apiname#},'}, 
      'decl':[
       {iscomplexfunction_warn: '\t#ctype# #name#_return_value={0,0};', 
        l_not(iscomplexfunction): '\t#ctype# #name#_return_value=0;'},
       {iscomplexfunction: '\tPyObject *#name#_return_value_capi = Py_None;'}], 
      'callfortranroutine':[
       {hasexternals: '\tif (#setjmpbuf#) {\n\t\tf2py_success = 0;\n\t} else {'},
       {isthreadsafe: '\tPy_BEGIN_ALLOW_THREADS'},
       {hascallstatement: '\t#callstatement#;\n/*\t#name#_return_value = (*f2py_func)(#callfortran#);*/\n'},
       {l_not(l_or(hascallstatement, isdummyroutine)): '\t#name#_return_value = (*f2py_func)(#callfortran#);'},
       {isthreadsafe: '\tPy_END_ALLOW_THREADS'},
       {hasexternals: '\t}'},
       {l_and(debugcapi, iscomplexfunction): '\tfprintf(stderr,"#routdebugshowvalue#\\n",#name#_return_value.r,#name#_return_value.i);'},
       {l_and(debugcapi, l_not(iscomplexfunction)): '\tfprintf(stderr,"#routdebugshowvalue#\\n",#name#_return_value);'}], 
      'pyobjfrom':{iscomplexfunction: '\t#name#_return_value_capi = pyobj_from_#ctype#1(#name#_return_value);'}, 
      'need':[
       {l_not(isdummyroutine): 'F_FUNC'},
       {iscomplexfunction: 'pyobj_from_#ctype#1'},
       {islong_longfunction: 'long_long'},
       {islong_doublefunction: 'long_double'}], 
      'returnformat':{l_not(isintent_hide): '#rformat#'}, 
      'return':{iscomplexfunction: ',#name#_return_value_capi', 
       l_not(l_or(iscomplexfunction, isintent_hide)): ',#name#_return_value'}, 
      '_check':l_and(isfunction, l_not(isstringfunction), l_not(isfunction_wrap))},
     {'declfortranroutine':'extern void #F_FUNC#(#fortranname#,#FORTRANNAME#)(#callprotoargument#);', 
      'routine_def':{l_not(l_or(ismoduleroutine, isintent_c)): '\t{"#name#",-1,{{-1}},0,(char *)#F_FUNC#(#fortranname#,#FORTRANNAME#),(f2py_init_func)#apiname#,doc_#apiname#},', 
       
       l_and(l_not(ismoduleroutine), isintent_c): '\t{"#name#",-1,{{-1}},0,(char *)#fortranname#,(f2py_init_func)#apiname#,doc_#apiname#},'}, 
      'decl':[
       '\t#ctype# #name#_return_value = NULL;',
       '\tint #name#_return_value_len = 0;'], 
      'callfortran':'#name#_return_value,#name#_return_value_len,', 
      'callfortranroutine':[
       '\t#name#_return_value_len = #rlength#;',
       '\tif ((#name#_return_value = (string)malloc(sizeof(char)*(#name#_return_value_len+1))) == NULL) {',
       '\t\tPyErr_SetString(PyExc_MemoryError, "out of memory");',
       '\t\tf2py_success = 0;',
       '\t} else {',
       "\t\t(#name#_return_value)[#name#_return_value_len] = '\\0';",
       '\t}',
       '\tif (f2py_success) {',
       {hasexternals: '\t\tif (#setjmpbuf#) {\n\t\t\tf2py_success = 0;\n\t\t} else {'},
       {isthreadsafe: '\t\tPy_BEGIN_ALLOW_THREADS'},
       '#ifdef USESCOMPAQFORTRAN\n\t\t(*f2py_func)(#callcompaqfortran#);\n#else\n\t\t(*f2py_func)(#callfortran#);\n#endif\n',
       {isthreadsafe: '\t\tPy_END_ALLOW_THREADS'},
       {hasexternals: '\t\t}'},
       {debugcapi: '\t\tfprintf(stderr,"#routdebugshowvalue#\\n",#name#_return_value_len,#name#_return_value);'},
       '\t} /* if (f2py_success) after (string)malloc */'], 
      'returnformat':'#rformat#', 
      'return':',#name#_return_value', 
      'freemem':'\tSTRINGFREE(#name#_return_value);', 
      'need':[
       'F_FUNC', '#ctype#', 'STRINGFREE'], 
      '_check':l_and(isstringfunction, l_not(isfunction_wrap))},
     {'routdebugenter':'\tfprintf(stderr,"debug-capi:Python C/API function #modulename#.#name#(#docsignature#)\\n");', 
      'routdebugleave':'\tfprintf(stderr,"debug-capi:Python C/API function #modulename#.#name#: successful.\\n");', 
      'routdebugfailure':'\tfprintf(stderr,"debug-capi:Python C/API function #modulename#.#name#: failure.\\n");', 
      '_check':debugcapi}]
    typedef_need_dict = {islong_long: 'long_long', 
     islong_double: 'long_double', 
     islong_complex: 'complex_long_double', 
     isunsigned_char: 'unsigned_char', 
     isunsigned_short: 'unsigned_short', 
     isunsigned: 'unsigned', 
     isunsigned_long_long: 'unsigned_long_long', 
     isunsigned_chararray: 'unsigned_char', 
     isunsigned_shortarray: 'unsigned_short', 
     isunsigned_long_longarray: 'unsigned_long_long', 
     issigned_long_longarray: 'long_long'}
    aux_rules = [
     {'separatorsfor': sepdict},
     {'frompyobj':[
       '\t/* Processing auxiliary variable #varname# */',
       {debugcapi: '\tfprintf(stderr,"#vardebuginfo#\\n");'}], 
      'cleanupfrompyobj':'\t/* End of cleaning variable #varname# */', 
      'need':typedef_need_dict},
     {'decl':'\t#ctype# #varname# = 0;', 
      'need':{hasinitvalue: 'math.h'}, 
      'frompyobj':{hasinitvalue: '\t#varname# = #init#;'}, 
      '_check':l_and(isscalar, l_not(iscomplex))},
     {'return':',#varname#', 
      'docstrout':'#pydocsignout#', 
      'docreturn':'#outvarname#,', 
      'returnformat':'#varrformat#', 
      '_check':l_and(isscalar, l_not(iscomplex), isintent_out)},
     {'decl':'\t#ctype# #varname#;', 
      'frompyobj':{hasinitvalue: '\t#varname#.r = #init.r#, #varname#.i = #init.i#;'}, 
      '_check':iscomplex},
     {'decl':[
       '\t#ctype# #varname# = NULL;',
       '\tint slen(#varname#);'], 
      'need':[
       'len..'], 
      '_check':isstring},
     {'decl':[
       '\t#ctype# *#varname# = NULL;',
       '\tnpy_intp #varname#_Dims[#rank#] = {#rank*[-1]#};',
       '\tconst int #varname#_Rank = #rank#;'], 
      'need':[
       'len..', {hasinitvalue: 'forcomb'}, {hasinitvalue: 'CFUNCSMESS'}], 
      '_check':isarray},
     {'_check': l_and(isarray, l_not(iscomplexarray))},
     {'_check': l_and(isarray, l_not(iscomplexarray), isintent_nothide)},
     {'need':'#ctype#', 
      '_check':isint1array, 
      '_depend':''},
     {'need':'#ctype#', 
      '_check':isunsigned_chararray, 
      '_depend':''},
     {'need':'#ctype#', 
      '_check':isunsigned_shortarray, 
      '_depend':''},
     {'need':'#ctype#', 
      '_check':isunsigned_long_longarray, 
      '_depend':''},
     {'need':'#ctype#', 
      '_check':iscomplexarray, 
      '_depend':''},
     {'callfortranappend':{isarrayofstrings: 'flen(#varname#),'}, 
      'need':'string', 
      '_check':isstringarray}]
    arg_rules = [
     {'separatorsfor': sepdict},
     {'frompyobj':[
       '\t/* Processing variable #varname# */',
       {debugcapi: '\tfprintf(stderr,"#vardebuginfo#\\n");'}], 
      'cleanupfrompyobj':'\t/* End of cleaning variable #varname# */', 
      '_depend':'', 
      'need':typedef_need_dict},
     {'docstropt':{l_and(isoptional, isintent_nothide): '#pydocsign#'}, 
      'docstrreq':{l_and(isrequired, isintent_nothide): '#pydocsign#'}, 
      'docstrout':{isintent_out: '#pydocsignout#'}, 
      'latexdocstropt':{l_and(isoptional, isintent_nothide): ['\\item[]{{}\\verb@#pydocsign#@{}}',
                                             {hasnote: '--- #note#'}]}, 
      'latexdocstrreq':{l_and(isrequired, isintent_nothide): ['\\item[]{{}\\verb@#pydocsign#@{}}',
                                             {hasnote: '--- #note#'}]}, 
      'latexdocstrout':{isintent_out: ['\\item[]{{}\\verb@#pydocsignout#@{}}',
                      {l_and(hasnote, isintent_hide): '--- #note#', 
                       l_and(hasnote, isintent_nothide): '--- See above.'}]}, 
      'depend':''},
     {'kwlist':'"#varname#",', 
      'docsign':'#varname#,', 
      '_check':l_and(isintent_nothide, l_not(isoptional))},
     {'kwlistopt':'"#varname#",', 
      'docsignopt':'#varname#=#showinit#,', 
      'docsignoptshort':'#varname#,', 
      '_check':l_and(isintent_nothide, isoptional)},
     {'docreturn':'#outvarname#,', 
      'returnformat':'#varrformat#', 
      '_check':isintent_out},
     {'docsignxa':{isintent_nothide: '#varname#_extra_args=(),'}, 
      'docsignxashort':{isintent_nothide: '#varname#_extra_args,'}, 
      'docstropt':{isintent_nothide: '#varname#_extra_args : input tuple, optional\\n    Default: ()'}, 
      'docstrcbs':'#cbdocstr#', 
      'latexdocstrcbs':'\\item[] #cblatexdocstr#', 
      'latexdocstropt':{isintent_nothide: '\\item[]{{}\\verb@#varname#_extra_args := () input tuple@{}} --- Extra arguments for call-back function {{}\\verb@#varname#@{}}.'}, 
      'decl':[
       '    #cbname#_t #varname#_cb = { Py_None, NULL, 0 };',
       '    #cbname#_t *#varname#_cb_ptr = &#varname#_cb;',
       '    PyTupleObject *#varname#_xa_capi = NULL;',
       {l_not(isintent_callback): '    #cbname#_typedef #varname#_cptr;'}], 
      'kwlistxa':{isintent_nothide: '"#varname#_extra_args",'}, 
      'argformat':{isrequired: 'O'}, 
      'keyformat':{isoptional: 'O'}, 
      'xaformat':{isintent_nothide: 'O!'}, 
      'args_capi':{isrequired: ',&#varname#_cb.capi'}, 
      'keys_capi':{isoptional: ',&#varname#_cb.capi'}, 
      'keys_xa':',&PyTuple_Type,&#varname#_xa_capi', 
      'setjmpbuf':'(setjmp(#varname#_cb.jmpbuf))', 
      'callfortran':{l_not(isintent_callback): '#varname#_cptr,'}, 
      'need':[
       '#cbname#', 'setjmp.h'], 
      '_check':isexternal},
     {'frompyobj':[
       {l_not(isintent_callback): 'if(F2PyCapsule_Check(#varname#_cb.capi)) {\n  #varname#_cptr = F2PyCapsule_AsVoidPtr(#varname#_cb.capi);\n} else {\n  #varname#_cptr = #cbname#;\n}\n'},
       {isintent_callback: 'if (#varname#_cb.capi==Py_None) {\n  #varname#_cb.capi = PyObject_GetAttrString(#modulename#_module,"#varname#");\n  if (#varname#_cb.capi) {\n    if (#varname#_xa_capi==NULL) {\n      if (PyObject_HasAttrString(#modulename#_module,"#varname#_extra_args")) {\n        PyObject* capi_tmp = PyObject_GetAttrString(#modulename#_module,"#varname#_extra_args");\n        if (capi_tmp) {\n          #varname#_xa_capi = (PyTupleObject *)PySequence_Tuple(capi_tmp);\n          Py_DECREF(capi_tmp);\n        }\n        else {\n          #varname#_xa_capi = (PyTupleObject *)Py_BuildValue("()");\n        }\n        if (#varname#_xa_capi==NULL) {\n          PyErr_SetString(#modulename#_error,"Failed to convert #modulename#.#varname#_extra_args to tuple.\\n");\n          return NULL;\n        }\n      }\n    }\n  }\n  if (#varname#_cb.capi==NULL) {\n    PyErr_SetString(#modulename#_error,"Callback #varname# not defined (as an argument or module #modulename# attribute).\\n");\n    return NULL;\n  }\n}\n'},
       '    if (create_cb_arglist(#varname#_cb.capi,#varname#_xa_capi,#maxnofargs#,#nofoptargs#,&#varname#_cb.nofargs,&#varname#_cb.args_capi,"failed in processing argument list for call-back #varname#.")) {\n',
       {debugcapi: ['        fprintf(stderr,"debug-capi:Assuming %d arguments; at most #maxnofargs#(-#nofoptargs#) is expected.\\n",#varname#_cb.nofargs);\n        CFUNCSMESSPY("for #varname#=",#varname#_cb.capi);',
                    {l_not(isintent_callback): '        fprintf(stderr,"#vardebugshowvalue# (call-back in C).\\n",#cbname#);'}]},
       '        CFUNCSMESS("Saving callback variables for `#varname#`.\\n");\n        #varname#_cb_ptr = swap_active_#cbname#(#varname#_cb_ptr);'], 
      'cleanupfrompyobj':'        CFUNCSMESS("Restoring callback variables for `#varname#`.\\n");\n        #varname#_cb_ptr = swap_active_#cbname#(#varname#_cb_ptr);\n        Py_DECREF(#varname#_cb.args_capi);\n    }', 
      'need':[
       'SWAP', 'create_cb_arglist'], 
      '_check':isexternal, 
      '_depend':''},
     {'decl':'\t#ctype# #varname# = 0;', 
      'pyobjfrom':{debugcapi: '\tfprintf(stderr,"#vardebugshowvalue#\\n",#varname#);'}, 
      'callfortran':{isintent_c: '#varname#,', l_not(isintent_c): '&#varname#,'}, 
      'return':{isintent_out: ',#varname#'}, 
      '_check':l_and(isscalar, l_not(iscomplex))},
     {'need':{hasinitvalue: 'math.h'}, 
      '_check':l_and(isscalar, l_not(iscomplex))},
     {'decl':'\tPyObject *#varname#_capi = Py_None;', 
      'argformat':{isrequired: 'O'}, 
      'keyformat':{isoptional: 'O'}, 
      'args_capi':{isrequired: ',&#varname#_capi'}, 
      'keys_capi':{isoptional: ',&#varname#_capi'}, 
      'pyobjfrom':{isintent_inout: '\tf2py_success = try_pyarr_from_#ctype#(#varname#_capi,&#varname#);\n\tif (f2py_success) {'}, 
      'closepyobjfrom':{isintent_inout: '\t} /*if (f2py_success) of #varname# pyobjfrom*/'}, 
      'need':{isintent_inout: 'try_pyarr_from_#ctype#'}, 
      '_check':l_and(isscalar, l_not(iscomplex), isintent_nothide)},
     {'frompyobj':[
       {hasinitvalue: '\tif (#varname#_capi == Py_None) #varname# = #init#; else', 
        '_depend': ''},
       {l_and(isoptional, l_not(hasinitvalue)): '\tif (#varname#_capi != Py_None)', 
        '_depend': ''},
       {l_not(islogical): '\t\tf2py_success = #ctype#_from_pyobj(&#varname#,#varname#_capi,"#pyname#() #nth# (#varname#) can\'t be converted to #ctype#");\n\tif (f2py_success) {'},
       {islogical: '\t\t#varname# = (#ctype#)PyObject_IsTrue(#varname#_capi);\n\t\tf2py_success = 1;\n\tif (f2py_success) {'}], 
      'cleanupfrompyobj':'\t} /*if (f2py_success) of #varname#*/', 
      'need':{l_not(islogical): '#ctype#_from_pyobj'}, 
      '_check':l_and(isscalar, l_not(iscomplex), isintent_nothide), 
      '_depend':''},
     {'frompyobj':{hasinitvalue: '\t#varname# = #init#;'}, 
      'need':typedef_need_dict, 
      '_check':l_and(isscalar, l_not(iscomplex), isintent_hide), 
      '_depend':''},
     {'frompyobj':{debugcapi: '\tfprintf(stderr,"#vardebugshowvalue#\\n",#varname#);'}, 
      '_check':l_and(isscalar, l_not(iscomplex)), 
      '_depend':''},
     {'decl':'\t#ctype# #varname#;', 
      'callfortran':{isintent_c: '#varname#,', l_not(isintent_c): '&#varname#,'}, 
      'pyobjfrom':{debugcapi: '\tfprintf(stderr,"#vardebugshowvalue#\\n",#varname#.r,#varname#.i);'}, 
      'return':{isintent_out: ',#varname#_capi'}, 
      '_check':iscomplex},
     {'decl':'\tPyObject *#varname#_capi = Py_None;', 
      'argformat':{isrequired: 'O'}, 
      'keyformat':{isoptional: 'O'}, 
      'args_capi':{isrequired: ',&#varname#_capi'}, 
      'keys_capi':{isoptional: ',&#varname#_capi'}, 
      'need':{isintent_inout: 'try_pyarr_from_#ctype#'}, 
      'pyobjfrom':{isintent_inout: '\t\tf2py_success = try_pyarr_from_#ctype#(#varname#_capi,&#varname#);\n\t\tif (f2py_success) {'}, 
      'closepyobjfrom':{isintent_inout: '\t\t} /*if (f2py_success) of #varname# pyobjfrom*/'}, 
      '_check':l_and(iscomplex, isintent_nothide)},
     {'frompyobj':[
       {hasinitvalue: '\tif (#varname#_capi==Py_None) {#varname#.r = #init.r#, #varname#.i = #init.i#;} else'},
       {l_and(isoptional, l_not(hasinitvalue)): '\tif (#varname#_capi != Py_None)'},
       '\t\tf2py_success = #ctype#_from_pyobj(&#varname#,#varname#_capi,"#pyname#() #nth# (#varname#) can\'t be converted to #ctype#");\n\tif (f2py_success) {'], 
      'cleanupfrompyobj':'\t}  /*if (f2py_success) of #varname# frompyobj*/', 
      'need':[
       '#ctype#_from_pyobj'], 
      '_check':l_and(iscomplex, isintent_nothide), 
      '_depend':''},
     {'decl':{isintent_out: '\tPyObject *#varname#_capi = Py_None;'}, 
      '_check':l_and(iscomplex, isintent_hide)},
     {'frompyobj':{hasinitvalue: '\t#varname#.r = #init.r#, #varname#.i = #init.i#;'}, 
      '_check':l_and(iscomplex, isintent_hide), 
      '_depend':''},
     {'pyobjfrom':{isintent_out: '\t#varname#_capi = pyobj_from_#ctype#1(#varname#);'}, 
      'need':[
       'pyobj_from_#ctype#1'], 
      '_check':iscomplex},
     {'frompyobj':{debugcapi: '\tfprintf(stderr,"#vardebugshowvalue#\\n",#varname#.r,#varname#.i);'}, 
      '_check':iscomplex, 
      '_depend':''},
     {'decl':[
       '\t#ctype# #varname# = NULL;',
       '\tint slen(#varname#);',
       '\tPyObject *#varname#_capi = Py_None;'], 
      'callfortran':'#varname#,', 
      'callfortranappend':'slen(#varname#),', 
      'pyobjfrom':{debugcapi: '\tfprintf(stderr,"#vardebugshowvalue#\\n",slen(#varname#),#varname#);'}, 
      'return':{isintent_out: ',#varname#'}, 
      'need':[
       'len..'], 
      '_check':isstring},
     {'frompyobj':'\tslen(#varname#) = #length#;\n\tf2py_success = #ctype#_from_pyobj(&#varname#,&slen(#varname#),#init#,#varname#_capi,"#ctype#_from_pyobj failed in converting #nth# `#varname#\' of #pyname# to C #ctype#");\n\tif (f2py_success) {', 
      'cleanupfrompyobj':'\t\tSTRINGFREE(#varname#);\n\t}  /*if (f2py_success) of #varname#*/', 
      'need':[
       '#ctype#_from_pyobj', 'len..', 'STRINGFREE'], 
      '_check':isstring, 
      '_depend':''},
     {'argformat':{isrequired: 'O'}, 
      'keyformat':{isoptional: 'O'}, 
      'args_capi':{isrequired: ',&#varname#_capi'}, 
      'keys_capi':{isoptional: ',&#varname#_capi'}, 
      'pyobjfrom':{isintent_inout: '\tf2py_success = try_pyarr_from_#ctype#(#varname#_capi,#varname#);\n\tif (f2py_success) {'}, 
      'closepyobjfrom':{isintent_inout: '\t} /*if (f2py_success) of #varname# pyobjfrom*/'}, 
      'need':{isintent_inout: 'try_pyarr_from_#ctype#'}, 
      '_check':l_and(isstring, isintent_nothide)},
     {'_check': l_and(isstring, isintent_hide)},
     {'frompyobj':{debugcapi: '\tfprintf(stderr,"#vardebugshowvalue#\\n",slen(#varname#),#varname#);'}, 
      '_check':isstring, 
      '_depend':''},
     {'decl':[
       '\t#ctype# *#varname# = NULL;',
       '\tnpy_intp #varname#_Dims[#rank#] = {#rank*[-1]#};',
       '\tconst int #varname#_Rank = #rank#;',
       '\tPyArrayObject *capi_#varname#_tmp = NULL;',
       '\tint capi_#varname#_intent = 0;'], 
      'callfortran':'#varname#,', 
      'return':{isintent_out: ',capi_#varname#_tmp'}, 
      'need':'len..', 
      '_check':isarray},
     {'decl':'\tint capi_overwrite_#varname# = 1;', 
      'kwlistxa':'"overwrite_#varname#",', 
      'xaformat':'i', 
      'keys_xa':',&capi_overwrite_#varname#', 
      'docsignxa':'overwrite_#varname#=1,', 
      'docsignxashort':'overwrite_#varname#,', 
      'docstropt':'overwrite_#varname# : input int, optional\\n    Default: 1', 
      '_check':l_and(isarray, isintent_overwrite)},
     {'frompyobj':'\tcapi_#varname#_intent |= (capi_overwrite_#varname#?0:F2PY_INTENT_COPY);', 
      '_check':l_and(isarray, isintent_overwrite), 
      '_depend':''},
     {'decl':'\tint capi_overwrite_#varname# = 0;', 
      'kwlistxa':'"overwrite_#varname#",', 
      'xaformat':'i', 
      'keys_xa':',&capi_overwrite_#varname#', 
      'docsignxa':'overwrite_#varname#=0,', 
      'docsignxashort':'overwrite_#varname#,', 
      'docstropt':'overwrite_#varname# : input int, optional\\n    Default: 0', 
      '_check':l_and(isarray, isintent_copy)},
     {'frompyobj':'\tcapi_#varname#_intent |= (capi_overwrite_#varname#?0:F2PY_INTENT_COPY);', 
      '_check':l_and(isarray, isintent_copy), 
      '_depend':''},
     {'need':[
       {hasinitvalue: 'forcomb'}, {hasinitvalue: 'CFUNCSMESS'}], 
      '_check':isarray, 
      '_depend':''},
     {'decl':'\tPyObject *#varname#_capi = Py_None;', 
      'argformat':{isrequired: 'O'}, 
      'keyformat':{isoptional: 'O'}, 
      'args_capi':{isrequired: ',&#varname#_capi'}, 
      'keys_capi':{isoptional: ',&#varname#_capi'}, 
      '_check':l_and(isarray, isintent_nothide)},
     {'frompyobj':[
       '\t#setdims#;',
       '\tcapi_#varname#_intent |= #intent#;',
       {isintent_hide: '\tcapi_#varname#_tmp = array_from_pyobj(#atype#,#varname#_Dims,#varname#_Rank,capi_#varname#_intent,Py_None);'},
       {isintent_nothide: '\tcapi_#varname#_tmp = array_from_pyobj(#atype#,#varname#_Dims,#varname#_Rank,capi_#varname#_intent,#varname#_capi);'},
       '\tif (capi_#varname#_tmp == NULL) {\n\t\tPyObject *exc, *val, *tb;\n\t\tPyErr_Fetch(&exc, &val, &tb);\n\t\tPyErr_SetString(exc ? exc : #modulename#_error,"failed in converting #nth# `#varname#\' of #pyname# to C/Fortran array" );\n\t\tnpy_PyErr_ChainExceptionsCause(exc, val, tb);\n\t} else {\n\t\t#varname# = (#ctype# *)(PyArray_DATA(capi_#varname#_tmp));\n',
       {hasinitvalue: [
                       {isintent_nothide: '\tif (#varname#_capi == Py_None) {'},
                       {isintent_hide: '\t{'},
                       {iscomplexarray: '\t\t#ctype# capi_c;'},
                       '\t\tint *_i,capi_i=0;\n\t\tCFUNCSMESS("#name#: Initializing #varname#=#init#\\n");\n\t\tif (initforcomb(PyArray_DIMS(capi_#varname#_tmp),PyArray_NDIM(capi_#varname#_tmp),1)) {\n\t\t\twhile ((_i = nextforcomb()))\n\t\t\t\t#varname#[capi_i++] = #init#; /* fortran way */\n\t\t} else {\n\t\t\tPyObject *exc, *val, *tb;\n\t\t\tPyErr_Fetch(&exc, &val, &tb);\n\t\t\tPyErr_SetString(exc ? exc : #modulename#_error,"Initialization of #nth# #varname# failed (initforcomb).");\n\t\t\tnpy_PyErr_ChainExceptionsCause(exc, val, tb);\n\t\t\tf2py_success = 0;\n\t\t}\n\t}\n\tif (f2py_success) {']}], 
      'cleanupfrompyobj':[
       '\t}  /*if (capi_#varname#_tmp == NULL) ... else of #varname#*/',
       {l_not(l_or(isintent_out, isintent_hide)): '\tif((PyObject *)capi_#varname#_tmp!=#varname#_capi) {\n\t\tPy_XDECREF(capi_#varname#_tmp); }'},
       {l_and(isintent_hide, l_not(isintent_out)): '\t\tPy_XDECREF(capi_#varname#_tmp);'},
       {hasinitvalue: '\t}  /*if (f2py_success) of #varname# init*/'}], 
      '_check':isarray, 
      '_depend':''},
     {'_check': l_and(isarray, l_not(iscomplexarray))},
     {'_check': l_and(isarray, l_not(iscomplexarray), isintent_nothide)},
     {'need':'#ctype#', 
      '_check':isint1array, 
      '_depend':''},
     {'need':'#ctype#', 
      '_check':isunsigned_chararray, 
      '_depend':''},
     {'need':'#ctype#', 
      '_check':isunsigned_shortarray, 
      '_depend':''},
     {'need':'#ctype#', 
      '_check':isunsigned_long_longarray, 
      '_depend':''},
     {'need':'#ctype#', 
      '_check':iscomplexarray, 
      '_depend':''},
     {'callfortranappend':{isarrayofstrings: 'flen(#varname#),'}, 
      'need':'string', 
      '_check':isstringarray}]
    check_rules = [
     {'frompyobj':{debugcapi: '\tfprintf(stderr,"debug-capi:Checking `#check#\'\\n");'}, 
      'need':'len..'},
     {'frompyobj':'\tCHECKSCALAR(#check#,"#check#","#nth# #varname#","#varshowvalue#",#varname#) {', 
      'cleanupfrompyobj':'\t} /*CHECKSCALAR(#check#)*/', 
      'need':'CHECKSCALAR', 
      '_check':l_and(isscalar, l_not(iscomplex)), 
      '_break':''},
     {'frompyobj':'\tCHECKSTRING(#check#,"#check#","#nth# #varname#","#varshowvalue#",#varname#) {', 
      'cleanupfrompyobj':'\t} /*CHECKSTRING(#check#)*/', 
      'need':'CHECKSTRING', 
      '_check':isstring, 
      '_break':''},
     {'need':'CHECKARRAY', 
      'frompyobj':'\tCHECKARRAY(#check#,"#check#","#nth# #varname#") {', 
      'cleanupfrompyobj':'\t} /*CHECKARRAY(#check#)*/', 
      '_check':isarray, 
      '_break':''},
     {'need':'CHECKGENERIC', 
      'frompyobj':'\tCHECKGENERIC(#check#,"#check#","#nth# #varname#") {', 
      'cleanupfrompyobj':'\t} /*CHECKGENERIC(#check#)*/'}]

    def buildmodule--- This code section failed: ---

 L.1156         0  LOAD_GLOBAL              outmess
                2  LOAD_STR                 '\tBuilding module "%s"...\n'
                4  LOAD_FAST                'm'
                6  LOAD_STR                 'name'
                8  BINARY_SUBSCR    
               10  BINARY_MODULO    
               12  CALL_FUNCTION_1       1  ''
               14  POP_TOP          

 L.1157        16  BUILD_MAP_0           0 
               18  STORE_FAST               'ret'

 L.1158        20  LOAD_GLOBAL              defmod_rules
               22  LOAD_CONST               None
               24  LOAD_CONST               None
               26  BUILD_SLICE_2         2 
               28  BINARY_SUBSCR    
               30  STORE_FAST               'mod_rules'

 L.1159        32  LOAD_GLOBAL              capi_maps
               34  LOAD_METHOD              modsign2map
               36  LOAD_FAST                'm'
               38  CALL_METHOD_1         1  ''
               40  STORE_FAST               'vrd'

 L.1160        42  LOAD_GLOBAL              dictappend
               44  LOAD_STR                 'f2py_version'
               46  LOAD_GLOBAL              f2py_version
               48  BUILD_MAP_1           1 
               50  LOAD_FAST                'vrd'
               52  CALL_FUNCTION_2       2  ''
               54  STORE_FAST               'rd'

 L.1161        56  BUILD_LIST_0          0 
               58  STORE_FAST               'funcwrappers'

 L.1162        60  BUILD_LIST_0          0 
               62  STORE_FAST               'funcwrappers2'

 L.1163        64  LOAD_FAST                'm'
               66  LOAD_STR                 'interfaced'
               68  BINARY_SUBSCR    
               70  GET_ITER         
            72_74  FOR_ITER            334  'to 334'
               76  STORE_FAST               'n'

 L.1164        78  LOAD_CONST               None
               80  STORE_FAST               'nb'

 L.1165        82  LOAD_FAST                'm'
               84  LOAD_STR                 'body'
               86  BINARY_SUBSCR    
               88  GET_ITER         
               90  FOR_ITER            152  'to 152'
               92  STORE_FAST               'bi'

 L.1166        94  LOAD_FAST                'bi'
               96  LOAD_STR                 'block'
               98  BINARY_SUBSCR    
              100  LOAD_STR                 'interface'
              102  COMPARE_OP               ==
              104  POP_JUMP_IF_TRUE    116  'to 116'

 L.1167       106  LOAD_GLOBAL              errmess
              108  LOAD_STR                 'buildmodule: Expected interface block. Skipping.\n'
              110  CALL_FUNCTION_1       1  ''
              112  POP_TOP          

 L.1168       114  JUMP_BACK            90  'to 90'
            116_0  COME_FROM           104  '104'

 L.1169       116  LOAD_FAST                'bi'
              118  LOAD_STR                 'body'
              120  BINARY_SUBSCR    
              122  GET_ITER         
            124_0  COME_FROM           138  '138'
              124  FOR_ITER            150  'to 150'
              126  STORE_FAST               'b'

 L.1170       128  LOAD_FAST                'b'
              130  LOAD_STR                 'name'
              132  BINARY_SUBSCR    
              134  LOAD_FAST                'n'
              136  COMPARE_OP               ==
              138  POP_JUMP_IF_FALSE   124  'to 124'

 L.1171       140  LOAD_FAST                'b'
              142  STORE_FAST               'nb'

 L.1172       144  POP_TOP          
              146  CONTINUE             90  'to 90'
              148  JUMP_BACK           124  'to 124'
              150  JUMP_BACK            90  'to 90'

 L.1174       152  LOAD_FAST                'nb'
              154  POP_JUMP_IF_TRUE    170  'to 170'

 L.1175       156  LOAD_GLOBAL              errmess

 L.1176       158  LOAD_STR                 'buildmodule: Could not found the body of interfaced routine "%s". Skipping.\n'
              160  LOAD_FAST                'n'
              162  BINARY_MODULO    

 L.1175       164  CALL_FUNCTION_1       1  ''
              166  POP_TOP          

 L.1177       168  JUMP_BACK            72  'to 72'
            170_0  COME_FROM           154  '154'

 L.1178       170  LOAD_FAST                'nb'
              172  BUILD_LIST_1          1 
              174  STORE_FAST               'nb_list'

 L.1179       176  LOAD_STR                 'entry'
              178  LOAD_FAST                'nb'
              180  COMPARE_OP               in
              182  POP_JUMP_IF_FALSE   248  'to 248'

 L.1180       184  LOAD_FAST                'nb'
              186  LOAD_STR                 'entry'
              188  BINARY_SUBSCR    
              190  LOAD_METHOD              items
              192  CALL_METHOD_0         0  ''
              194  GET_ITER         
              196  FOR_ITER            248  'to 248'
              198  UNPACK_SEQUENCE_2     2 
              200  STORE_FAST               'k'
              202  STORE_FAST               'a'

 L.1181       204  LOAD_GLOBAL              copy
              206  LOAD_METHOD              deepcopy
              208  LOAD_FAST                'nb'
              210  CALL_METHOD_1         1  ''
              212  STORE_FAST               'nb1'

 L.1182       214  LOAD_FAST                'nb1'
              216  LOAD_STR                 'entry'
              218  DELETE_SUBSCR    

 L.1183       220  LOAD_FAST                'k'
              222  LOAD_FAST                'nb1'
              224  LOAD_STR                 'name'
              226  STORE_SUBSCR     

 L.1184       228  LOAD_FAST                'a'
              230  LOAD_FAST                'nb1'
              232  LOAD_STR                 'args'
              234  STORE_SUBSCR     

 L.1185       236  LOAD_FAST                'nb_list'
              238  LOAD_METHOD              append
              240  LOAD_FAST                'nb1'
              242  CALL_METHOD_1         1  ''
              244  POP_TOP          
              246  JUMP_BACK           196  'to 196'
            248_0  COME_FROM           182  '182'

 L.1186       248  LOAD_FAST                'nb_list'
              250  GET_ITER         
              252  FOR_ITER            332  'to 332'
              254  STORE_FAST               'nb'

 L.1189       256  LOAD_GLOBAL              requiresf90wrapper
              258  LOAD_FAST                'nb'
              260  CALL_FUNCTION_1       1  ''
              262  STORE_FAST               'isf90'

 L.1190       264  LOAD_GLOBAL              buildapi
              266  LOAD_FAST                'nb'
              268  CALL_FUNCTION_1       1  ''
              270  UNPACK_SEQUENCE_2     2 
              272  STORE_FAST               'api'
              274  STORE_FAST               'wrap'

 L.1191       276  LOAD_FAST                'wrap'
          278_280  POP_JUMP_IF_FALSE   310  'to 310'

 L.1192       282  LOAD_FAST                'isf90'
          284_286  POP_JUMP_IF_FALSE   300  'to 300'

 L.1193       288  LOAD_FAST                'funcwrappers2'
              290  LOAD_METHOD              append
              292  LOAD_FAST                'wrap'
              294  CALL_METHOD_1         1  ''
              296  POP_TOP          
              298  JUMP_FORWARD        310  'to 310'
            300_0  COME_FROM           284  '284'

 L.1195       300  LOAD_FAST                'funcwrappers'
              302  LOAD_METHOD              append
              304  LOAD_FAST                'wrap'
              306  CALL_METHOD_1         1  ''
              308  POP_TOP          
            310_0  COME_FROM           298  '298'
            310_1  COME_FROM           278  '278'

 L.1196       310  LOAD_GLOBAL              applyrules
              312  LOAD_FAST                'api'
              314  LOAD_FAST                'vrd'
              316  CALL_FUNCTION_2       2  ''
              318  STORE_FAST               'ar'

 L.1197       320  LOAD_GLOBAL              dictappend
              322  LOAD_FAST                'rd'
              324  LOAD_FAST                'ar'
              326  CALL_FUNCTION_2       2  ''
              328  STORE_FAST               'rd'
              330  JUMP_BACK           252  'to 252'
              332  JUMP_BACK            72  'to 72'

 L.1200       334  LOAD_GLOBAL              common_rules
              336  LOAD_METHOD              buildhooks
              338  LOAD_FAST                'm'
              340  CALL_METHOD_1         1  ''
              342  UNPACK_SEQUENCE_2     2 
              344  STORE_FAST               'cr'
              346  STORE_FAST               'wrap'

 L.1201       348  LOAD_FAST                'wrap'
          350_352  POP_JUMP_IF_FALSE   364  'to 364'

 L.1202       354  LOAD_FAST                'funcwrappers'
              356  LOAD_METHOD              append
              358  LOAD_FAST                'wrap'
              360  CALL_METHOD_1         1  ''
              362  POP_TOP          
            364_0  COME_FROM           350  '350'

 L.1203       364  LOAD_GLOBAL              applyrules
              366  LOAD_FAST                'cr'
              368  LOAD_FAST                'vrd'
              370  CALL_FUNCTION_2       2  ''
              372  STORE_FAST               'ar'

 L.1204       374  LOAD_GLOBAL              dictappend
              376  LOAD_FAST                'rd'
              378  LOAD_FAST                'ar'
              380  CALL_FUNCTION_2       2  ''
              382  STORE_FAST               'rd'

 L.1207       384  LOAD_GLOBAL              f90mod_rules
              386  LOAD_METHOD              buildhooks
              388  LOAD_FAST                'm'
              390  CALL_METHOD_1         1  ''
              392  UNPACK_SEQUENCE_2     2 
              394  STORE_FAST               'mr'
              396  STORE_FAST               'wrap'

 L.1208       398  LOAD_FAST                'wrap'
          400_402  POP_JUMP_IF_FALSE   414  'to 414'

 L.1209       404  LOAD_FAST                'funcwrappers2'
              406  LOAD_METHOD              append
              408  LOAD_FAST                'wrap'
              410  CALL_METHOD_1         1  ''
              412  POP_TOP          
            414_0  COME_FROM           400  '400'

 L.1210       414  LOAD_GLOBAL              applyrules
              416  LOAD_FAST                'mr'
              418  LOAD_FAST                'vrd'
              420  CALL_FUNCTION_2       2  ''
              422  STORE_FAST               'ar'

 L.1211       424  LOAD_GLOBAL              dictappend
              426  LOAD_FAST                'rd'
              428  LOAD_FAST                'ar'
              430  CALL_FUNCTION_2       2  ''
              432  STORE_FAST               'rd'

 L.1213       434  LOAD_FAST                'um'
              436  GET_ITER         
              438  FOR_ITER            480  'to 480'
              440  STORE_FAST               'u'

 L.1214       442  LOAD_GLOBAL              use_rules
              444  LOAD_METHOD              buildusevars
              446  LOAD_FAST                'u'
              448  LOAD_FAST                'm'
              450  LOAD_STR                 'use'
              452  BINARY_SUBSCR    
              454  LOAD_FAST                'u'
              456  LOAD_STR                 'name'
              458  BINARY_SUBSCR    
              460  BINARY_SUBSCR    
              462  CALL_METHOD_2         2  ''
              464  STORE_FAST               'ar'

 L.1215       466  LOAD_GLOBAL              dictappend
              468  LOAD_FAST                'rd'
              470  LOAD_FAST                'ar'
              472  CALL_FUNCTION_2       2  ''
              474  STORE_FAST               'rd'
          476_478  JUMP_BACK           438  'to 438'

 L.1217       480  LOAD_GLOBAL              cfuncs
              482  LOAD_METHOD              get_needs
              484  CALL_METHOD_0         0  ''
              486  STORE_FAST               'needs'

 L.1218       488  BUILD_MAP_0           0 
              490  STORE_FAST               'code'

 L.1219       492  LOAD_FAST                'needs'
              494  LOAD_METHOD              keys
              496  CALL_METHOD_0         0  ''
              498  GET_ITER         
          500_502  FOR_ITER            814  'to 814'
              504  STORE_FAST               'n'

 L.1220       506  BUILD_LIST_0          0 
              508  LOAD_FAST                'code'
              510  LOAD_FAST                'n'
              512  STORE_SUBSCR     

 L.1221       514  LOAD_FAST                'needs'
              516  LOAD_FAST                'n'
              518  BINARY_SUBSCR    
              520  GET_ITER         
          522_524  FOR_ITER            810  'to 810'
              526  STORE_FAST               'k'

 L.1222       528  LOAD_STR                 ''
              530  STORE_FAST               'c'

 L.1223       532  LOAD_FAST                'k'
              534  LOAD_GLOBAL              cfuncs
              536  LOAD_ATTR                includes0
              538  COMPARE_OP               in
          540_542  POP_JUMP_IF_FALSE   556  'to 556'

 L.1224       544  LOAD_GLOBAL              cfuncs
              546  LOAD_ATTR                includes0
              548  LOAD_FAST                'k'
              550  BINARY_SUBSCR    
              552  STORE_FAST               'c'
              554  JUMP_FORWARD        792  'to 792'
            556_0  COME_FROM           540  '540'

 L.1225       556  LOAD_FAST                'k'
              558  LOAD_GLOBAL              cfuncs
              560  LOAD_ATTR                includes
              562  COMPARE_OP               in
          564_566  POP_JUMP_IF_FALSE   580  'to 580'

 L.1226       568  LOAD_GLOBAL              cfuncs
              570  LOAD_ATTR                includes
              572  LOAD_FAST                'k'
              574  BINARY_SUBSCR    
              576  STORE_FAST               'c'
              578  JUMP_FORWARD        792  'to 792'
            580_0  COME_FROM           564  '564'

 L.1227       580  LOAD_FAST                'k'
              582  LOAD_GLOBAL              cfuncs
              584  LOAD_ATTR                userincludes
              586  COMPARE_OP               in
          588_590  POP_JUMP_IF_FALSE   604  'to 604'

 L.1228       592  LOAD_GLOBAL              cfuncs
              594  LOAD_ATTR                userincludes
              596  LOAD_FAST                'k'
              598  BINARY_SUBSCR    
              600  STORE_FAST               'c'
              602  JUMP_FORWARD        792  'to 792'
            604_0  COME_FROM           588  '588'

 L.1229       604  LOAD_FAST                'k'
              606  LOAD_GLOBAL              cfuncs
              608  LOAD_ATTR                typedefs
              610  COMPARE_OP               in
          612_614  POP_JUMP_IF_FALSE   628  'to 628'

 L.1230       616  LOAD_GLOBAL              cfuncs
              618  LOAD_ATTR                typedefs
              620  LOAD_FAST                'k'
              622  BINARY_SUBSCR    
              624  STORE_FAST               'c'
              626  JUMP_FORWARD        792  'to 792'
            628_0  COME_FROM           612  '612'

 L.1231       628  LOAD_FAST                'k'
              630  LOAD_GLOBAL              cfuncs
              632  LOAD_ATTR                typedefs_generated
              634  COMPARE_OP               in
          636_638  POP_JUMP_IF_FALSE   652  'to 652'

 L.1232       640  LOAD_GLOBAL              cfuncs
              642  LOAD_ATTR                typedefs_generated
              644  LOAD_FAST                'k'
              646  BINARY_SUBSCR    
              648  STORE_FAST               'c'
              650  JUMP_FORWARD        792  'to 792'
            652_0  COME_FROM           636  '636'

 L.1233       652  LOAD_FAST                'k'
              654  LOAD_GLOBAL              cfuncs
              656  LOAD_ATTR                cppmacros
              658  COMPARE_OP               in
          660_662  POP_JUMP_IF_FALSE   676  'to 676'

 L.1234       664  LOAD_GLOBAL              cfuncs
              666  LOAD_ATTR                cppmacros
              668  LOAD_FAST                'k'
              670  BINARY_SUBSCR    
              672  STORE_FAST               'c'
              674  JUMP_FORWARD        792  'to 792'
            676_0  COME_FROM           660  '660'

 L.1235       676  LOAD_FAST                'k'
              678  LOAD_GLOBAL              cfuncs
              680  LOAD_ATTR                cfuncs
              682  COMPARE_OP               in
          684_686  POP_JUMP_IF_FALSE   700  'to 700'

 L.1236       688  LOAD_GLOBAL              cfuncs
              690  LOAD_ATTR                cfuncs
              692  LOAD_FAST                'k'
              694  BINARY_SUBSCR    
              696  STORE_FAST               'c'
              698  JUMP_FORWARD        792  'to 792'
            700_0  COME_FROM           684  '684'

 L.1237       700  LOAD_FAST                'k'
              702  LOAD_GLOBAL              cfuncs
              704  LOAD_ATTR                callbacks
              706  COMPARE_OP               in
          708_710  POP_JUMP_IF_FALSE   724  'to 724'

 L.1238       712  LOAD_GLOBAL              cfuncs
              714  LOAD_ATTR                callbacks
              716  LOAD_FAST                'k'
              718  BINARY_SUBSCR    
              720  STORE_FAST               'c'
              722  JUMP_FORWARD        792  'to 792'
            724_0  COME_FROM           708  '708'

 L.1239       724  LOAD_FAST                'k'
              726  LOAD_GLOBAL              cfuncs
              728  LOAD_ATTR                f90modhooks
              730  COMPARE_OP               in
          732_734  POP_JUMP_IF_FALSE   748  'to 748'

 L.1240       736  LOAD_GLOBAL              cfuncs
              738  LOAD_ATTR                f90modhooks
              740  LOAD_FAST                'k'
              742  BINARY_SUBSCR    
              744  STORE_FAST               'c'
              746  JUMP_FORWARD        792  'to 792'
            748_0  COME_FROM           732  '732'

 L.1241       748  LOAD_FAST                'k'
              750  LOAD_GLOBAL              cfuncs
              752  LOAD_ATTR                commonhooks
              754  COMPARE_OP               in
          756_758  POP_JUMP_IF_FALSE   772  'to 772'

 L.1242       760  LOAD_GLOBAL              cfuncs
              762  LOAD_ATTR                commonhooks
              764  LOAD_FAST                'k'
              766  BINARY_SUBSCR    
              768  STORE_FAST               'c'
              770  JUMP_FORWARD        792  'to 792'
            772_0  COME_FROM           756  '756'

 L.1244       772  LOAD_GLOBAL              errmess
              774  LOAD_STR                 'buildmodule: unknown need %s.\n'
              776  LOAD_GLOBAL              repr
              778  LOAD_FAST                'k'
              780  CALL_FUNCTION_1       1  ''
              782  BINARY_MODULO    
              784  CALL_FUNCTION_1       1  ''
              786  POP_TOP          

 L.1245   788_790  JUMP_BACK           522  'to 522'
            792_0  COME_FROM           770  '770'
            792_1  COME_FROM           746  '746'
            792_2  COME_FROM           722  '722'
            792_3  COME_FROM           698  '698'
            792_4  COME_FROM           674  '674'
            792_5  COME_FROM           650  '650'
            792_6  COME_FROM           626  '626'
            792_7  COME_FROM           602  '602'
            792_8  COME_FROM           578  '578'
            792_9  COME_FROM           554  '554'

 L.1246       792  LOAD_FAST                'code'
              794  LOAD_FAST                'n'
              796  BINARY_SUBSCR    
              798  LOAD_METHOD              append
              800  LOAD_FAST                'c'
              802  CALL_METHOD_1         1  ''
              804  POP_TOP          
          806_808  JUMP_BACK           522  'to 522'
          810_812  JUMP_BACK           500  'to 500'

 L.1247       814  LOAD_FAST                'mod_rules'
              816  LOAD_METHOD              append
              818  LOAD_FAST                'code'
              820  CALL_METHOD_1         1  ''
              822  POP_TOP          

 L.1248       824  LOAD_FAST                'mod_rules'
              826  GET_ITER         
            828_0  COME_FROM           862  '862'
              828  FOR_ITER            892  'to 892'
              830  STORE_FAST               'r'

 L.1249       832  LOAD_STR                 '_check'
              834  LOAD_FAST                'r'
              836  COMPARE_OP               in
          838_840  POP_JUMP_IF_FALSE   856  'to 856'
              842  LOAD_FAST                'r'
              844  LOAD_STR                 '_check'
              846  BINARY_SUBSCR    
              848  LOAD_FAST                'm'
              850  CALL_FUNCTION_1       1  ''
          852_854  POP_JUMP_IF_TRUE    866  'to 866'
            856_0  COME_FROM           838  '838'
              856  LOAD_STR                 '_check'
              858  LOAD_FAST                'r'
              860  COMPARE_OP               not-in
          862_864  POP_JUMP_IF_FALSE   828  'to 828'
            866_0  COME_FROM           852  '852'

 L.1250       866  LOAD_GLOBAL              applyrules
              868  LOAD_FAST                'r'
              870  LOAD_FAST                'vrd'
              872  LOAD_FAST                'm'
              874  CALL_FUNCTION_3       3  ''
              876  STORE_FAST               'ar'

 L.1251       878  LOAD_GLOBAL              dictappend
              880  LOAD_FAST                'rd'
              882  LOAD_FAST                'ar'
              884  CALL_FUNCTION_2       2  ''
              886  STORE_FAST               'rd'
          888_890  JUMP_BACK           828  'to 828'

 L.1252       892  LOAD_GLOBAL              applyrules
              894  LOAD_GLOBAL              module_rules
              896  LOAD_FAST                'rd'
              898  CALL_FUNCTION_2       2  ''
              900  STORE_FAST               'ar'

 L.1254       902  LOAD_GLOBAL              os
              904  LOAD_ATTR                path
              906  LOAD_METHOD              join
              908  LOAD_GLOBAL              options
              910  LOAD_STR                 'buildpath'
              912  BINARY_SUBSCR    
              914  LOAD_FAST                'vrd'
              916  LOAD_STR                 'coutput'
              918  BINARY_SUBSCR    
              920  CALL_METHOD_2         2  ''
              922  STORE_FAST               'fn'

 L.1255       924  LOAD_FAST                'fn'
              926  LOAD_FAST                'ret'
              928  LOAD_STR                 'csrc'
              930  STORE_SUBSCR     

 L.1256       932  LOAD_GLOBAL              open
              934  LOAD_FAST                'fn'
              936  LOAD_STR                 'w'
              938  CALL_FUNCTION_2       2  ''
              940  SETUP_WITH          970  'to 970'
              942  STORE_FAST               'f'

 L.1257       944  LOAD_FAST                'f'
              946  LOAD_METHOD              write
              948  LOAD_FAST                'ar'
              950  LOAD_STR                 'modulebody'
              952  BINARY_SUBSCR    
              954  LOAD_METHOD              replace
              956  LOAD_STR                 '\t'
              958  LOAD_STR                 '  '
              960  CALL_METHOD_2         2  ''
              962  CALL_METHOD_1         1  ''
              964  POP_TOP          
              966  POP_BLOCK        
              968  BEGIN_FINALLY    
            970_0  COME_FROM_WITH      940  '940'
              970  WITH_CLEANUP_START
              972  WITH_CLEANUP_FINISH
              974  END_FINALLY      

 L.1258       976  LOAD_GLOBAL              outmess
              978  LOAD_STR                 '\tWrote C/API module "%s" to file "%s"\n'
              980  LOAD_FAST                'm'
              982  LOAD_STR                 'name'
              984  BINARY_SUBSCR    
              986  LOAD_FAST                'fn'
              988  BUILD_TUPLE_2         2 
              990  BINARY_MODULO    
              992  CALL_FUNCTION_1       1  ''
              994  POP_TOP          

 L.1260       996  LOAD_GLOBAL              options
              998  LOAD_STR                 'dorestdoc'
             1000  BINARY_SUBSCR    
         1002_1004  POP_JUMP_IF_FALSE  1108  'to 1108'

 L.1261      1006  LOAD_GLOBAL              os
             1008  LOAD_ATTR                path
             1010  LOAD_METHOD              join

 L.1262      1012  LOAD_GLOBAL              options
             1014  LOAD_STR                 'buildpath'
             1016  BINARY_SUBSCR    

 L.1262      1018  LOAD_FAST                'vrd'
             1020  LOAD_STR                 'modulename'
             1022  BINARY_SUBSCR    
             1024  LOAD_STR                 'module.rest'
             1026  BINARY_ADD       

 L.1261      1028  CALL_METHOD_2         2  ''
             1030  STORE_FAST               'fn'

 L.1263      1032  LOAD_GLOBAL              open
             1034  LOAD_FAST                'fn'
             1036  LOAD_STR                 'w'
             1038  CALL_FUNCTION_2       2  ''
             1040  SETUP_WITH         1078  'to 1078'
             1042  STORE_FAST               'f'

 L.1264      1044  LOAD_FAST                'f'
             1046  LOAD_METHOD              write
             1048  LOAD_STR                 '.. -*- rest -*-\n'
             1050  CALL_METHOD_1         1  ''
             1052  POP_TOP          

 L.1265      1054  LOAD_FAST                'f'
             1056  LOAD_METHOD              write
             1058  LOAD_STR                 '\n'
             1060  LOAD_METHOD              join
             1062  LOAD_FAST                'ar'
             1064  LOAD_STR                 'restdoc'
             1066  BINARY_SUBSCR    
             1068  CALL_METHOD_1         1  ''
             1070  CALL_METHOD_1         1  ''
             1072  POP_TOP          
             1074  POP_BLOCK        
             1076  BEGIN_FINALLY    
           1078_0  COME_FROM_WITH     1040  '1040'
             1078  WITH_CLEANUP_START
             1080  WITH_CLEANUP_FINISH
             1082  END_FINALLY      

 L.1266      1084  LOAD_GLOBAL              outmess
             1086  LOAD_STR                 '\tReST Documentation is saved to file "%s/%smodule.rest"\n'

 L.1267      1088  LOAD_GLOBAL              options
             1090  LOAD_STR                 'buildpath'
             1092  BINARY_SUBSCR    
             1094  LOAD_FAST                'vrd'
             1096  LOAD_STR                 'modulename'
             1098  BINARY_SUBSCR    
             1100  BUILD_TUPLE_2         2 

 L.1266      1102  BINARY_MODULO    
             1104  CALL_FUNCTION_1       1  ''
             1106  POP_TOP          
           1108_0  COME_FROM          1002  '1002'

 L.1268      1108  LOAD_GLOBAL              options
             1110  LOAD_STR                 'dolatexdoc'
             1112  BINARY_SUBSCR    
         1114_1116  POP_JUMP_IF_FALSE  1272  'to 1272'

 L.1269      1118  LOAD_GLOBAL              os
             1120  LOAD_ATTR                path
             1122  LOAD_METHOD              join

 L.1270      1124  LOAD_GLOBAL              options
             1126  LOAD_STR                 'buildpath'
             1128  BINARY_SUBSCR    

 L.1270      1130  LOAD_FAST                'vrd'
             1132  LOAD_STR                 'modulename'
             1134  BINARY_SUBSCR    
             1136  LOAD_STR                 'module.tex'
             1138  BINARY_ADD       

 L.1269      1140  CALL_METHOD_2         2  ''
             1142  STORE_FAST               'fn'

 L.1271      1144  LOAD_FAST                'fn'
             1146  LOAD_FAST                'ret'
             1148  LOAD_STR                 'ltx'
             1150  STORE_SUBSCR     

 L.1272      1152  LOAD_GLOBAL              open
             1154  LOAD_FAST                'fn'
             1156  LOAD_STR                 'w'
             1158  CALL_FUNCTION_2       2  ''
             1160  SETUP_WITH         1242  'to 1242'
             1162  STORE_FAST               'f'

 L.1273      1164  LOAD_FAST                'f'
             1166  LOAD_METHOD              write

 L.1274      1168  LOAD_STR                 '%% This file is auto-generated with f2py (version:%s)\n'
             1170  LOAD_GLOBAL              f2py_version
             1172  BINARY_MODULO    

 L.1273      1174  CALL_METHOD_1         1  ''
             1176  POP_TOP          

 L.1275      1178  LOAD_STR                 'shortlatex'
             1180  LOAD_GLOBAL              options
             1182  COMPARE_OP               not-in
         1184_1186  POP_JUMP_IF_FALSE  1218  'to 1218'

 L.1276      1188  LOAD_FAST                'f'
             1190  LOAD_METHOD              write

 L.1277      1192  LOAD_STR                 '\\documentclass{article}\n\\usepackage{a4wide}\n\\begin{document}\n\\tableofcontents\n\n'

 L.1276      1194  CALL_METHOD_1         1  ''
             1196  POP_TOP          

 L.1278      1198  LOAD_FAST                'f'
             1200  LOAD_METHOD              write
             1202  LOAD_STR                 '\n'
             1204  LOAD_METHOD              join
             1206  LOAD_FAST                'ar'
             1208  LOAD_STR                 'latexdoc'
             1210  BINARY_SUBSCR    
             1212  CALL_METHOD_1         1  ''
             1214  CALL_METHOD_1         1  ''
             1216  POP_TOP          
           1218_0  COME_FROM          1184  '1184'

 L.1279      1218  LOAD_STR                 'shortlatex'
             1220  LOAD_GLOBAL              options
             1222  COMPARE_OP               not-in
         1224_1226  POP_JUMP_IF_FALSE  1238  'to 1238'

 L.1280      1228  LOAD_FAST                'f'
             1230  LOAD_METHOD              write
             1232  LOAD_STR                 '\\end{document}'
             1234  CALL_METHOD_1         1  ''
             1236  POP_TOP          
           1238_0  COME_FROM          1224  '1224'
             1238  POP_BLOCK        
             1240  BEGIN_FINALLY    
           1242_0  COME_FROM_WITH     1160  '1160'
             1242  WITH_CLEANUP_START
             1244  WITH_CLEANUP_FINISH
             1246  END_FINALLY      

 L.1281      1248  LOAD_GLOBAL              outmess
             1250  LOAD_STR                 '\tDocumentation is saved to file "%s/%smodule.tex"\n'

 L.1282      1252  LOAD_GLOBAL              options
             1254  LOAD_STR                 'buildpath'
             1256  BINARY_SUBSCR    
             1258  LOAD_FAST                'vrd'
             1260  LOAD_STR                 'modulename'
             1262  BINARY_SUBSCR    
             1264  BUILD_TUPLE_2         2 

 L.1281      1266  BINARY_MODULO    
             1268  CALL_FUNCTION_1       1  ''
             1270  POP_TOP          
           1272_0  COME_FROM          1114  '1114'

 L.1283      1272  LOAD_FAST                'funcwrappers'
         1274_1276  POP_JUMP_IF_FALSE  1588  'to 1588'

 L.1284      1278  LOAD_GLOBAL              os
             1280  LOAD_ATTR                path
             1282  LOAD_METHOD              join
             1284  LOAD_GLOBAL              options
             1286  LOAD_STR                 'buildpath'
             1288  BINARY_SUBSCR    
             1290  LOAD_FAST                'vrd'
             1292  LOAD_STR                 'f2py_wrapper_output'
             1294  BINARY_SUBSCR    
             1296  CALL_METHOD_2         2  ''
             1298  STORE_FAST               'wn'

 L.1285      1300  LOAD_FAST                'wn'
             1302  LOAD_FAST                'ret'
             1304  LOAD_STR                 'fsrc'
             1306  STORE_SUBSCR     

 L.1286      1308  LOAD_GLOBAL              open
             1310  LOAD_FAST                'wn'
             1312  LOAD_STR                 'w'
             1314  CALL_FUNCTION_2       2  ''
             1316  SETUP_WITH         1570  'to 1570'
             1318  STORE_FAST               'f'

 L.1287      1320  LOAD_FAST                'f'
             1322  LOAD_METHOD              write
             1324  LOAD_STR                 'C     -*- fortran -*-\n'
             1326  CALL_METHOD_1         1  ''
             1328  POP_TOP          

 L.1288      1330  LOAD_FAST                'f'
             1332  LOAD_METHOD              write

 L.1289      1334  LOAD_STR                 'C     This file is autogenerated with f2py (version:%s)\n'
             1336  LOAD_GLOBAL              f2py_version
             1338  BINARY_MODULO    

 L.1288      1340  CALL_METHOD_1         1  ''
             1342  POP_TOP          

 L.1290      1344  LOAD_FAST                'f'
             1346  LOAD_METHOD              write

 L.1291      1348  LOAD_STR                 'C     It contains Fortran 77 wrappers to fortran functions.\n'

 L.1290      1350  CALL_METHOD_1         1  ''
             1352  POP_TOP          

 L.1292      1354  BUILD_LIST_0          0 
             1356  STORE_FAST               'lines'

 L.1293      1358  LOAD_STR                 '\n\n'
             1360  LOAD_METHOD              join
             1362  LOAD_FAST                'funcwrappers'
             1364  CALL_METHOD_1         1  ''
             1366  LOAD_STR                 '\n'
             1368  BINARY_ADD       
             1370  LOAD_METHOD              split
             1372  LOAD_STR                 '\n'
             1374  CALL_METHOD_1         1  ''
             1376  GET_ITER         
             1378  FOR_ITER           1538  'to 1538'
             1380  STORE_FAST               'l'

 L.1294      1382  LOAD_CONST               0
             1384  LOAD_FAST                'l'
             1386  LOAD_METHOD              find
             1388  LOAD_STR                 '!'
             1390  CALL_METHOD_1         1  ''
             1392  DUP_TOP          
             1394  ROT_THREE        
             1396  COMPARE_OP               <=
         1398_1400  POP_JUMP_IF_FALSE  1412  'to 1412'
             1402  LOAD_CONST               66
             1404  COMPARE_OP               <
         1406_1408  POP_JUMP_IF_FALSE  1432  'to 1432'
             1410  JUMP_FORWARD       1416  'to 1416'
           1412_0  COME_FROM          1398  '1398'
             1412  POP_TOP          
             1414  JUMP_FORWARD       1432  'to 1432'
           1416_0  COME_FROM          1410  '1410'

 L.1296      1416  LOAD_FAST                'lines'
             1418  LOAD_METHOD              append
             1420  LOAD_FAST                'l'
             1422  LOAD_STR                 '\n'
             1424  BINARY_ADD       
             1426  CALL_METHOD_1         1  ''
             1428  POP_TOP          
             1430  JUMP_BACK          1378  'to 1378'
           1432_0  COME_FROM          1414  '1414'
           1432_1  COME_FROM          1406  '1406'

 L.1297      1432  LOAD_FAST                'l'
         1434_1436  POP_JUMP_IF_FALSE  1520  'to 1520'
             1438  LOAD_FAST                'l'
             1440  LOAD_CONST               0
             1442  BINARY_SUBSCR    
             1444  LOAD_STR                 ' '
             1446  COMPARE_OP               ==
         1448_1450  POP_JUMP_IF_FALSE  1520  'to 1520'

 L.1298      1452  LOAD_GLOBAL              len
             1454  LOAD_FAST                'l'
             1456  CALL_FUNCTION_1       1  ''
             1458  LOAD_CONST               66
             1460  COMPARE_OP               >=
         1462_1464  POP_JUMP_IF_FALSE  1504  'to 1504'

 L.1299      1466  LOAD_FAST                'lines'
             1468  LOAD_METHOD              append
             1470  LOAD_FAST                'l'
             1472  LOAD_CONST               None
             1474  LOAD_CONST               66
             1476  BUILD_SLICE_2         2 
             1478  BINARY_SUBSCR    
             1480  LOAD_STR                 '\n     &'
             1482  BINARY_ADD       
             1484  CALL_METHOD_1         1  ''
             1486  POP_TOP          

 L.1300      1488  LOAD_FAST                'l'
             1490  LOAD_CONST               66
             1492  LOAD_CONST               None
             1494  BUILD_SLICE_2         2 
             1496  BINARY_SUBSCR    
             1498  STORE_FAST               'l'
         1500_1502  JUMP_BACK          1452  'to 1452'
           1504_0  COME_FROM          1462  '1462'

 L.1301      1504  LOAD_FAST                'lines'
             1506  LOAD_METHOD              append
             1508  LOAD_FAST                'l'
             1510  LOAD_STR                 '\n'
             1512  BINARY_ADD       
             1514  CALL_METHOD_1         1  ''
             1516  POP_TOP          
             1518  JUMP_BACK          1378  'to 1378'
           1520_0  COME_FROM          1448  '1448'
           1520_1  COME_FROM          1434  '1434'

 L.1303      1520  LOAD_FAST                'lines'
             1522  LOAD_METHOD              append
             1524  LOAD_FAST                'l'
             1526  LOAD_STR                 '\n'
             1528  BINARY_ADD       
             1530  CALL_METHOD_1         1  ''
             1532  POP_TOP          
         1534_1536  JUMP_BACK          1378  'to 1378'

 L.1304      1538  LOAD_STR                 ''
             1540  LOAD_METHOD              join
             1542  LOAD_FAST                'lines'
             1544  CALL_METHOD_1         1  ''
             1546  LOAD_METHOD              replace
             1548  LOAD_STR                 '\n     &\n'
             1550  LOAD_STR                 '\n'
             1552  CALL_METHOD_2         2  ''
             1554  STORE_FAST               'lines'

 L.1305      1556  LOAD_FAST                'f'
             1558  LOAD_METHOD              write
             1560  LOAD_FAST                'lines'
             1562  CALL_METHOD_1         1  ''
             1564  POP_TOP          
             1566  POP_BLOCK        
             1568  BEGIN_FINALLY    
           1570_0  COME_FROM_WITH     1316  '1316'
             1570  WITH_CLEANUP_START
             1572  WITH_CLEANUP_FINISH
             1574  END_FINALLY      

 L.1306      1576  LOAD_GLOBAL              outmess
             1578  LOAD_STR                 '\tFortran 77 wrappers are saved to "%s"\n'
             1580  LOAD_FAST                'wn'
             1582  BINARY_MODULO    
             1584  CALL_FUNCTION_1       1  ''
             1586  POP_TOP          
           1588_0  COME_FROM          1274  '1274'

 L.1307      1588  LOAD_FAST                'funcwrappers2'
         1590_1592  POP_JUMP_IF_FALSE  1952  'to 1952'

 L.1308      1594  LOAD_GLOBAL              os
             1596  LOAD_ATTR                path
             1598  LOAD_METHOD              join

 L.1309      1600  LOAD_GLOBAL              options
             1602  LOAD_STR                 'buildpath'
             1604  BINARY_SUBSCR    

 L.1309      1606  LOAD_STR                 '%s-f2pywrappers2.f90'
             1608  LOAD_FAST                'vrd'
             1610  LOAD_STR                 'modulename'
             1612  BINARY_SUBSCR    
             1614  BINARY_MODULO    

 L.1308      1616  CALL_METHOD_2         2  ''
             1618  STORE_FAST               'wn'

 L.1310      1620  LOAD_FAST                'wn'
             1622  LOAD_FAST                'ret'
             1624  LOAD_STR                 'fsrc'
             1626  STORE_SUBSCR     

 L.1311      1628  LOAD_GLOBAL              open
             1630  LOAD_FAST                'wn'
             1632  LOAD_STR                 'w'
             1634  CALL_FUNCTION_2       2  ''
         1636_1638  SETUP_WITH         1934  'to 1934'
             1640  STORE_FAST               'f'

 L.1312      1642  LOAD_FAST                'f'
             1644  LOAD_METHOD              write
             1646  LOAD_STR                 '!     -*- f90 -*-\n'
             1648  CALL_METHOD_1         1  ''
             1650  POP_TOP          

 L.1313      1652  LOAD_FAST                'f'
             1654  LOAD_METHOD              write

 L.1314      1656  LOAD_STR                 '!     This file is autogenerated with f2py (version:%s)\n'
             1658  LOAD_GLOBAL              f2py_version
             1660  BINARY_MODULO    

 L.1313      1662  CALL_METHOD_1         1  ''
             1664  POP_TOP          

 L.1315      1666  LOAD_FAST                'f'
             1668  LOAD_METHOD              write

 L.1316      1670  LOAD_STR                 '!     It contains Fortran 90 wrappers to fortran functions.\n'

 L.1315      1672  CALL_METHOD_1         1  ''
             1674  POP_TOP          

 L.1317      1676  BUILD_LIST_0          0 
             1678  STORE_FAST               'lines'

 L.1318      1680  LOAD_STR                 '\n\n'
             1682  LOAD_METHOD              join
             1684  LOAD_FAST                'funcwrappers2'
             1686  CALL_METHOD_1         1  ''
             1688  LOAD_STR                 '\n'
             1690  BINARY_ADD       
             1692  LOAD_METHOD              split
             1694  LOAD_STR                 '\n'
             1696  CALL_METHOD_1         1  ''
             1698  GET_ITER         
             1700  FOR_ITER           1902  'to 1902'
             1702  STORE_FAST               'l'

 L.1319      1704  LOAD_CONST               0
             1706  LOAD_FAST                'l'
             1708  LOAD_METHOD              find
             1710  LOAD_STR                 '!'
             1712  CALL_METHOD_1         1  ''
             1714  DUP_TOP          
             1716  ROT_THREE        
             1718  COMPARE_OP               <=
         1720_1722  POP_JUMP_IF_FALSE  1734  'to 1734'
             1724  LOAD_CONST               72
             1726  COMPARE_OP               <
         1728_1730  POP_JUMP_IF_FALSE  1754  'to 1754'
             1732  JUMP_FORWARD       1738  'to 1738'
           1734_0  COME_FROM          1720  '1720'
             1734  POP_TOP          
             1736  JUMP_FORWARD       1754  'to 1754'
           1738_0  COME_FROM          1732  '1732'

 L.1321      1738  LOAD_FAST                'lines'
             1740  LOAD_METHOD              append
             1742  LOAD_FAST                'l'
             1744  LOAD_STR                 '\n'
             1746  BINARY_ADD       
             1748  CALL_METHOD_1         1  ''
             1750  POP_TOP          
             1752  JUMP_BACK          1700  'to 1700'
           1754_0  COME_FROM          1736  '1736'
           1754_1  COME_FROM          1728  '1728'

 L.1322      1754  LOAD_GLOBAL              len
             1756  LOAD_FAST                'l'
             1758  CALL_FUNCTION_1       1  ''
             1760  LOAD_CONST               72
             1762  COMPARE_OP               >
         1764_1766  POP_JUMP_IF_FALSE  1884  'to 1884'
             1768  LOAD_FAST                'l'
             1770  LOAD_CONST               0
             1772  BINARY_SUBSCR    
             1774  LOAD_STR                 ' '
             1776  COMPARE_OP               ==
         1778_1780  POP_JUMP_IF_FALSE  1884  'to 1884'

 L.1323      1782  LOAD_FAST                'lines'
             1784  LOAD_METHOD              append
             1786  LOAD_FAST                'l'
             1788  LOAD_CONST               None
             1790  LOAD_CONST               72
             1792  BUILD_SLICE_2         2 
             1794  BINARY_SUBSCR    
             1796  LOAD_STR                 '&\n     &'
             1798  BINARY_ADD       
             1800  CALL_METHOD_1         1  ''
             1802  POP_TOP          

 L.1324      1804  LOAD_FAST                'l'
             1806  LOAD_CONST               72
             1808  LOAD_CONST               None
             1810  BUILD_SLICE_2         2 
             1812  BINARY_SUBSCR    
             1814  STORE_FAST               'l'

 L.1325      1816  LOAD_GLOBAL              len
             1818  LOAD_FAST                'l'
             1820  CALL_FUNCTION_1       1  ''
             1822  LOAD_CONST               66
             1824  COMPARE_OP               >
         1826_1828  POP_JUMP_IF_FALSE  1868  'to 1868'

 L.1326      1830  LOAD_FAST                'lines'
             1832  LOAD_METHOD              append
             1834  LOAD_FAST                'l'
             1836  LOAD_CONST               None
             1838  LOAD_CONST               66
             1840  BUILD_SLICE_2         2 
             1842  BINARY_SUBSCR    
             1844  LOAD_STR                 '&\n     &'
             1846  BINARY_ADD       
             1848  CALL_METHOD_1         1  ''
             1850  POP_TOP          

 L.1327      1852  LOAD_FAST                'l'
             1854  LOAD_CONST               66
             1856  LOAD_CONST               None
             1858  BUILD_SLICE_2         2 
             1860  BINARY_SUBSCR    
             1862  STORE_FAST               'l'
         1864_1866  JUMP_BACK          1816  'to 1816'
           1868_0  COME_FROM          1826  '1826'

 L.1328      1868  LOAD_FAST                'lines'
             1870  LOAD_METHOD              append
             1872  LOAD_FAST                'l'
             1874  LOAD_STR                 '\n'
             1876  BINARY_ADD       
             1878  CALL_METHOD_1         1  ''
             1880  POP_TOP          
             1882  JUMP_BACK          1700  'to 1700'
           1884_0  COME_FROM          1778  '1778'
           1884_1  COME_FROM          1764  '1764'

 L.1330      1884  LOAD_FAST                'lines'
             1886  LOAD_METHOD              append
             1888  LOAD_FAST                'l'
             1890  LOAD_STR                 '\n'
             1892  BINARY_ADD       
             1894  CALL_METHOD_1         1  ''
             1896  POP_TOP          
         1898_1900  JUMP_BACK          1700  'to 1700'

 L.1331      1902  LOAD_STR                 ''
             1904  LOAD_METHOD              join
             1906  LOAD_FAST                'lines'
             1908  CALL_METHOD_1         1  ''
             1910  LOAD_METHOD              replace
             1912  LOAD_STR                 '\n     &\n'
             1914  LOAD_STR                 '\n'
             1916  CALL_METHOD_2         2  ''
             1918  STORE_FAST               'lines'

 L.1332      1920  LOAD_FAST                'f'
             1922  LOAD_METHOD              write
             1924  LOAD_FAST                'lines'
             1926  CALL_METHOD_1         1  ''
             1928  POP_TOP          
             1930  POP_BLOCK        
             1932  BEGIN_FINALLY    
           1934_0  COME_FROM_WITH     1636  '1636'
             1934  WITH_CLEANUP_START
             1936  WITH_CLEANUP_FINISH
             1938  END_FINALLY      

 L.1333      1940  LOAD_GLOBAL              outmess
             1942  LOAD_STR                 '\tFortran 90 wrappers are saved to "%s"\n'
             1944  LOAD_FAST                'wn'
             1946  BINARY_MODULO    
             1948  CALL_FUNCTION_1       1  ''
             1950  POP_TOP          
           1952_0  COME_FROM          1590  '1590'

 L.1334      1952  LOAD_FAST                'ret'
             1954  RETURN_VALUE     
               -1  RETURN_LAST      

Parse error at or near `CONTINUE' instruction at offset 146


    stnd = {1:'st', 
     2:'nd',  3:'rd',  4:'th',  5:'th',  6:'th', 
     7:'th',  8:'th',  9:'th',  0:'th'}

    def buildapi(rout):
        rout, wrap = func2subr.assubr(rout)
        args, depargs = getargs2(rout)
        capi_maps.depargs = depargs
        var = rout['vars']
        if ismoduleroutine(rout):
            outmess('\t\t\tConstructing wrapper function "%s.%s"...\n' % (
             rout['modulename'], rout['name']))
        else:
            outmess('\t\tConstructing wrapper function "%s"...\n' % rout['name'])
        vrd = capi_maps.routsign2map(rout)
        rd = dictappend({}, vrd)
        for r in rout_rules:
            if '_check' in r:
                if r['_check'](rout) or '_check' not in r:
                    ar = applyrules(r, vrd, rout)
                    rd = dictappend(rd, ar)
            nth, nthk = (0, 0)
            savevrd = {}

        for a in args:
            vrd = capi_maps.sign2map(a, var[a])
            if isintent_aux(var[a]):
                _rules = aux_rules
            else:
                _rules = arg_rules
                if not isintent_hide(var[a]):
                    if not isoptional(var[a]):
                        nth = nth + 1
                        vrd['nth'] = repr(nth) + stnd[(nth % 10)] + ' argument'
                    else:
                        nthk = nthk + 1
                        vrd['nth'] = repr(nthk) + stnd[(nthk % 10)] + ' keyword'
                else:
                    vrd['nth'] = 'hidden'
            savevrd[a] = vrd

        for r in _rules:
            if '_depend' in r:
                pass
            else:
                if '_check' in r and r['_check'](var[a]) or '_check' not in r:
                    pass
                ar = applyrules(r, vrd, var[a])
                rd = dictappend(rd, ar)
                if '_break' in r:
                    continue
        else:
            for a in depargs:
                if isintent_aux(var[a]):
                    _rules = aux_rules
                else:
                    _rules = arg_rules
                vrd = savevrd[a]
                for r in _rules:
                    if '_depend' not in r:
                        pass
                    else:
                        if not ('_check' in r and r['_check'](var[a])):
                            if '_check' not in r:
                                ar = applyrules(r, vrd, var[a])
                                rd = dictappend(rd, ar)
                                if '_break' in r:
                                    break
                            if 'check' in var[a]:
                                for c in var[a]['check']:
                                    vrd['check'] = c
                                    ar = applyrules(check_rules, vrd, var[a])
                                    rd = dictappend(rd, ar)
                                else:
                                    if isinstance(rd['cleanupfrompyobj'], list):
                                        rd['cleanupfrompyobj'].reverse()
                                    else:
                                        if isinstance(rd['closepyobjfrom'], list):
                                            rd['closepyobjfrom'].reverse()
                                        else:
                                            rd['docsignature'] = stripcomma(replace('#docsign##docsignopt##docsignxa#', {'docsign':rd['docsign'], 
                                             'docsignopt':rd['docsignopt'], 
                                             'docsignxa':rd['docsignxa']}))
                                            optargs = stripcomma(replace('#docsignopt##docsignxa#', {'docsignxa':rd['docsignxashort'], 
                                             'docsignopt':rd['docsignoptshort']}))
                                            if optargs == '':
                                                rd['docsignatureshort'] = stripcomma(replace('#docsign#', {'docsign': rd['docsign']}))
                                            else:
                                                rd['docsignatureshort'] = replace('#docsign#[#docsignopt#]', {'docsign':rd['docsign'], 
                                                 'docsignopt':optargs})
                                        rd['latexdocsignatureshort'] = rd['docsignatureshort'].replace('_', '\\_')
                                        rd['latexdocsignatureshort'] = rd['latexdocsignatureshort'].replace(',', ', ')
                                        cfs = stripcomma(replace('#callfortran##callfortranappend#', {'callfortran':rd['callfortran'], 
                                         'callfortranappend':rd['callfortranappend']}))
                                        if len(rd['callfortranappend']) > 1:
                                            rd['callcompaqfortran'] = stripcomma(replace('#callfortran# 0,#callfortranappend#', {'callfortran':rd['callfortran'], 
                                             'callfortranappend':rd['callfortranappend']}))
                                        else:
                                            rd['callcompaqfortran'] = cfs
                                    rd['callfortran'] = cfs

                                if isinstance(rd['docreturn'], list):
                                    rd['docreturn'] = stripcomma(replace('#docreturn#', {'docreturn': rd['docreturn']})) + ' = '
                        rd['docstrsigns'] = []
                        rd['latexdocstrsigns'] = []
                        for k in ('docstrreq', 'docstropt', 'docstrout', 'docstrcbs'):
                            if k in rd:
                                if isinstance(rd[k], list):
                                    rd['docstrsigns'] = rd['docstrsigns'] + rd[k]
                            else:
                                k = 'latex' + k
                                if k in rd:
                                    if isinstance(rd[k], list):
                                        rd['latexdocstrsigns'] = rd['latexdocstrsigns'] + rd[k][0:1] + [
                                         '\\begin{description}'] + rd[k][1:] + [
                                         '\\end{description}']
                                    ar = applyrules(routine_rules, rd)
                                    if ismoduleroutine(rout):
                                        outmess('\t\t\t  %s\n' % ar['docshort'])
                                outmess('\t\t  %s\n' % ar['docshort'])
                            return (
                             ar, wrap)