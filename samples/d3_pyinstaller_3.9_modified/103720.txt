
# file test/103720.pyc
# --- This code section failed: ---

 L.   1         0  LOAD_STR                 'Generic socket server classes.\n\nThis module tries to capture the various aspects of defining a server:\n\nFor socket-based servers:\n\n- address family:\n        - AF_INET{,6}: IP (Internet Protocol) sockets (default)\n        - AF_UNIX: Unix domain sockets\n        - others, e.g. AF_DECNET are conceivable (see <socket.h>\n- socket type:\n        - SOCK_STREAM (reliable stream, e.g. TCP)\n        - SOCK_DGRAM (datagrams, e.g. UDP)\n\nFor request-based servers (including socket-based):\n\n- client address verification before further looking at the request\n        (This is actually a hook for any processing that needs to look\n         at the request before anything else, e.g. logging)\n- how to handle multiple requests:\n        - synchronous (one request is handled at a time)\n        - forking (each request is handled by a new process)\n        - threading (each request is handled by a new thread)\n\nThe classes in this module favor the server type that is simplest to\nwrite: a synchronous TCP/IP server.  This is bad class design, but\nsaves some typing.  (There\'s also the issue that a deep class hierarchy\nslows down method lookups.)\n\nThere are five classes in an inheritance diagram, four of which represent\nsynchronous servers of four types:\n\n        +------------+\n        | BaseServer |\n        +------------+\n              |\n              v\n        +-----------+        +------------------+\n        | TCPServer |------->| UnixStreamServer |\n        +-----------+        +------------------+\n              |\n              v\n        +-----------+        +--------------------+\n        | UDPServer |------->| UnixDatagramServer |\n        +-----------+        +--------------------+\n\nNote that UnixDatagramServer derives from UDPServer, not from\nUnixStreamServer -- the only difference between an IP and a Unix\nstream server is the address family, which is simply repeated in both\nunix server classes.\n\nForking and threading versions of each type of server can be created\nusing the ForkingMixIn and ThreadingMixIn mix-in classes.  For\ninstance, a threading UDP server class is created as follows:\n\n        class ThreadingUDPServer(ThreadingMixIn, UDPServer): pass\n\nThe Mix-in class must come first, since it overrides a method defined\nin UDPServer! Setting the various member variables also changes\nthe behavior of the underlying server mechanism.\n\nTo implement a service, you must derive a class from\nBaseRequestHandler and redefine its handle() method.  You can then run\nvarious versions of the service by combining one of the server classes\nwith your request handler class.\n\nThe request handler class must be different for datagram or stream\nservices.  This can be hidden by using the request handler\nsubclasses StreamRequestHandler or DatagramRequestHandler.\n\nOf course, you still have to use your head!\n\nFor instance, it makes no sense to use a forking server if the service\ncontains state in memory that can be modified by requests (since the\nmodifications in the child process would never reach the initial state\nkept in the parent process and passed to each child).  In this case,\nyou can use a threading server, but you will probably have to use\nlocks to avoid two requests that come in nearly simultaneous to apply\nconflicting changes to the server state.\n\nOn the other hand, if you are building e.g. an HTTP server, where all\ndata is stored externally (e.g. in the file system), a synchronous\nclass will essentially render the service "deaf" while one request is\nbeing handled -- which may be for a very long time if a client is slow\nto read all the data it has requested.  Here a threading or forking\nserver is appropriate.\n\nIn some cases, it may be appropriate to process part of a request\nsynchronously, but to finish processing in a forked child depending on\nthe request data.  This can be implemented by using a synchronous\nserver and doing an explicit fork in the request handler class\nhandle() method.\n\nAnother approach to handling multiple simultaneous requests in an\nenvironment that supports neither threads nor fork (or where these are\ntoo expensive or inappropriate for the service) is to maintain an\nexplicit table of partially finished requests and to use a selector to\ndecide which request to work on next (or whether to handle a new\nincoming request).  This is particularly important for stream services\nwhere each client can potentially be connected for a long time (if\nthreads or subprocesses cannot be used).\n\nFuture work:\n- Standard classes for Sun RPC (which uses either UDP or TCP)\n- Standard mix-in classes to implement various authentication\n  and encryption schemes\n\nXXX Open problems:\n- What to do with out-of-band data?\n\nBaseServer:\n- split generic "request" functionality out into BaseServer class.\n  Copyright (C) 2000  Luke Kenneth Casson Leighton <lkcl@samba.org>\n\n  example: read entries from a SQL database (requires overriding\n  get_request() to return a table entry from the database).\n  entry is processed by a RequestHandlerClass.\n\n'
                2  STORE_NAME               __doc__

 L. 123         4  LOAD_STR                 '0.4'
                6  STORE_NAME               __version__

 L. 126         8  LOAD_CONST               0
               10  LOAD_CONST               None
               12  IMPORT_NAME              socket
               14  STORE_NAME               socket

 L. 127        16  LOAD_CONST               0
               18  LOAD_CONST               None
               20  IMPORT_NAME              selectors
               22  STORE_NAME               selectors

 L. 128        24  LOAD_CONST               0
               26  LOAD_CONST               None
               28  IMPORT_NAME              os
               30  STORE_NAME               os

 L. 129        32  LOAD_CONST               0
               34  LOAD_CONST               None
               36  IMPORT_NAME              sys
               38  STORE_NAME               sys

 L. 130        40  LOAD_CONST               0
               42  LOAD_CONST               None
               44  IMPORT_NAME              threading
               46  STORE_NAME               threading

 L. 131        48  LOAD_CONST               0
               50  LOAD_CONST               ('BufferedIOBase',)
               52  IMPORT_NAME              io
               54  IMPORT_FROM              BufferedIOBase
               56  STORE_NAME               BufferedIOBase
               58  POP_TOP          

 L. 132        60  LOAD_CONST               0
               62  LOAD_CONST               ('monotonic',)
               64  IMPORT_NAME              time
               66  IMPORT_FROM              monotonic
               68  STORE_NAME               time
               70  POP_TOP          

 L. 134        72  BUILD_LIST_0          0 
               74  LOAD_CONST               ('BaseServer', 'TCPServer', 'UDPServer', 'ThreadingUDPServer', 'ThreadingTCPServer', 'BaseRequestHandler', 'StreamRequestHandler', 'DatagramRequestHandler', 'ThreadingMixIn')
               76  CALL_FINALLY         79  'to 79'
               78  STORE_NAME               __all__

 L. 138        80  LOAD_NAME                hasattr
               82  LOAD_NAME                os
               84  LOAD_STR                 'fork'
               86  CALL_FUNCTION_2       2  ''
               88  POP_JUMP_IF_FALSE   104  'to 104'

 L. 139        90  LOAD_NAME                __all__
               92  LOAD_METHOD              extend
               94  BUILD_LIST_0          0 
               96  LOAD_CONST               ('ForkingUDPServer', 'ForkingTCPServer', 'ForkingMixIn')
               98  CALL_FINALLY        101  'to 101'
              100  CALL_METHOD_1         1  ''
              102  POP_TOP          
            104_0  COME_FROM            88  '88'

 L. 140       104  LOAD_NAME                hasattr
              106  LOAD_NAME                socket
              108  LOAD_STR                 'AF_UNIX'
              110  CALL_FUNCTION_2       2  ''
              112  POP_JUMP_IF_FALSE   128  'to 128'

 L. 141       114  LOAD_NAME                __all__
              116  LOAD_METHOD              extend
              118  BUILD_LIST_0          0 
              120  LOAD_CONST               ('UnixStreamServer', 'UnixDatagramServer', 'ThreadingUnixStreamServer', 'ThreadingUnixDatagramServer')
              122  CALL_FINALLY        125  'to 125'
              124  CALL_METHOD_1         1  ''
              126  POP_TOP          
            128_0  COME_FROM           112  '112'

 L. 147       128  LOAD_NAME                hasattr
              130  LOAD_NAME                selectors
              132  LOAD_STR                 'PollSelector'
              134  CALL_FUNCTION_2       2  ''
              136  POP_JUMP_IF_FALSE   146  'to 146'

 L. 148       138  LOAD_NAME                selectors
              140  LOAD_ATTR                PollSelector
              142  STORE_NAME               _ServerSelector
              144  JUMP_FORWARD        152  'to 152'
            146_0  COME_FROM           136  '136'

 L. 150       146  LOAD_NAME                selectors
              148  LOAD_ATTR                SelectSelector
              150  STORE_NAME               _ServerSelector
            152_0  COME_FROM           144  '144'

 L. 153       152  LOAD_BUILD_CLASS 
              154  LOAD_CODE                <code_object BaseServer>
              156  LOAD_STR                 'BaseServer'
              158  MAKE_FUNCTION_0          'Neither defaults, keyword-only args, annotations, nor closures'
              160  LOAD_STR                 'BaseServer'
              162  CALL_FUNCTION_2       2  ''
              164  STORE_NAME               BaseServer

 L. 390       166  LOAD_BUILD_CLASS 
              168  LOAD_CODE                <code_object TCPServer>
              170  LOAD_STR                 'TCPServer'
              172  MAKE_FUNCTION_0          'Neither defaults, keyword-only args, annotations, nor closures'
              174  LOAD_STR                 'TCPServer'
              176  LOAD_NAME                BaseServer
              178  CALL_FUNCTION_3       3  ''
              180  STORE_NAME               TCPServer

 L. 516       182  LOAD_BUILD_CLASS 
              184  LOAD_CODE                <code_object UDPServer>
              186  LOAD_STR                 'UDPServer'
              188  MAKE_FUNCTION_0          'Neither defaults, keyword-only args, annotations, nor closures'
              190  LOAD_STR                 'UDPServer'
              192  LOAD_NAME                TCPServer
              194  CALL_FUNCTION_3       3  ''
              196  STORE_NAME               UDPServer

 L. 542       198  LOAD_NAME                hasattr
              200  LOAD_NAME                os
              202  LOAD_STR                 'fork'
              204  CALL_FUNCTION_2       2  ''
              206  POP_JUMP_IF_FALSE   222  'to 222'

 L. 543       208  LOAD_BUILD_CLASS 
              210  LOAD_CODE                <code_object ForkingMixIn>
              212  LOAD_STR                 'ForkingMixIn'
              214  MAKE_FUNCTION_0          'Neither defaults, keyword-only args, annotations, nor closures'
              216  LOAD_STR                 'ForkingMixIn'
              218  CALL_FUNCTION_2       2  ''
              220  STORE_NAME               ForkingMixIn
            222_0  COME_FROM           206  '206'

 L. 631       222  LOAD_BUILD_CLASS 
              224  LOAD_CODE                <code_object _Threads>
              226  LOAD_STR                 '_Threads'
              228  MAKE_FUNCTION_0          'Neither defaults, keyword-only args, annotations, nor closures'
              230  LOAD_STR                 '_Threads'
              232  LOAD_NAME                list
              234  CALL_FUNCTION_3       3  ''
              236  STORE_NAME               _Threads

 L. 653       238  LOAD_BUILD_CLASS 
              240  LOAD_CODE                <code_object _NoThreads>
              242  LOAD_STR                 '_NoThreads'
              244  MAKE_FUNCTION_0          'Neither defaults, keyword-only args, annotations, nor closures'
              246  LOAD_STR                 '_NoThreads'
              248  CALL_FUNCTION_2       2  ''
              250  STORE_NAME               _NoThreads

 L. 664       252  LOAD_BUILD_CLASS 
              254  LOAD_CODE                <code_object ThreadingMixIn>
              256  LOAD_STR                 'ThreadingMixIn'
              258  MAKE_FUNCTION_0          'Neither defaults, keyword-only args, annotations, nor closures'
              260  LOAD_STR                 'ThreadingMixIn'
              262  CALL_FUNCTION_2       2  ''
              264  STORE_NAME               ThreadingMixIn

 L. 704       266  LOAD_NAME                hasattr
              268  LOAD_NAME                os
              270  LOAD_STR                 'fork'
              272  CALL_FUNCTION_2       2  ''
          274_276  POP_JUMP_IF_FALSE   314  'to 314'

 L. 705       278  LOAD_BUILD_CLASS 
              280  LOAD_CODE                <code_object ForkingUDPServer>
              282  LOAD_STR                 'ForkingUDPServer'
              284  MAKE_FUNCTION_0          'Neither defaults, keyword-only args, annotations, nor closures'
              286  LOAD_STR                 'ForkingUDPServer'
              288  LOAD_NAME                ForkingMixIn
              290  LOAD_NAME                UDPServer
              292  CALL_FUNCTION_4       4  ''
              294  STORE_NAME               ForkingUDPServer

 L. 706       296  LOAD_BUILD_CLASS 
              298  LOAD_CODE                <code_object ForkingTCPServer>
              300  LOAD_STR                 'ForkingTCPServer'
              302  MAKE_FUNCTION_0          'Neither defaults, keyword-only args, annotations, nor closures'
              304  LOAD_STR                 'ForkingTCPServer'
              306  LOAD_NAME                ForkingMixIn
              308  LOAD_NAME                TCPServer
              310  CALL_FUNCTION_4       4  ''
              312  STORE_NAME               ForkingTCPServer
            314_0  COME_FROM           274  '274'

 L. 708       314  LOAD_BUILD_CLASS 
              316  LOAD_CODE                <code_object ThreadingUDPServer>
              318  LOAD_STR                 'ThreadingUDPServer'
              320  MAKE_FUNCTION_0          'Neither defaults, keyword-only args, annotations, nor closures'
              322  LOAD_STR                 'ThreadingUDPServer'
              324  LOAD_NAME                ThreadingMixIn
              326  LOAD_NAME                UDPServer
              328  CALL_FUNCTION_4       4  ''
              330  STORE_NAME               ThreadingUDPServer

 L. 709       332  LOAD_BUILD_CLASS 
              334  LOAD_CODE                <code_object ThreadingTCPServer>
              336  LOAD_STR                 'ThreadingTCPServer'
              338  MAKE_FUNCTION_0          'Neither defaults, keyword-only args, annotations, nor closures'
              340  LOAD_STR                 'ThreadingTCPServer'
              342  LOAD_NAME                ThreadingMixIn
              344  LOAD_NAME                TCPServer
              346  CALL_FUNCTION_4       4  ''
              348  STORE_NAME               ThreadingTCPServer

 L. 711       350  LOAD_NAME                hasattr
              352  LOAD_NAME                socket
              354  LOAD_STR                 'AF_UNIX'
              356  CALL_FUNCTION_2       2  ''
          358_360  POP_JUMP_IF_FALSE   430  'to 430'

 L. 713       362  LOAD_BUILD_CLASS 
              364  LOAD_CODE                <code_object UnixStreamServer>
              366  LOAD_STR                 'UnixStreamServer'
              368  MAKE_FUNCTION_0          'Neither defaults, keyword-only args, annotations, nor closures'
              370  LOAD_STR                 'UnixStreamServer'
              372  LOAD_NAME                TCPServer
              374  CALL_FUNCTION_3       3  ''
              376  STORE_NAME               UnixStreamServer

 L. 716       378  LOAD_BUILD_CLASS 
              380  LOAD_CODE                <code_object UnixDatagramServer>
              382  LOAD_STR                 'UnixDatagramServer'
              384  MAKE_FUNCTION_0          'Neither defaults, keyword-only args, annotations, nor closures'
              386  LOAD_STR                 'UnixDatagramServer'
              388  LOAD_NAME                UDPServer
              390  CALL_FUNCTION_3       3  ''
              392  STORE_NAME               UnixDatagramServer

 L. 719       394  LOAD_BUILD_CLASS 
              396  LOAD_CODE                <code_object ThreadingUnixStreamServer>
              398  LOAD_STR                 'ThreadingUnixStreamServer'
              400  MAKE_FUNCTION_0          'Neither defaults, keyword-only args, annotations, nor closures'
              402  LOAD_STR                 'ThreadingUnixStreamServer'
              404  LOAD_NAME                ThreadingMixIn
              406  LOAD_NAME                UnixStreamServer
              408  CALL_FUNCTION_4       4  ''
              410  STORE_NAME               ThreadingUnixStreamServer

 L. 721       412  LOAD_BUILD_CLASS 
              414  LOAD_CODE                <code_object ThreadingUnixDatagramServer>
              416  LOAD_STR                 'ThreadingUnixDatagramServer'
              418  MAKE_FUNCTION_0          'Neither defaults, keyword-only args, annotations, nor closures'
              420  LOAD_STR                 'ThreadingUnixDatagramServer'
              422  LOAD_NAME                ThreadingMixIn
              424  LOAD_NAME                UnixDatagramServer
              426  CALL_FUNCTION_4       4  ''
              428  STORE_NAME               ThreadingUnixDatagramServer
            430_0  COME_FROM           358  '358'

 L. 723       430  LOAD_BUILD_CLASS 
              432  LOAD_CODE                <code_object BaseRequestHandler>
              434  LOAD_STR                 'BaseRequestHandler'
              436  MAKE_FUNCTION_0          'Neither defaults, keyword-only args, annotations, nor closures'
              438  LOAD_STR                 'BaseRequestHandler'
              440  CALL_FUNCTION_2       2  ''
              442  STORE_NAME               BaseRequestHandler

 L. 769       444  LOAD_BUILD_CLASS 
              446  LOAD_CODE                <code_object StreamRequestHandler>
              448  LOAD_STR                 'StreamRequestHandler'
              450  MAKE_FUNCTION_0          'Neither defaults, keyword-only args, annotations, nor closures'
              452  LOAD_STR                 'StreamRequestHandler'
              454  LOAD_NAME                BaseRequestHandler
              456  CALL_FUNCTION_3       3  ''
              458  STORE_NAME               StreamRequestHandler

 L. 814       460  LOAD_BUILD_CLASS 
              462  LOAD_CODE                <code_object _SocketWriter>
              464  LOAD_STR                 '_SocketWriter'
              466  MAKE_FUNCTION_0          'Neither defaults, keyword-only args, annotations, nor closures'
              468  LOAD_STR                 '_SocketWriter'
              470  LOAD_NAME                BufferedIOBase
              472  CALL_FUNCTION_3       3  ''
              474  STORE_NAME               _SocketWriter

 L. 833       476  LOAD_BUILD_CLASS 
              478  LOAD_CODE                <code_object DatagramRequestHandler>
              480  LOAD_STR                 'DatagramRequestHandler'
              482  MAKE_FUNCTION_0          'Neither defaults, keyword-only args, annotations, nor closures'
              484  LOAD_STR                 'DatagramRequestHandler'
              486  LOAD_NAME                BaseRequestHandler
              488  CALL_FUNCTION_3       3  ''
              490  STORE_NAME               DatagramRequestHandler

Parse error at or near `CALL_FINALLY' instruction at offset 76

Instruction context:
   
 L. 134        72  BUILD_LIST_0          0 
                  74  LOAD_CONST               ('BaseServer', 'TCPServer', 'UDPServer', 'ThreadingUDPServer', 'ThreadingTCPServer', 'BaseRequestHandler', 'StreamRequestHandler', 'DatagramRequestHandler', 'ThreadingMixIn')
->                76  CALL_FINALLY         79  'to 79'
                  78  STORE_NAME               __all__

test/103720.pyc -- 
# decompile failed
