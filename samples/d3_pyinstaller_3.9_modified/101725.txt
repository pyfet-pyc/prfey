
# file test/101725.pyc
# --- This code section failed: ---

 L.   1         0  LOAD_STR                 'JSON (JavaScript Object Notation) <http://json.org> is a subset of\nJavaScript syntax (ECMA-262 3rd edition) used as a lightweight data\ninterchange format.\n\n:mod:`json` exposes an API familiar to users of the standard library\n:mod:`marshal` and :mod:`pickle` modules.  It is derived from a\nversion of the externally maintained simplejson library.\n\nEncoding basic Python object hierarchies::\n\n    >>> import json\n    >>> json.dumps([\'foo\', {\'bar\': (\'baz\', None, 1.0, 2)}])\n    \'["foo", {"bar": ["baz", null, 1.0, 2]}]\'\n    >>> print(json.dumps("\\"foo\\bar"))\n    "\\"foo\\bar"\n    >>> print(json.dumps(\'\\u1234\'))\n    "\\u1234"\n    >>> print(json.dumps(\'\\\\\'))\n    "\\\\"\n    >>> print(json.dumps({"c": 0, "b": 0, "a": 0}, sort_keys=True))\n    {"a": 0, "b": 0, "c": 0}\n    >>> from io import StringIO\n    >>> io = StringIO()\n    >>> json.dump([\'streaming API\'], io)\n    >>> io.getvalue()\n    \'["streaming API"]\'\n\nCompact encoding::\n\n    >>> import json\n    >>> mydict = {\'4\': 5, \'6\': 7}\n    >>> json.dumps([1,2,3,mydict], separators=(\',\', \':\'))\n    \'[1,2,3,{"4":5,"6":7}]\'\n\nPretty printing::\n\n    >>> import json\n    >>> print(json.dumps({\'4\': 5, \'6\': 7}, sort_keys=True, indent=4))\n    {\n        "4": 5,\n        "6": 7\n    }\n\nDecoding JSON::\n\n    >>> import json\n    >>> obj = [\'foo\', {\'bar\': [\'baz\', None, 1.0, 2]}]\n    >>> json.loads(\'["foo", {"bar":["baz", null, 1.0, 2]}]\') == obj\n    True\n    >>> json.loads(\'"\\\\"foo\\\\bar"\') == \'"foo\\x08ar\'\n    True\n    >>> from io import StringIO\n    >>> io = StringIO(\'["streaming API"]\')\n    >>> json.load(io)[0] == \'streaming API\'\n    True\n\nSpecializing JSON object decoding::\n\n    >>> import json\n    >>> def as_complex(dct):\n    ...     if \'__complex__\' in dct:\n    ...         return complex(dct[\'real\'], dct[\'imag\'])\n    ...     return dct\n    ...\n    >>> json.loads(\'{"__complex__": true, "real": 1, "imag": 2}\',\n    ...     object_hook=as_complex)\n    (1+2j)\n    >>> from decimal import Decimal\n    >>> json.loads(\'1.1\', parse_float=Decimal) == Decimal(\'1.1\')\n    True\n\nSpecializing JSON object encoding::\n\n    >>> import json\n    >>> def encode_complex(obj):\n    ...     if isinstance(obj, complex):\n    ...         return [obj.real, obj.imag]\n    ...     raise TypeError(f\'Object of type {obj.__class__.__name__} \'\n    ...                     f\'is not JSON serializable\')\n    ...\n    >>> json.dumps(2 + 1j, default=encode_complex)\n    \'[2.0, 1.0]\'\n    >>> json.JSONEncoder(default=encode_complex).encode(2 + 1j)\n    \'[2.0, 1.0]\'\n    >>> \'\'.join(json.JSONEncoder(default=encode_complex).iterencode(2 + 1j))\n    \'[2.0, 1.0]\'\n\n\nUsing json.tool from the shell to validate and pretty-print::\n\n    $ echo \'{"json":"obj"}\' | python -m json.tool\n    {\n        "json": "obj"\n    }\n    $ echo \'{ 1.2:3.4}\' | python -m json.tool\n    Expecting property name enclosed in double quotes: line 1 column 3 (char 2)\n'
                2  STORE_NAME               __doc__

 L.  98         4  LOAD_STR                 '2.0.9'
                6  STORE_NAME               __version__

 L.  99         8  BUILD_LIST_0          0 
               10  LOAD_CONST               ('dump', 'dumps', 'load', 'loads', 'JSONDecoder', 'JSONDecodeError', 'JSONEncoder')
               12  CALL_FINALLY         15  'to 15'
               14  STORE_NAME               __all__

 L. 104        16  LOAD_STR                 'Bob Ippolito <bob@redivi.com>'
               18  STORE_NAME               __author__

 L. 106        20  LOAD_CONST               1
               22  LOAD_CONST               ('JSONDecoder', 'JSONDecodeError')
               24  IMPORT_NAME              decoder
               26  IMPORT_FROM              JSONDecoder
               28  STORE_NAME               JSONDecoder
               30  IMPORT_FROM              JSONDecodeError
               32  STORE_NAME               JSONDecodeError
               34  POP_TOP          

 L. 107        36  LOAD_CONST               1
               38  LOAD_CONST               ('JSONEncoder',)
               40  IMPORT_NAME              encoder
               42  IMPORT_FROM              JSONEncoder
               44  STORE_NAME               JSONEncoder
               46  POP_TOP          

 L. 108        48  LOAD_CONST               0
               50  LOAD_CONST               None
               52  IMPORT_NAME              codecs
               54  STORE_NAME               codecs

 L. 110        56  LOAD_NAME                JSONEncoder

 L. 111        58  LOAD_CONST               False

 L. 112        60  LOAD_CONST               True

 L. 113        62  LOAD_CONST               True

 L. 114        64  LOAD_CONST               True

 L. 115        66  LOAD_CONST               None

 L. 116        68  LOAD_CONST               None

 L. 117        70  LOAD_CONST               None

 L. 110        72  LOAD_CONST               ('skipkeys', 'ensure_ascii', 'check_circular', 'allow_nan', 'indent', 'separators', 'default')
               74  CALL_FUNCTION_KW_7     7  '7 total positional and keyword args'
               76  STORE_NAME               _default_encoder

 L. 120        78  LOAD_CONST               False
               80  LOAD_CONST               True
               82  LOAD_CONST               True

 L. 121        84  LOAD_CONST               True
               86  LOAD_CONST               None
               88  LOAD_CONST               None
               90  LOAD_CONST               None

 L. 122        92  LOAD_CONST               None
               94  LOAD_CONST               False

 L. 120        96  LOAD_CONST               ('skipkeys', 'ensure_ascii', 'check_circular', 'allow_nan', 'cls', 'indent', 'separators', 'default', 'sort_keys')
               98  BUILD_CONST_KEY_MAP_9     9 
              100  LOAD_CODE                <code_object dump>
              102  LOAD_STR                 'dump'
              104  MAKE_FUNCTION_2          'keyword-only'
              106  STORE_NAME               dump

 L. 183       108  LOAD_CONST               False
              110  LOAD_CONST               True
              112  LOAD_CONST               True

 L. 184       114  LOAD_CONST               True
              116  LOAD_CONST               None
              118  LOAD_CONST               None
              120  LOAD_CONST               None

 L. 185       122  LOAD_CONST               None
              124  LOAD_CONST               False

 L. 183       126  LOAD_CONST               ('skipkeys', 'ensure_ascii', 'check_circular', 'allow_nan', 'cls', 'indent', 'separators', 'default', 'sort_keys')
              128  BUILD_CONST_KEY_MAP_9     9 
              130  LOAD_CODE                <code_object dumps>
              132  LOAD_STR                 'dumps'
              134  MAKE_FUNCTION_2          'keyword-only'
              136  STORE_NAME               dumps

 L. 241       138  LOAD_NAME                JSONDecoder
              140  LOAD_CONST               None
              142  LOAD_CONST               None
              144  LOAD_CONST               ('object_hook', 'object_pairs_hook')
              146  CALL_FUNCTION_KW_2     2  '2 total positional and keyword args'
              148  STORE_NAME               _default_decoder

 L. 244       150  LOAD_CODE                <code_object detect_encoding>
              152  LOAD_STR                 'detect_encoding'
              154  MAKE_FUNCTION_0          'Neither defaults, keyword-only args, annotations, nor closures'
              156  STORE_NAME               detect_encoding

 L. 274       158  LOAD_CONST               None
              160  LOAD_CONST               None
              162  LOAD_CONST               None

 L. 275       164  LOAD_CONST               None
              166  LOAD_CONST               None
              168  LOAD_CONST               None

 L. 274       170  LOAD_CONST               ('cls', 'object_hook', 'parse_float', 'parse_int', 'parse_constant', 'object_pairs_hook')
              172  BUILD_CONST_KEY_MAP_6     6 
              174  LOAD_CODE                <code_object load>
              176  LOAD_STR                 'load'
              178  MAKE_FUNCTION_2          'keyword-only'
              180  STORE_NAME               load

 L. 299       182  LOAD_CONST               None
              184  LOAD_CONST               None
              186  LOAD_CONST               None

 L. 300       188  LOAD_CONST               None
              190  LOAD_CONST               None
              192  LOAD_CONST               None

 L. 299       194  LOAD_CONST               ('cls', 'object_hook', 'parse_float', 'parse_int', 'parse_constant', 'object_pairs_hook')
              196  BUILD_CONST_KEY_MAP_6     6 
              198  LOAD_CODE                <code_object loads>
              200  LOAD_STR                 'loads'
              202  MAKE_FUNCTION_2          'keyword-only'
              204  STORE_NAME               loads

Parse error at or near `CALL_FINALLY' instruction at offset 12

Instruction context:
   
 L.  99         8  BUILD_LIST_0          0 
                  10  LOAD_CONST               ('dump', 'dumps', 'load', 'loads', 'JSONDecoder', 'JSONDecodeError', 'JSONEncoder')
->                12  CALL_FINALLY         15  'to 15'
                  14  STORE_NAME               __all__

test/101725.pyc -- 
# decompile failed
