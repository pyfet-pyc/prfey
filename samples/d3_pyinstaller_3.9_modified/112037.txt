
# file test/112037.pyc
# --- This code section failed: ---

 L.   4         0  LOAD_CONST               0
                2  LOAD_CONST               ('absolute_import', 'division', 'print_function')
                4  IMPORT_NAME              __future__
                6  IMPORT_FROM              absolute_import
                8  STORE_NAME               absolute_import
               10  IMPORT_FROM              division
               12  STORE_NAME               division
               14  IMPORT_FROM              print_function
               16  STORE_NAME               print_function
               18  POP_TOP          

 L.   6        20  LOAD_CONST               0
               22  LOAD_CONST               None
               24  IMPORT_NAME              collections
               26  STORE_NAME               collections

 L.   7        28  LOAD_CONST               0
               30  LOAD_CONST               None
               32  IMPORT_NAME              itertools
               34  STORE_NAME               itertools

 L.   8        36  LOAD_CONST               0
               38  LOAD_CONST               None
               40  IMPORT_NAME              re
               42  STORE_NAME               re

 L.  10        44  LOAD_CONST               1
               46  LOAD_CONST               ('Infinity', 'NegativeInfinity')
               48  IMPORT_NAME              _structures
               50  IMPORT_FROM              Infinity
               52  STORE_NAME               Infinity
               54  IMPORT_FROM              NegativeInfinity
               56  STORE_NAME               NegativeInfinity
               58  POP_TOP          

 L.  11        60  LOAD_CONST               1
               62  LOAD_CONST               ('TYPE_CHECKING',)
               64  IMPORT_NAME              _typing
               66  IMPORT_FROM              TYPE_CHECKING
               68  STORE_NAME               TYPE_CHECKING
               70  POP_TOP          

 L.  13        72  LOAD_NAME                TYPE_CHECKING
            74_76  POP_JUMP_IF_FALSE   302  'to 302'

 L.  14        78  LOAD_CONST               0
               80  LOAD_CONST               ('Callable', 'Iterator', 'List', 'Optional', 'SupportsInt', 'Tuple', 'Union')
               82  IMPORT_NAME              typing
               84  IMPORT_FROM              Callable
               86  STORE_NAME               Callable
               88  IMPORT_FROM              Iterator
               90  STORE_NAME               Iterator
               92  IMPORT_FROM              List
               94  STORE_NAME               List
               96  IMPORT_FROM              Optional
               98  STORE_NAME               Optional
              100  IMPORT_FROM              SupportsInt
              102  STORE_NAME               SupportsInt
              104  IMPORT_FROM              Tuple
              106  STORE_NAME               Tuple
              108  IMPORT_FROM              Union
              110  STORE_NAME               Union
              112  POP_TOP          

 L.  16       114  LOAD_CONST               1
              116  LOAD_CONST               ('InfinityType', 'NegativeInfinityType')
              118  IMPORT_NAME              _structures
              120  IMPORT_FROM              InfinityType
              122  STORE_NAME               InfinityType
              124  IMPORT_FROM              NegativeInfinityType
              126  STORE_NAME               NegativeInfinityType
              128  POP_TOP          

 L.  18       130  LOAD_NAME                Union
              132  LOAD_NAME                InfinityType
              134  LOAD_NAME                NegativeInfinityType
              136  BUILD_TUPLE_2         2 
              138  BINARY_SUBSCR    
              140  STORE_NAME               InfiniteTypes

 L.  19       142  LOAD_NAME                Union
              144  LOAD_NAME                InfiniteTypes
              146  LOAD_NAME                Tuple
              148  LOAD_NAME                str
              150  LOAD_NAME                int
              152  BUILD_TUPLE_2         2 
              154  BINARY_SUBSCR    
              156  BUILD_TUPLE_2         2 
              158  BINARY_SUBSCR    
              160  STORE_NAME               PrePostDevType

 L.  20       162  LOAD_NAME                Union
              164  LOAD_NAME                InfiniteTypes
              166  LOAD_NAME                int
              168  LOAD_NAME                str
              170  BUILD_TUPLE_3         3 
              172  BINARY_SUBSCR    
              174  STORE_NAME               SubLocalType

 L.  21       176  LOAD_NAME                Union

 L.  22       178  LOAD_NAME                NegativeInfinityType

 L.  23       180  LOAD_NAME                Tuple

 L.  24       182  LOAD_NAME                Union

 L.  25       184  LOAD_NAME                SubLocalType

 L.  26       186  LOAD_NAME                Tuple
              188  LOAD_NAME                SubLocalType
              190  LOAD_NAME                str
              192  BUILD_TUPLE_2         2 
              194  BINARY_SUBSCR    

 L.  27       196  LOAD_NAME                Tuple
              198  LOAD_NAME                NegativeInfinityType
              200  LOAD_NAME                SubLocalType
              202  BUILD_TUPLE_2         2 
              204  BINARY_SUBSCR    

 L.  25       206  BUILD_TUPLE_3         3 

 L.  24       208  BINARY_SUBSCR    

 L.  29       210  LOAD_CONST               Ellipsis

 L.  24       212  BUILD_TUPLE_2         2 

 L.  23       214  BINARY_SUBSCR    

 L.  22       216  BUILD_TUPLE_2         2 

 L.  21       218  BINARY_SUBSCR    
              220  STORE_NAME               LocalType

 L.  32       222  LOAD_NAME                Tuple

 L.  33       224  LOAD_NAME                int
              226  LOAD_NAME                Tuple
              228  LOAD_NAME                int
              230  LOAD_CONST               Ellipsis
              232  BUILD_TUPLE_2         2 
              234  BINARY_SUBSCR    
              236  LOAD_NAME                PrePostDevType
              238  LOAD_NAME                PrePostDevType
              240  LOAD_NAME                PrePostDevType
              242  LOAD_NAME                LocalType
              244  BUILD_TUPLE_6         6 

 L.  32       246  BINARY_SUBSCR    
              248  STORE_NAME               CmpKey

 L.  35       250  LOAD_NAME                Tuple
              252  LOAD_NAME                int
              254  LOAD_NAME                Tuple
              256  LOAD_NAME                str
              258  LOAD_CONST               Ellipsis
              260  BUILD_TUPLE_2         2 
              262  BINARY_SUBSCR    
              264  BUILD_TUPLE_2         2 
              266  BINARY_SUBSCR    
              268  STORE_NAME               LegacyCmpKey

 L.  36       270  LOAD_NAME                Callable

 L.  37       272  LOAD_NAME                Union
              274  LOAD_NAME                CmpKey
              276  LOAD_NAME                LegacyCmpKey
              278  BUILD_TUPLE_2         2 
              280  BINARY_SUBSCR    
              282  LOAD_NAME                Union
              284  LOAD_NAME                CmpKey
              286  LOAD_NAME                LegacyCmpKey
              288  BUILD_TUPLE_2         2 
              290  BINARY_SUBSCR    
              292  BUILD_LIST_2          2 
              294  LOAD_NAME                bool
              296  BUILD_TUPLE_2         2 

 L.  36       298  BINARY_SUBSCR    
              300  STORE_NAME               VersionComparisonMethod
            302_0  COME_FROM            74  '74'

 L.  40       302  BUILD_LIST_0          0 
              304  LOAD_CONST               ('parse', 'Version', 'LegacyVersion', 'InvalidVersion', 'VERSION_PATTERN')
              306  CALL_FINALLY        309  'to 309'
              308  STORE_NAME               __all__

 L.  43       310  LOAD_NAME                collections
              312  LOAD_METHOD              namedtuple

 L.  44       314  LOAD_STR                 '_Version'
              316  BUILD_LIST_0          0 
              318  LOAD_CONST               ('epoch', 'release', 'dev', 'pre', 'post', 'local')
              320  CALL_FINALLY        323  'to 323'

 L.  43       322  CALL_METHOD_2         2  ''
              324  STORE_NAME               _Version

 L.  48       326  LOAD_CODE                <code_object parse>
              328  LOAD_STR                 'parse'
              330  MAKE_FUNCTION_0          'Neither defaults, keyword-only args, annotations, nor closures'
              332  STORE_NAME               parse

 L.  61       334  LOAD_BUILD_CLASS 
              336  LOAD_CODE                <code_object InvalidVersion>
              338  LOAD_STR                 'InvalidVersion'
              340  MAKE_FUNCTION_0          'Neither defaults, keyword-only args, annotations, nor closures'
              342  LOAD_STR                 'InvalidVersion'
              344  LOAD_NAME                ValueError
              346  CALL_FUNCTION_3       3  ''
              348  STORE_NAME               InvalidVersion

 L.  67       350  LOAD_BUILD_CLASS 
              352  LOAD_CODE                <code_object _BaseVersion>
              354  LOAD_STR                 '_BaseVersion'
              356  MAKE_FUNCTION_0          'Neither defaults, keyword-only args, annotations, nor closures'
              358  LOAD_STR                 '_BaseVersion'
              360  LOAD_NAME                object
              362  CALL_FUNCTION_3       3  ''
              364  STORE_NAME               _BaseVersion

 L. 106       366  LOAD_BUILD_CLASS 
              368  LOAD_CODE                <code_object LegacyVersion>
              370  LOAD_STR                 'LegacyVersion'
              372  MAKE_FUNCTION_0          'Neither defaults, keyword-only args, annotations, nor closures'
              374  LOAD_STR                 'LegacyVersion'
              376  LOAD_NAME                _BaseVersion
              378  CALL_FUNCTION_3       3  ''
              380  STORE_NAME               LegacyVersion

 L. 176       382  LOAD_NAME                re
              384  LOAD_METHOD              compile
              386  LOAD_STR                 '(\\d+ | [a-z]+ | \\.| -)'
              388  LOAD_NAME                re
              390  LOAD_ATTR                VERBOSE
              392  CALL_METHOD_2         2  ''
              394  STORE_NAME               _legacy_version_component_re

 L. 179       396  LOAD_STR                 'c'

 L. 180       398  LOAD_STR                 'c'

 L. 181       400  LOAD_STR                 'final-'

 L. 182       402  LOAD_STR                 'c'

 L. 183       404  LOAD_STR                 '@'

 L. 178       406  LOAD_CONST               ('pre', 'preview', '-', 'rc', 'dev')
              408  BUILD_CONST_KEY_MAP_5     5 
              410  STORE_NAME               _legacy_version_replacement_map

 L. 187       412  LOAD_CODE                <code_object _parse_version_parts>
              414  LOAD_STR                 '_parse_version_parts'
              416  MAKE_FUNCTION_0          'Neither defaults, keyword-only args, annotations, nor closures'
              418  STORE_NAME               _parse_version_parts

 L. 205       420  LOAD_CODE                <code_object _legacy_cmpkey>
              422  LOAD_STR                 '_legacy_cmpkey'
              424  MAKE_FUNCTION_0          'Neither defaults, keyword-only args, annotations, nor closures'
              426  STORE_NAME               _legacy_cmpkey

 L. 235       428  LOAD_STR                 '\n    v?\n    (?:\n        (?:(?P<epoch>[0-9]+)!)?                           # epoch\n        (?P<release>[0-9]+(?:\\.[0-9]+)*)                  # release segment\n        (?P<pre>                                          # pre-release\n            [-_\\.]?\n            (?P<pre_l>(a|b|c|rc|alpha|beta|pre|preview))\n            [-_\\.]?\n            (?P<pre_n>[0-9]+)?\n        )?\n        (?P<post>                                         # post release\n            (?:-(?P<post_n1>[0-9]+))\n            |\n            (?:\n                [-_\\.]?\n                (?P<post_l>post|rev|r)\n                [-_\\.]?\n                (?P<post_n2>[0-9]+)?\n            )\n        )?\n        (?P<dev>                                          # dev release\n            [-_\\.]?\n            (?P<dev_l>dev)\n            [-_\\.]?\n            (?P<dev_n>[0-9]+)?\n        )?\n    )\n    (?:\\+(?P<local>[a-z0-9]+(?:[-_\\.][a-z0-9]+)*))?       # local version\n'
              430  STORE_NAME               VERSION_PATTERN

 L. 267       432  LOAD_BUILD_CLASS 
              434  LOAD_CODE                <code_object Version>
              436  LOAD_STR                 'Version'
              438  MAKE_FUNCTION_0          'Neither defaults, keyword-only args, annotations, nor closures'
              440  LOAD_STR                 'Version'
              442  LOAD_NAME                _BaseVersion
              444  CALL_FUNCTION_3       3  ''
              446  STORE_NAME               Version

 L. 420       448  LOAD_CODE                <code_object _parse_letter_version>
              450  LOAD_STR                 '_parse_letter_version'
              452  MAKE_FUNCTION_0          'Neither defaults, keyword-only args, annotations, nor closures'
              454  STORE_NAME               _parse_letter_version

 L. 458       456  LOAD_NAME                re
              458  LOAD_METHOD              compile
              460  LOAD_STR                 '[\\._-]'
              462  CALL_METHOD_1         1  ''
              464  STORE_NAME               _local_version_separators

 L. 461       466  LOAD_CODE                <code_object _parse_local_version>
              468  LOAD_STR                 '_parse_local_version'
              470  MAKE_FUNCTION_0          'Neither defaults, keyword-only args, annotations, nor closures'
              472  STORE_NAME               _parse_local_version

 L. 474       474  LOAD_CODE                <code_object _cmpkey>
              476  LOAD_STR                 '_cmpkey'
              478  MAKE_FUNCTION_0          'Neither defaults, keyword-only args, annotations, nor closures'
              480  STORE_NAME               _cmpkey

Parse error at or near `CALL_FINALLY' instruction at offset 306

Instruction context:
   
 L.  40       302  BUILD_LIST_0          0 
                 304  LOAD_CONST               ('parse', 'Version', 'LegacyVersion', 'InvalidVersion', 'VERSION_PATTERN')
->               306  CALL_FINALLY        309  'to 309'
                 308  STORE_NAME               __all__

test/112037.pyc -- 
# decompile failed
