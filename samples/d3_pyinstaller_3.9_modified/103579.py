# decompyle3 version 3.7.5
# Python bytecode 3.8 (3413)
# Decompiled from: Python 3.8.11 (default, Jun 29 2021, 19:54:56) 
# [GCC 8.3.0]
# Embedded file name: lib2to3\pgen2\parse.py
"""Parser engine for the grammar tables generated by pgen.

The grammar table must be loaded first.

See Parser/parser.c in the Python distribution for additional info on
how this parsing engine works.

"""
from . import token

class ParseError(Exception):
    __doc__ = 'Exception to signal the parser is stuck.'

    def __init__(self, msg, type, value, context):
        Exception.__init__(self, '%s: type=%r, value=%r, context=%r' % (
         msg, type, value, context))
        self.msg = msg
        self.type = type
        self.value = value
        self.context = context

    def __reduce__(self):
        return (
         type(self), (self.msg, self.type, self.value, self.context))


class Parser(object):
    __doc__ = 'Parser engine.\n\n    The proper usage sequence is:\n\n    p = Parser(grammar, [converter])  # create instance\n    p.setup([start])                  # prepare for parsing\n    <for each input token>:\n        if p.addtoken(...):           # parse a token; may raise ParseError\n            break\n    root = p.rootnode                 # root of abstract syntax tree\n\n    A Parser instance may be reused by calling setup() repeatedly.\n\n    A Parser instance contains state pertaining to the current token\n    sequence, and should not be used concurrently by different threads\n    to parse separate token sequences.\n\n    See driver.py for how to get input tokens by tokenizing a file or\n    string.\n\n    Parsing is complete when addtoken() returns True; the root of the\n    abstract syntax tree can then be retrieved from the rootnode\n    instance variable.  When a syntax error occurs, addtoken() raises\n    the ParseError exception.  There is no error recovery; the parser\n    cannot be used after a syntax error was reported (but it can be\n    reinitialized by calling setup()).\n\n    '

    def __init__(self, grammar, convert=None):
        """Constructor.

        The grammar argument is a grammar.Grammar instance; see the
        grammar module for more information.

        The parser is not ready yet for parsing; you must call the
        setup() method to get it started.

        The optional convert argument is a function mapping concrete
        syntax tree nodes to abstract syntax tree nodes.  If not
        given, no conversion is done and the syntax tree produced is
        the concrete syntax tree.  If given, it must be a function of
        two arguments, the first being the grammar (a grammar.Grammar
        instance), and the second being the concrete syntax tree node
        to be converted.  The syntax tree is converted from the bottom
        up.

        A concrete syntax tree node is a (type, value, context, nodes)
        tuple, where type is the node type (a token or symbol number),
        value is None for symbols and a string for tokens, context is
        None or an opaque value used for error reporting (typically a
        (lineno, offset) pair), and nodes is a list of children for
        symbols, and None for tokens.

        An abstract syntax tree node may be anything; this is entirely
        up to the converter function.

        """
        self.grammar = grammar
        self.convert = convert or (lambda grammar, node: node)

    def setup--- This code section failed: ---

 L. 105         0  LOAD_FAST                'start'
                2  LOAD_CONST               None
                4  <117>                 0  ''
                6  POP_JUMP_IF_FALSE    16  'to 16'

 L. 106         8  LOAD_FAST                'self'
               10  LOAD_ATTR                grammar
               12  LOAD_ATTR                start
               14  STORE_FAST               'start'
             16_0  COME_FROM             6  '6'

 L. 110        16  LOAD_FAST                'start'
               18  LOAD_CONST               None
               20  LOAD_CONST               None
               22  BUILD_LIST_0          0 
               24  BUILD_TUPLE_4         4 
               26  STORE_FAST               'newnode'

 L. 111        28  LOAD_FAST                'self'
               30  LOAD_ATTR                grammar
               32  LOAD_ATTR                dfas
               34  LOAD_FAST                'start'
               36  BINARY_SUBSCR    
               38  LOAD_CONST               0
               40  LOAD_FAST                'newnode'
               42  BUILD_TUPLE_3         3 
               44  STORE_FAST               'stackentry'

 L. 112        46  LOAD_FAST                'stackentry'
               48  BUILD_LIST_1          1 
               50  LOAD_FAST                'self'
               52  STORE_ATTR               stack

 L. 113        54  LOAD_CONST               None
               56  LOAD_FAST                'self'
               58  STORE_ATTR               rootnode

 L. 114        60  LOAD_GLOBAL              set
               62  CALL_FUNCTION_0       0  ''
               64  LOAD_FAST                'self'
               66  STORE_ATTR               used_names

Parse error at or near `None' instruction at offset -1

    def addtoken--- This code section failed: ---

 L. 119         0  LOAD_FAST                'self'
                2  LOAD_METHOD              classify
                4  LOAD_FAST                'type'
                6  LOAD_FAST                'value'
                8  LOAD_FAST                'context'
               10  CALL_METHOD_3         3  ''
               12  STORE_FAST               'ilabel'
             14_0  COME_FROM           310  '310'
             14_1  COME_FROM           294  '294'
             14_2  COME_FROM           246  '246'

 L. 122        14  LOAD_FAST                'self'
               16  LOAD_ATTR                stack
               18  LOAD_CONST               -1
               20  BINARY_SUBSCR    
               22  UNPACK_SEQUENCE_3     3 
               24  STORE_FAST               'dfa'
               26  STORE_FAST               'state'
               28  STORE_FAST               'node'

 L. 123        30  LOAD_FAST                'dfa'
               32  UNPACK_SEQUENCE_2     2 
               34  STORE_FAST               'states'
               36  STORE_FAST               'first'

 L. 124        38  LOAD_FAST                'states'
               40  LOAD_FAST                'state'
               42  BINARY_SUBSCR    
               44  STORE_FAST               'arcs'

 L. 126        46  LOAD_FAST                'arcs'
               48  GET_ITER         
             50_0  COME_FROM           248  '248'
             50_1  COME_FROM           218  '218'
             50_2  COME_FROM           190  '190'
               50  FOR_ITER            250  'to 250'
               52  UNPACK_SEQUENCE_2     2 
               54  STORE_FAST               'i'
               56  STORE_FAST               'newstate'

 L. 127        58  LOAD_FAST                'self'
               60  LOAD_ATTR                grammar
               62  LOAD_ATTR                labels
               64  LOAD_FAST                'i'
               66  BINARY_SUBSCR    
               68  UNPACK_SEQUENCE_2     2 
               70  STORE_FAST               't'
               72  STORE_FAST               'v'

 L. 128        74  LOAD_FAST                'ilabel'
               76  LOAD_FAST                'i'
               78  COMPARE_OP               ==
               80  POP_JUMP_IF_FALSE   184  'to 184'

 L. 130        82  LOAD_FAST                't'
               84  LOAD_CONST               256
               86  COMPARE_OP               <
               88  POP_JUMP_IF_TRUE     94  'to 94'
               90  <74>             
               92  RAISE_VARARGS_1       1  'exception instance'
             94_0  COME_FROM            88  '88'

 L. 132        94  LOAD_FAST                'self'
               96  LOAD_METHOD              shift
               98  LOAD_FAST                'type'
              100  LOAD_FAST                'value'
              102  LOAD_FAST                'newstate'
              104  LOAD_FAST                'context'
              106  CALL_METHOD_4         4  ''
              108  POP_TOP          

 L. 134       110  LOAD_FAST                'newstate'
              112  STORE_FAST               'state'
            114_0  COME_FROM           176  '176'

 L. 135       114  LOAD_FAST                'states'
              116  LOAD_FAST                'state'
              118  BINARY_SUBSCR    
              120  LOAD_CONST               0
              122  LOAD_FAST                'state'
              124  BUILD_TUPLE_2         2 
              126  BUILD_LIST_1          1 
              128  COMPARE_OP               ==
              130  POP_JUMP_IF_FALSE   178  'to 178'

 L. 136       132  LOAD_FAST                'self'
              134  LOAD_METHOD              pop
              136  CALL_METHOD_0         0  ''
              138  POP_TOP          

 L. 137       140  LOAD_FAST                'self'
              142  LOAD_ATTR                stack
              144  POP_JUMP_IF_TRUE    152  'to 152'

 L. 139       146  POP_TOP          
              148  LOAD_CONST               True
              150  RETURN_VALUE     
            152_0  COME_FROM           144  '144'

 L. 140       152  LOAD_FAST                'self'
              154  LOAD_ATTR                stack
              156  LOAD_CONST               -1
              158  BINARY_SUBSCR    
              160  UNPACK_SEQUENCE_3     3 
              162  STORE_FAST               'dfa'
              164  STORE_FAST               'state'
              166  STORE_FAST               'node'

 L. 141       168  LOAD_FAST                'dfa'
              170  UNPACK_SEQUENCE_2     2 
              172  STORE_FAST               'states'
              174  STORE_FAST               'first'
              176  JUMP_BACK           114  'to 114'
            178_0  COME_FROM           130  '130'

 L. 143       178  POP_TOP          
              180  LOAD_CONST               False
              182  RETURN_VALUE     
            184_0  COME_FROM            80  '80'

 L. 144       184  LOAD_FAST                't'
              186  LOAD_CONST               256
              188  COMPARE_OP               >=
              190  POP_JUMP_IF_FALSE_BACK    50  'to 50'

 L. 146       192  LOAD_FAST                'self'
              194  LOAD_ATTR                grammar
              196  LOAD_ATTR                dfas
              198  LOAD_FAST                't'
              200  BINARY_SUBSCR    
              202  STORE_FAST               'itsdfa'

 L. 147       204  LOAD_FAST                'itsdfa'
              206  UNPACK_SEQUENCE_2     2 
              208  STORE_FAST               'itsstates'
              210  STORE_FAST               'itsfirst'

 L. 148       212  LOAD_FAST                'ilabel'
              214  LOAD_FAST                'itsfirst'
              216  <118>                 0  ''
              218  POP_JUMP_IF_FALSE_BACK    50  'to 50'

 L. 150       220  LOAD_FAST                'self'
              222  LOAD_METHOD              push
              224  LOAD_FAST                't'
              226  LOAD_FAST                'self'
              228  LOAD_ATTR                grammar
              230  LOAD_ATTR                dfas
              232  LOAD_FAST                't'
              234  BINARY_SUBSCR    
              236  LOAD_FAST                'newstate'
              238  LOAD_FAST                'context'
              240  CALL_METHOD_4         4  ''
              242  POP_TOP          

 L. 151       244  POP_TOP          
              246  BREAK_LOOP           14  'to 14'
              248  JUMP_BACK            50  'to 50'
            250_0  COME_FROM            50  '50'

 L. 153       250  LOAD_CONST               0
              252  LOAD_FAST                'state'
              254  BUILD_TUPLE_2         2 
              256  LOAD_FAST                'arcs'
              258  <118>                 0  ''
          260_262  POP_JUMP_IF_FALSE   296  'to 296'

 L. 155       264  LOAD_FAST                'self'
              266  LOAD_METHOD              pop
              268  CALL_METHOD_0         0  ''
              270  POP_TOP          

 L. 156       272  LOAD_FAST                'self'
              274  LOAD_ATTR                stack
          276_278  POP_JUMP_IF_TRUE    310  'to 310'

 L. 158       280  LOAD_GLOBAL              ParseError
              282  LOAD_STR                 'too much input'

 L. 159       284  LOAD_FAST                'type'
              286  LOAD_FAST                'value'
              288  LOAD_FAST                'context'

 L. 158       290  CALL_FUNCTION_4       4  ''
              292  RAISE_VARARGS_1       1  'exception instance'
              294  JUMP_BACK            14  'to 14'
            296_0  COME_FROM           260  '260'

 L. 162       296  LOAD_GLOBAL              ParseError
              298  LOAD_STR                 'bad input'
              300  LOAD_FAST                'type'
              302  LOAD_FAST                'value'
              304  LOAD_FAST                'context'
              306  CALL_FUNCTION_4       4  ''
              308  RAISE_VARARGS_1       1  'exception instance'
            310_0  COME_FROM           276  '276'
              310  JUMP_BACK            14  'to 14'

Parse error at or near `<74>' instruction at offset 90

    def classify--- This code section failed: ---

 L. 166         0  LOAD_FAST                'type'
                2  LOAD_GLOBAL              token
                4  LOAD_ATTR                NAME
                6  COMPARE_OP               ==
                8  POP_JUMP_IF_FALSE    48  'to 48'

 L. 168        10  LOAD_FAST                'self'
               12  LOAD_ATTR                used_names
               14  LOAD_METHOD              add
               16  LOAD_FAST                'value'
               18  CALL_METHOD_1         1  ''
               20  POP_TOP          

 L. 170        22  LOAD_FAST                'self'
               24  LOAD_ATTR                grammar
               26  LOAD_ATTR                keywords
               28  LOAD_METHOD              get
               30  LOAD_FAST                'value'
               32  CALL_METHOD_1         1  ''
               34  STORE_FAST               'ilabel'

 L. 171        36  LOAD_FAST                'ilabel'
               38  LOAD_CONST               None
               40  <117>                 1  ''
               42  POP_JUMP_IF_FALSE    48  'to 48'

 L. 172        44  LOAD_FAST                'ilabel'
               46  RETURN_VALUE     
             48_0  COME_FROM            42  '42'
             48_1  COME_FROM             8  '8'

 L. 173        48  LOAD_FAST                'self'
               50  LOAD_ATTR                grammar
               52  LOAD_ATTR                tokens
               54  LOAD_METHOD              get
               56  LOAD_FAST                'type'
               58  CALL_METHOD_1         1  ''
               60  STORE_FAST               'ilabel'

 L. 174        62  LOAD_FAST                'ilabel'
               64  LOAD_CONST               None
               66  <117>                 0  ''
               68  POP_JUMP_IF_FALSE    84  'to 84'

 L. 175        70  LOAD_GLOBAL              ParseError
               72  LOAD_STR                 'bad token'
               74  LOAD_FAST                'type'
               76  LOAD_FAST                'value'
               78  LOAD_FAST                'context'
               80  CALL_FUNCTION_4       4  ''
               82  RAISE_VARARGS_1       1  'exception instance'
             84_0  COME_FROM            68  '68'

 L. 176        84  LOAD_FAST                'ilabel'
               86  RETURN_VALUE     
               -1  RETURN_LAST      

Parse error at or near `<117>' instruction at offset 40

    def shift--- This code section failed: ---

 L. 180         0  LOAD_FAST                'self'
                2  LOAD_ATTR                stack
                4  LOAD_CONST               -1
                6  BINARY_SUBSCR    
                8  UNPACK_SEQUENCE_3     3 
               10  STORE_FAST               'dfa'
               12  STORE_FAST               'state'
               14  STORE_FAST               'node'

 L. 181        16  LOAD_FAST                'type'
               18  LOAD_FAST                'value'
               20  LOAD_FAST                'context'
               22  LOAD_CONST               None
               24  BUILD_TUPLE_4         4 
               26  STORE_FAST               'newnode'

 L. 182        28  LOAD_FAST                'self'
               30  LOAD_METHOD              convert
               32  LOAD_FAST                'self'
               34  LOAD_ATTR                grammar
               36  LOAD_FAST                'newnode'
               38  CALL_METHOD_2         2  ''
               40  STORE_FAST               'newnode'

 L. 183        42  LOAD_FAST                'newnode'
               44  LOAD_CONST               None
               46  <117>                 1  ''
               48  POP_JUMP_IF_FALSE    64  'to 64'

 L. 184        50  LOAD_FAST                'node'
               52  LOAD_CONST               -1
               54  BINARY_SUBSCR    
               56  LOAD_METHOD              append
               58  LOAD_FAST                'newnode'
               60  CALL_METHOD_1         1  ''
               62  POP_TOP          
             64_0  COME_FROM            48  '48'

 L. 185        64  LOAD_FAST                'dfa'
               66  LOAD_FAST                'newstate'
               68  LOAD_FAST                'node'
               70  BUILD_TUPLE_3         3 
               72  LOAD_FAST                'self'
               74  LOAD_ATTR                stack
               76  LOAD_CONST               -1
               78  STORE_SUBSCR     

Parse error at or near `<117>' instruction at offset 46

    def push(self, type, newdfa, newstate, context):
        """Push a nonterminal.  (Internal)"""
        dfa, state, node = self.stack[(-1)]
        newnode = (type, None, context, [])
        self.stack[-1] = (dfa, newstate, node)
        self.stack.append(newdfa, 0, newnode)

    def pop--- This code section failed: ---

 L. 196         0  LOAD_FAST                'self'
                2  LOAD_ATTR                stack
                4  LOAD_METHOD              pop
                6  CALL_METHOD_0         0  ''
                8  UNPACK_SEQUENCE_3     3 
               10  STORE_FAST               'popdfa'
               12  STORE_FAST               'popstate'
               14  STORE_FAST               'popnode'

 L. 197        16  LOAD_FAST                'self'
               18  LOAD_METHOD              convert
               20  LOAD_FAST                'self'
               22  LOAD_ATTR                grammar
               24  LOAD_FAST                'popnode'
               26  CALL_METHOD_2         2  ''
               28  STORE_FAST               'newnode'

 L. 198        30  LOAD_FAST                'newnode'
               32  LOAD_CONST               None
               34  <117>                 1  ''
               36  POP_JUMP_IF_FALSE    92  'to 92'

 L. 199        38  LOAD_FAST                'self'
               40  LOAD_ATTR                stack
               42  POP_JUMP_IF_FALSE    76  'to 76'

 L. 200        44  LOAD_FAST                'self'
               46  LOAD_ATTR                stack
               48  LOAD_CONST               -1
               50  BINARY_SUBSCR    
               52  UNPACK_SEQUENCE_3     3 
               54  STORE_FAST               'dfa'
               56  STORE_FAST               'state'
               58  STORE_FAST               'node'

 L. 201        60  LOAD_FAST                'node'
               62  LOAD_CONST               -1
               64  BINARY_SUBSCR    
               66  LOAD_METHOD              append
               68  LOAD_FAST                'newnode'
               70  CALL_METHOD_1         1  ''
               72  POP_TOP          
               74  JUMP_FORWARD         92  'to 92'
             76_0  COME_FROM            42  '42'

 L. 203        76  LOAD_FAST                'newnode'
               78  LOAD_FAST                'self'
               80  STORE_ATTR               rootnode

 L. 204        82  LOAD_FAST                'self'
               84  LOAD_ATTR                used_names
               86  LOAD_FAST                'self'
               88  LOAD_ATTR                rootnode
               90  STORE_ATTR               used_names
             92_0  COME_FROM            74  '74'
             92_1  COME_FROM            36  '36'

Parse error at or near `<117>' instruction at offset 34